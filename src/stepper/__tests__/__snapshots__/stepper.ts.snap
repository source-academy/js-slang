// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Infinite recursion 1`] = `
"function f() {
  return f();
}
f();

function f() {
  return f();
}
f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

f();

"
`;

exports[`const declarations in blocks subst into call expressions 1`] = `
"const z = 1;
function f(g) {
  const z = 3;
  return (y => z + z)(z);
}
f(undefined);

const z = 1;
function f(g) {
  const z = 3;
  return (y => z + z)(z);
}
f(undefined);

function f(g) {
  const z = 3;
  return (y => z + z)(z);
}
f(undefined);

function f(g) {
  const z = 3;
  return (y => z + z)(z);
}
f(undefined);

f(undefined);

f(undefined);

{
  const z = 3;
  return (y => z + z)(z);
};

{
  const z = 3;
  return (y => z + z)(z);
};

{
  return (y => 3 + 3)(3);
};

{
  return (y => 3 + 3)(3);
};

(y => 3 + 3)(3);

(y => 3 + 3)(3);

3 + 3;

3 + 3;

6;

6;
"
`;

exports[`correctly avoids capture by other parameter names 1`] = `
"function f(g, x) {
  return g(x);
}
f(y => x + 1, 2);

function f(g, x) {
  return g(x);
}
f(y => x + 1, 2);

f(y => x + 1, 2);

f(y => x + 1, 2);

(y => x + 1)(2);

(y => x + 1)(2);

x + 1;

x + 1;
"
`;

exports[`expmod 1`] = `
"function is_even(n) {
  return n % 2 === 0;
}
function expmod(base, exp, m) {
  if (exp === 0) {
    return 1;
  } else {
    if (is_even(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
}
expmod(4, 3, 5);

function is_even(n) {
  return n % 2 === 0;
}
function expmod(base, exp, m) {
  if (exp === 0) {
    return 1;
  } else {
    if (is_even(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
}
expmod(4, 3, 5);

function expmod(base, exp, m) {
  if (exp === 0) {
    return 1;
  } else {
    if (is_even(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
}
expmod(4, 3, 5);

function expmod(base, exp, m) {
  if (exp === 0) {
    return 1;
  } else {
    if (is_even(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
}
expmod(4, 3, 5);

expmod(4, 3, 5);

expmod(4, 3, 5);

{
  if (3 === 0) {
    return 1;
  } else {
    if (is_even(3)) {
      const to_half = expmod(4, 3 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 3 - 1, 5) % 5;
    }
  }
};

{
  if (3 === 0) {
    return 1;
  } else {
    if (is_even(3)) {
      const to_half = expmod(4, 3 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 3 - 1, 5) % 5;
    }
  }
};

{
  if (false) {
    return 1;
  } else {
    if (is_even(3)) {
      const to_half = expmod(4, 3 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 3 - 1, 5) % 5;
    }
  }
};

{
  if (false) {
    return 1;
  } else {
    if (is_even(3)) {
      const to_half = expmod(4, 3 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 3 - 1, 5) % 5;
    }
  }
};

{
  if (is_even(3)) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (is_even(3)) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (3 % 2 === 0) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (3 % 2 === 0) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (1 === 0) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (1 === 0) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (false) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  if (false) {
    const to_half = expmod(4, 3 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 3 - 1, 5) % 5;
  }
};

{
  return 4 * expmod(4, 3 - 1, 5) % 5;
};

{
  return 4 * expmod(4, 3 - 1, 5) % 5;
};

4 * expmod(4, 3 - 1, 5) % 5;

4 * expmod(4, 3 - 1, 5) % 5;

4 * expmod(4, 2, 5) % 5;

4 * expmod(4, 2, 5) % 5;

4 * {
  if (2 === 0) {
    return 1;
  } else {
    if (is_even(2)) {
      const to_half = expmod(4, 2 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 2 - 1, 5) % 5;
    }
  }
} % 5;

4 * {
  if (2 === 0) {
    return 1;
  } else {
    if (is_even(2)) {
      const to_half = expmod(4, 2 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 2 - 1, 5) % 5;
    }
  }
} % 5;

4 * {
  if (false) {
    return 1;
  } else {
    if (is_even(2)) {
      const to_half = expmod(4, 2 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 2 - 1, 5) % 5;
    }
  }
} % 5;

4 * {
  if (false) {
    return 1;
  } else {
    if (is_even(2)) {
      const to_half = expmod(4, 2 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 2 - 1, 5) % 5;
    }
  }
} % 5;

4 * {
  if (is_even(2)) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (is_even(2)) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (2 % 2 === 0) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (2 % 2 === 0) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (0 === 0) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (0 === 0) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (true) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  if (true) {
    const to_half = expmod(4, 2 / 2, 5);
    return to_half * to_half % 5;
  } else {
    return 4 * expmod(4, 2 - 1, 5) % 5;
  }
} % 5;

4 * {
  const to_half = expmod(4, 2 / 2, 5);
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = expmod(4, 2 / 2, 5);
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = expmod(4, 1, 5);
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = expmod(4, 1, 5);
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 === 0) {
      return 1;
    } else {
      if (is_even(1)) {
        const to_half = expmod(4, 1 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 1 - 1, 5) % 5;
      }
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 === 0) {
      return 1;
    } else {
      if (is_even(1)) {
        const to_half = expmod(4, 1 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 1 - 1, 5) % 5;
      }
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (false) {
      return 1;
    } else {
      if (is_even(1)) {
        const to_half = expmod(4, 1 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 1 - 1, 5) % 5;
      }
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (false) {
      return 1;
    } else {
      if (is_even(1)) {
        const to_half = expmod(4, 1 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 1 - 1, 5) % 5;
      }
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (is_even(1)) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (is_even(1)) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 % 2 === 0) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 % 2 === 0) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 === 0) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (1 === 0) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (false) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    if (false) {
      const to_half = expmod(4, 1 / 2, 5);
      return to_half * to_half % 5;
    } else {
      return 4 * expmod(4, 1 - 1, 5) % 5;
    }
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    return 4 * expmod(4, 1 - 1, 5) % 5;
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = {
    return 4 * expmod(4, 1 - 1, 5) % 5;
  };
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * expmod(4, 1 - 1, 5) % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * expmod(4, 1 - 1, 5) % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * expmod(4, 0, 5) % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * expmod(4, 0, 5) % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    if (0 === 0) {
      return 1;
    } else {
      if (is_even(0)) {
        const to_half = expmod(4, 0 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 0 - 1, 5) % 5;
      }
    }
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    if (0 === 0) {
      return 1;
    } else {
      if (is_even(0)) {
        const to_half = expmod(4, 0 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 0 - 1, 5) % 5;
      }
    }
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    if (true) {
      return 1;
    } else {
      if (is_even(0)) {
        const to_half = expmod(4, 0 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 0 - 1, 5) % 5;
      }
    }
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    if (true) {
      return 1;
    } else {
      if (is_even(0)) {
        const to_half = expmod(4, 0 / 2, 5);
        return to_half * to_half % 5;
      } else {
        return 4 * expmod(4, 0 - 1, 5) % 5;
      }
    }
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    return 1;
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * {
    return 1;
  } % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * 1 % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 * 1 % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4 % 5;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4;
  return to_half * to_half % 5;
} % 5;

4 * {
  const to_half = 4;
  return to_half * to_half % 5;
} % 5;

4 * {
  return 4 * 4 % 5;
} % 5;

4 * {
  return 4 * 4 % 5;
} % 5;

4 * (4 * 4 % 5) % 5;

4 * (4 * 4 % 5) % 5;

4 * (16 % 5) % 5;

4 * (16 % 5) % 5;

4 * 1 % 5;

4 * 1 % 5;

4 % 5;

4 % 5;

4;

4;
"
`;

exports[`function declarations in blocks are protected 1`] = `
"function repeat_pattern(n, p, r) {
  function twice_p(r) {
    return p(p(r));
  }
  return n === 0 ? r : n % 2 !== 0 ? repeat_pattern(n - 1, p, p(r)) : repeat_pattern(n / 2, twice_p, r);
}
function plus_one(x) {
  return x + 1;
}
repeat_pattern(5, plus_one, 0);

function repeat_pattern(n, p, r) {
  function twice_p(r) {
    return p(p(r));
  }
  return n === 0 ? r : n % 2 !== 0 ? repeat_pattern(n - 1, p, p(r)) : repeat_pattern(n / 2, twice_p, r);
}
function plus_one(x) {
  return x + 1;
}
repeat_pattern(5, plus_one, 0);

function plus_one(x) {
  return x + 1;
}
repeat_pattern(5, plus_one, 0);

function plus_one(x) {
  return x + 1;
}
repeat_pattern(5, plus_one, 0);

repeat_pattern(5, plus_one, 0);

repeat_pattern(5, plus_one, 0);

{
  function twice_p(r) {
    return plus_one(plus_one(r));
  }
  return 5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);
};

{
  function twice_p(r) {
    return plus_one(plus_one(r));
  }
  return 5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);
};

{
  return 5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);
};

{
  return 5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);
};

5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

5 === 0 ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

false ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

false ? 0 : 5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

5 % 2 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

1 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

1 !== 0 ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

true ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

true ? repeat_pattern(5 - 1, plus_one, plus_one(0)) : repeat_pattern(5 / 2, twice_p, 0);

repeat_pattern(5 - 1, plus_one, plus_one(0));

repeat_pattern(5 - 1, plus_one, plus_one(0));

repeat_pattern(4, plus_one, plus_one(0));

repeat_pattern(4, plus_one, plus_one(0));

repeat_pattern(4, plus_one, 0 + 1);

repeat_pattern(4, plus_one, 0 + 1);

repeat_pattern(4, plus_one, 1);

repeat_pattern(4, plus_one, 1);

{
  function twice_p(r) {
    return plus_one(plus_one(r));
  }
  return 4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);
};

{
  function twice_p(r) {
    return plus_one(plus_one(r));
  }
  return 4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);
};

{
  return 4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);
};

{
  return 4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);
};

4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

4 === 0 ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

false ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

false ? 1 : 4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

4 % 2 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

0 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

0 !== 0 ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

false ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

false ? repeat_pattern(4 - 1, plus_one, plus_one(1)) : repeat_pattern(4 / 2, twice_p, 1);

repeat_pattern(4 / 2, twice_p, 1);

repeat_pattern(4 / 2, twice_p, 1);

repeat_pattern(2, twice_p, 1);

repeat_pattern(2, twice_p, 1);

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);
};

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);
};

{
  return 2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);
};

{
  return 2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);
};

2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

2 === 0 ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

false ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

false ? 1 : 2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

2 % 2 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

0 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

0 !== 0 ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

false ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

false ? repeat_pattern(2 - 1, twice_p, twice_p(1)) : repeat_pattern(2 / 2, twice_p, 1);

repeat_pattern(2 / 2, twice_p, 1);

repeat_pattern(2 / 2, twice_p, 1);

repeat_pattern(1, twice_p, 1);

repeat_pattern(1, twice_p, 1);

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);
};

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);
};

{
  return 1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);
};

{
  return 1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);
};

1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

1 === 0 ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

false ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

false ? 1 : 1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

1 % 2 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

1 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

1 !== 0 ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

true ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

true ? repeat_pattern(1 - 1, twice_p, twice_p(1)) : repeat_pattern(1 / 2, twice_p, 1);

repeat_pattern(1 - 1, twice_p, twice_p(1));

repeat_pattern(1 - 1, twice_p, twice_p(1));

repeat_pattern(0, twice_p, twice_p(1));

repeat_pattern(0, twice_p, twice_p(1));

repeat_pattern(0, twice_p, twice_p(twice_p(1)));

repeat_pattern(0, twice_p, twice_p(twice_p(1)));

repeat_pattern(0, twice_p, twice_p(plus_one(plus_one(1))));

repeat_pattern(0, twice_p, twice_p(plus_one(plus_one(1))));

repeat_pattern(0, twice_p, twice_p(plus_one(1 + 1)));

repeat_pattern(0, twice_p, twice_p(plus_one(1 + 1)));

repeat_pattern(0, twice_p, twice_p(plus_one(2)));

repeat_pattern(0, twice_p, twice_p(plus_one(2)));

repeat_pattern(0, twice_p, twice_p(2 + 1));

repeat_pattern(0, twice_p, twice_p(2 + 1));

repeat_pattern(0, twice_p, twice_p(3));

repeat_pattern(0, twice_p, twice_p(3));

repeat_pattern(0, twice_p, plus_one(plus_one(3)));

repeat_pattern(0, twice_p, plus_one(plus_one(3)));

repeat_pattern(0, twice_p, plus_one(3 + 1));

repeat_pattern(0, twice_p, plus_one(3 + 1));

repeat_pattern(0, twice_p, plus_one(4));

repeat_pattern(0, twice_p, plus_one(4));

repeat_pattern(0, twice_p, 4 + 1);

repeat_pattern(0, twice_p, 4 + 1);

repeat_pattern(0, twice_p, 5);

repeat_pattern(0, twice_p, 5);

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);
};

{
  function twice_p(r) {
    return twice_p(twice_p(r));
  }
  return 0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);
};

{
  return 0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);
};

{
  return 0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);
};

0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);

0 === 0 ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);

true ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);

true ? 5 : 0 % 2 !== 0 ? repeat_pattern(0 - 1, twice_p, twice_p(5)) : repeat_pattern(0 / 2, twice_p, 5);

5;

5;
"
`;

exports[`multiple clash 2 for function declaration 1`] = `
"function g() {
  return x + x_1;
}
function f(x) {
  function h(x_1) {
    return x_2 + g();
  }
  return h;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function g() {
  return x + x_1;
}
function f(x) {
  function h(x_1) {
    return x_2 + g();
  }
  return h;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return x_2 + g();
  }
  return h;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return x_2 + g();
  }
  return h;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_1 = 2;
const x = 1;
f(1)(1);

const x_1 = 2;
const x = 1;
f(1)(1);

const x = 1;
f(1)(1);

const x = 1;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return 0 + g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return 0 + g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

0 + g();

0 + g();

0 + (1 + 2);

0 + (1 + 2);

0 + 3;

0 + 3;

3;

3;
"
`;

exports[`multiple clash 2 for function expression 1`] = `
"function f(x) {
  function h(x_1) {
    return x_2 + g();
  }
  return h;
}
function g() {
  return x + x_1;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function f(x) {
  function h(x_1) {
    return x_2 + g();
  }
  return h;
}
function g() {
  return x + x_1;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function g() {
  return x + x_1;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

function g() {
  return x + x_1;
}
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const x_1 = 2;
const x = 1;
f(1)(1);

const x_1 = 2;
const x = 1;
f(1)(1);

const x = 1;
f(1)(1);

const x = 1;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return 0 + g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return 0 + g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

0 + g();

0 + g();

0 + (1 + 2);

0 + (1 + 2);

0 + 3;

0 + 3;

3;

3;
"
`;

exports[`multiple clash 2 for lambda function 1`] = `
"const f = x => x_1 => x_2 + g();
const g = () => x + x_1;
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const f = x => x_1 => x_2 + g();
const g = () => x + x_1;
const x_2 = 0;
const x_1 = 2;
const x = 1;
f(1)(1);

const g = () => x + x_1;
const x_2 = 0;
const x_1 = 2;
const x = 1;
(x => x_1 => x_2 + g())(1)(1);

const g = () => x + x_1;
const x_2 = 0;
const x_1 = 2;
const x = 1;
(x => x_1 => x_2 + g())(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
(x_3 => x_4 => x_2 + (() => x + x_1)())(1)(1);

const x_2 = 0;
const x_1 = 2;
const x = 1;
(x_3 => x_4 => x_2 + (() => x + x_1)())(1)(1);

const x_1 = 2;
const x = 1;
(x_3 => x_4 => 0 + (() => x + x_1)())(1)(1);

const x_1 = 2;
const x = 1;
(x_3 => x_4 => 0 + (() => x + x_1)())(1)(1);

const x = 1;
(x_3 => x_4 => 0 + (() => x + 2)())(1)(1);

const x = 1;
(x_3 => x_4 => 0 + (() => x + 2)())(1)(1);

(x_3 => x_4 => 0 + (() => 1 + 2)())(1)(1);

(x_3 => x_4 => 0 + (() => 1 + 2)())(1)(1);

(x_4 => 0 + (() => 1 + 2)())(1);

(x_4 => 0 + (() => 1 + 2)())(1);

0 + (() => 1 + 2)();

0 + (() => 1 + 2)();

0 + (1 + 2);

0 + (1 + 2);

0 + 3;

0 + 3;

3;

3;
"
`;

exports[`multiple clash for function declaration 1`] = `
"function g() {
  return x_2 + x_3;
}
function f(x_2) {
  function h(x_3) {
    return x_4 + g();
  }
  return h;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function g() {
  return x_2 + x_3;
}
function f(x_2) {
  function h(x_3) {
    return x_4 + g();
  }
  return h;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function f(x_5) {
  function h(x_6) {
    return x_4 + g();
  }
  return h;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function f(x_5) {
  function h(x_6) {
    return x_4 + g();
  }
  return h;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_4 = 2;
f(1)(1);

const x_4 = 2;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_6) {
    return 2 + g();
  }
  return h;
}(1);

{
  function h(x_6) {
    return 2 + g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

2 + g();

2 + g();

2 + (2 + 0);

2 + (2 + 0);

2 + 2;

2 + 2;

4;

4;
"
`;

exports[`multiple clash for function expression 1`] = `
"function f(x_2) {
  function h(x_3) {
    return x_4 + g();
  }
  return h;
}
function g() {
  return x_2 + x_3;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function f(x_2) {
  function h(x_3) {
    return x_4 + g();
  }
  return h;
}
function g() {
  return x_2 + x_3;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function g() {
  return x_2 + x_3;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

function g() {
  return x_2 + x_3;
}
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_2 = 2;
const x_4 = 2;
f(1)(1);

const x_4 = 2;
f(1)(1);

const x_4 = 2;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_6) {
    return 2 + g();
  }
  return h;
}(1);

{
  function h(x_6) {
    return 2 + g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

2 + g();

2 + g();

2 + (2 + 0);

2 + (2 + 0);

2 + 2;

2 + 2;

4;

4;
"
`;

exports[`multiple clash for lambda function 1`] = `
"const f = x_2 => x_3 => x_4 + g();
const g = () => x_2 + x_3;
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const f = x_2 => x_3 => x_4 + g();
const g = () => x_2 + x_3;
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
f(1)(1);

const g = () => x_2 + x_3;
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
(x_2 => x_3 => x_4 + g())(1)(1);

const g = () => x_2 + x_3;
const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
(x_2 => x_3 => x_4 + g())(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
(x_5 => x_6 => x_4 + (() => x_2 + x_3)())(1)(1);

const x_3 = 0;
const x_2 = 2;
const x_4 = 2;
(x_5 => x_6 => x_4 + (() => x_2 + x_3)())(1)(1);

const x_2 = 2;
const x_4 = 2;
(x_5 => x_6 => x_4 + (() => x_2 + 0)())(1)(1);

const x_2 = 2;
const x_4 = 2;
(x_5 => x_6 => x_4 + (() => x_2 + 0)())(1)(1);

const x_4 = 2;
(x_5 => x_6 => x_4 + (() => 2 + 0)())(1)(1);

const x_4 = 2;
(x_5 => x_6 => x_4 + (() => 2 + 0)())(1)(1);

(x_5 => x_6 => 2 + (() => 2 + 0)())(1)(1);

(x_5 => x_6 => 2 + (() => 2 + 0)())(1)(1);

(x_6 => 2 + (() => 2 + 0)())(1);

(x_6 => 2 + (() => 2 + 0)())(1);

2 + (() => 2 + 0)();

2 + (() => 2 + 0)();

2 + (2 + 0);

2 + (2 + 0);

2 + 2;

2 + 2;

4;

4;
"
`;

exports[`renaming clash in replacement for function declaration 1`] = `
"function g() {
  return x_1 + x_2;
}
function f(x_1) {
  function h(x_2) {
    return g();
  }
  return h;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function g() {
  return x_1 + x_2;
}
function f(x_1) {
  function h(x_2) {
    return g();
  }
  return h;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return g();
  }
  return h;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return g();
  }
  return h;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_2 = 0;
f(1)(1);

const x_2 = 0;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

g();

g();

0 + 0;

0 + 0;

0;

0;
"
`;

exports[`renaming clash in replacement for function expression 1`] = `
"function f(x_1) {
  function h(x_2) {
    return g();
  }
  return h;
}
function g() {
  return x_1 + x_2;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function f(x_1) {
  function h(x_2) {
    return g();
  }
  return h;
}
function g() {
  return x_1 + x_2;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function g() {
  return x_1 + x_2;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

function g() {
  return x_1 + x_2;
}
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_2 = 0;
f(1)(1);

const x_2 = 0;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

g();

g();

0 + 0;

0 + 0;

0;

0;
"
`;

exports[`renaming clash in replacement for lambda function 1`] = `
"const g = () => x_1 + x_2;
const f = x_1 => x_2 => g();
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const g = () => x_1 + x_2;
const f = x_1 => x_2 => g();
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const f = x_3 => x_4 => (() => x_1 + x_2)();
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const f = x_3 => x_4 => (() => x_1 + x_2)();
const x_1 = 0;
const x_2 = 0;
f(1)(1);

const x_1 = 0;
const x_2 = 0;
(x_3 => x_4 => (() => x_1 + x_2)())(1)(1);

const x_1 = 0;
const x_2 = 0;
(x_3 => x_4 => (() => x_1 + x_2)())(1)(1);

const x_2 = 0;
(x_3 => x_4 => (() => 0 + x_2)())(1)(1);

const x_2 = 0;
(x_3 => x_4 => (() => 0 + x_2)())(1)(1);

(x_3 => x_4 => (() => 0 + 0)())(1)(1);

(x_3 => x_4 => (() => 0 + 0)())(1)(1);

(x_4 => (() => 0 + 0)())(1);

(x_4 => (() => 0 + 0)())(1);

(() => 0 + 0)();

(() => 0 + 0)();

0 + 0;

0 + 0;

0;

0;
"
`;

exports[`renaming clash test for functions 1`] = `
"function f(w_8) {
  function h(w_9) {
    return w_8 + w_9 + g();
  }
  return h;
}
function g() {
  return w_9;
}
const w_9 = 0;
f(1)(2);

function f(w_8) {
  function h(w_9) {
    return w_8 + w_9 + g();
  }
  return h;
}
function g() {
  return w_9;
}
const w_9 = 0;
f(1)(2);

function g() {
  return w_9;
}
const w_9 = 0;
f(1)(2);

function g() {
  return w_9;
}
const w_9 = 0;
f(1)(2);

const w_9 = 0;
f(1)(2);

const w_9 = 0;
f(1)(2);

f(1)(2);

f(1)(2);

{
  function h(w_10) {
    return 1 + w_10 + g();
  }
  return h;
}(2);

{
  function h(w_10) {
    return 1 + w_10 + g();
  }
  return h;
}(2);

{
  return h;
}(2);

{
  return h;
}(2);

h(2);

h(2);

1 + 2 + g();

1 + 2 + g();

3 + g();

3 + g();

3 + 0;

3 + 0;

3;

3;
"
`;

exports[`renaming clash test for lambda function 1`] = `
"const f = w_11 => w_10 => w_11 + w_10 + g();
const g = () => w_10;
const w_10 = 0;
f(1)(2);

const f = w_11 => w_10 => w_11 + w_10 + g();
const g = () => w_10;
const w_10 = 0;
f(1)(2);

const g = () => w_10;
const w_10 = 0;
(w_11 => w_10 => w_11 + w_10 + g())(1)(2);

const g = () => w_10;
const w_10 = 0;
(w_11 => w_10 => w_11 + w_10 + g())(1)(2);

const w_10 = 0;
(w_11 => w_12 => w_11 + w_12 + (() => w_10)())(1)(2);

const w_10 = 0;
(w_11 => w_12 => w_11 + w_12 + (() => w_10)())(1)(2);

(w_11 => w_12 => w_11 + w_12 + (() => 0)())(1)(2);

(w_11 => w_12 => w_11 + w_12 + (() => 0)())(1)(2);

(w_12 => 1 + w_12 + (() => 0)())(2);

(w_12 => 1 + w_12 + (() => 0)())(2);

1 + 2 + (() => 0)();

1 + 2 + (() => 0)();

3 + (() => 0)();

3 + (() => 0)();

3 + 0;

3 + 0;

3;

3;
"
`;

exports[`renaming clash with declaration in replacement for function declaration 1`] = `
"function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
function f(x) {
  function h(x_1) {
    return x + g();
  }
  return h;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
function f(x) {
  function h(x_1) {
    return x + g();
  }
  return h;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return x_3 + g();
  }
  return h;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function f(x_3) {
  function h(x_4) {
    return x_3 + g();
  }
  return h;
}
const x_1 = 0;
const x = 0;
f(1)(1);

const x_1 = 0;
const x = 0;
f(1)(1);

const x_1 = 0;
const x = 0;
f(1)(1);

const x = 0;
f(1)(1);

const x = 0;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return 1 + g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return 1 + g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

1 + g();

1 + g();

1 + {
  const x_2 = 2;
  return 0 + x_2 + 0;
};

1 + {
  const x_2 = 2;
  return 0 + x_2 + 0;
};

1 + {
  return 0 + 2 + 0;
};

1 + {
  return 0 + 2 + 0;
};

1 + (0 + 2 + 0);

1 + (0 + 2 + 0);

1 + (2 + 0);

1 + (2 + 0);

1 + 2;

1 + 2;

3;

3;
"
`;

exports[`renaming clash with declaration in replacement for function expression 1`] = `
"function f(x) {
  function h(x_1) {
    return g();
  }
  return h;
}
function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function f(x) {
  function h(x_1) {
    return g();
  }
  return h;
}
function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
const x_1 = 0;
const x = 0;
f(1)(1);

function g() {
  const x_2 = 2;
  return x_1 + x_2 + x;
}
const x_1 = 0;
const x = 0;
f(1)(1);

const x_1 = 0;
const x = 0;
f(1)(1);

const x_1 = 0;
const x = 0;
f(1)(1);

const x = 0;
f(1)(1);

const x = 0;
f(1)(1);

f(1)(1);

f(1)(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  function h(x_4) {
    return g();
  }
  return h;
}(1);

{
  return h;
}(1);

{
  return h;
}(1);

h(1);

h(1);

g();

g();

{
  const x_2 = 2;
  return 0 + x_2 + 0;
};

{
  const x_2 = 2;
  return 0 + x_2 + 0;
};

{
  return 0 + 2 + 0;
};

{
  return 0 + 2 + 0;
};

0 + 2 + 0;

0 + 2 + 0;

2 + 0;

2 + 0;

2;

2;
"
`;

exports[`renaming clash with declaration in replacement for lambda function 1`] = `
"const f = x => x_1 => g();
const g = () => {
  const x_2 = 2;
  return x_1 + x + x_2;
};
const x = 0;
const x_1 = 0;
f(1)(1);

const f = x => x_1 => g();
const g = () => {
  const x_2 = 2;
  return x_1 + x + x_2;
};
const x = 0;
const x_1 = 0;
f(1)(1);

const g = () => {
  const x_2 = 2;
  return x_1 + x + x_2;
};
const x = 0;
const x_1 = 0;
(x => x_1 => g())(1)(1);

const g = () => {
  const x_2 = 2;
  return x_1 + x + x_2;
};
const x = 0;
const x_1 = 0;
(x => x_1 => g())(1)(1);

const x = 0;
const x_1 = 0;
(x_3 => x_4 => (() => {
  const x_2 = 2;
  return x_1 + x + x_2;
})())(1)(1);

const x = 0;
const x_1 = 0;
(x_3 => x_4 => (() => {
  const x_2 = 2;
  return x_1 + x + x_2;
})())(1)(1);

const x_1 = 0;
(x_3 => x_4 => (() => {
  const x_2 = 2;
  return x_1 + 0 + x_2;
})())(1)(1);

const x_1 = 0;
(x_3 => x_4 => (() => {
  const x_2 = 2;
  return x_1 + 0 + x_2;
})())(1)(1);

(x_3 => x_4 => (() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})())(1)(1);

(x_3 => x_4 => (() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})())(1)(1);

(x_4 => (() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})())(1);

(x_4 => (() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})())(1);

(() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})();

(() => {
  const x_2 = 2;
  return 0 + 0 + x_2;
})();

{
  const x_2 = 2;
  return 0 + 0 + x_2;
};

{
  const x_2 = 2;
  return 0 + 0 + x_2;
};

{
  return 0 + 0 + 2;
};

{
  return 0 + 0 + 2;
};

0 + 0 + 2;

0 + 0 + 2;

0 + 2;

0 + 2;

2;

2;
"
`;

exports[`renaming clash with parameter of function declaration in block 1`] = `
"function g() {
  return x_1;
}
function f(x_1) {
  function h(x_2) {
    return x_1 + g();
  }
  return h;
}
const x_1 = 1;
f(3)(2);

function g() {
  return x_1;
}
function f(x_1) {
  function h(x_2) {
    return x_1 + g();
  }
  return h;
}
const x_1 = 1;
f(3)(2);

function f(x_3) {
  function h(x_2) {
    return x_3 + g();
  }
  return h;
}
const x_1 = 1;
f(3)(2);

function f(x_3) {
  function h(x_2) {
    return x_3 + g();
  }
  return h;
}
const x_1 = 1;
f(3)(2);

const x_1 = 1;
f(3)(2);

const x_1 = 1;
f(3)(2);

f(3)(2);

f(3)(2);

{
  function h(x_2) {
    return 3 + g();
  }
  return h;
}(2);

{
  function h(x_2) {
    return 3 + g();
  }
  return h;
}(2);

{
  return h;
}(2);

{
  return h;
}(2);

h(2);

h(2);

3 + g();

3 + g();

3 + 1;

3 + 1;

4;

4;
"
`;

exports[`renaming clash with parameter of lambda function declaration in block 1`] = `
"const g = () => x_1;
const f = x_1 => {
  const h = x_2 => x_1 + g();
  return h;
};
const x_1 = 1;
f(3)(2);

const g = () => x_1;
const f = x_1 => {
  const h = x_2 => x_1 + g();
  return h;
};
const x_1 = 1;
f(3)(2);

const f = x_3 => {
  const h = x_2 => x_3 + (() => x_1)();
  return h;
};
const x_1 = 1;
f(3)(2);

const f = x_3 => {
  const h = x_2 => x_3 + (() => x_1)();
  return h;
};
const x_1 = 1;
f(3)(2);

const x_1 = 1;
(x_3 => {
  const h = x_2 => x_3 + (() => x_1)();
  return h;
})(3)(2);

const x_1 = 1;
(x_3 => {
  const h = x_2 => x_3 + (() => x_1)();
  return h;
})(3)(2);

(x_3 => {
  const h = x_2 => x_3 + (() => 1)();
  return h;
})(3)(2);

(x_3 => {
  const h = x_2 => x_3 + (() => 1)();
  return h;
})(3)(2);

{
  const h = x_2 => 3 + (() => 1)();
  return h;
}(2);

{
  const h = x_2 => 3 + (() => 1)();
  return h;
}(2);

{
  return x_2 => 3 + (() => 1)();
}(2);

{
  return x_2 => 3 + (() => 1)();
}(2);

(x_2 => 3 + (() => 1)())(2);

(x_2 => 3 + (() => 1)())(2);

3 + (() => 1)();

3 + (() => 1)();

3 + 1;

3 + 1;

4;

4;
"
`;

exports[`renaming of outer parameter in lambda function 1`] = `
"const g = () => w_1;
const f = w_1 => w_2 => w_1 + g();
const w_1 = 0;
f(1)(1);

const g = () => w_1;
const f = w_1 => w_2 => w_1 + g();
const w_1 = 0;
f(1)(1);

const f = w_3 => w_2 => w_3 + (() => w_1)();
const w_1 = 0;
f(1)(1);

const f = w_3 => w_2 => w_3 + (() => w_1)();
const w_1 = 0;
f(1)(1);

const w_1 = 0;
(w_3 => w_2 => w_3 + (() => w_1)())(1)(1);

const w_1 = 0;
(w_3 => w_2 => w_3 + (() => w_1)())(1)(1);

(w_3 => w_2 => w_3 + (() => 0)())(1)(1);

(w_3 => w_2 => w_3 + (() => 0)())(1)(1);

(w_2 => 1 + (() => 0)())(1);

(w_2 => 1 + (() => 0)())(1);

1 + (() => 0)();

1 + (() => 0)();

1 + 0;

1 + 0;

1;

1;
"
`;

exports[`return in nested blocks 1`] = `
"function f(x) {
  {
    return 1;
  }
}
f(0);

function f(x) {
  {
    return 1;
  }
}
f(0);

f(0);

f(0);

{
  {
    return 1;
  }
};

{
  {
    return 1;
  }
};

{
  return 1;
};

{
  return 1;
};

1;

1;
"
`;

exports[`scoping test for block expressions 1`] = `
"function f(x) {
  const y = x;
  return g();
}
function g() {
  return y;
}
const y = 1;
f(0);

function f(x) {
  const y = x;
  return g();
}
function g() {
  return y;
}
const y = 1;
f(0);

function g() {
  return y;
}
const y = 1;
f(0);

function g() {
  return y;
}
const y = 1;
f(0);

const y = 1;
f(0);

const y = 1;
f(0);

f(0);

f(0);

{
  const y_1 = 0;
  return g();
};

{
  const y_1 = 0;
  return g();
};

{
  return g();
};

{
  return g();
};

g();

g();

1;

1;
"
`;

exports[`scoping test for block expressions, no renaming 1`] = `
"function h(w) {
  function f(w) {
    return g();
  }
  function g() {
    return w;
  }
  return f(0);
}
h(1);

function h(w) {
  function f(w) {
    return g();
  }
  function g() {
    return w;
  }
  return f(0);
}
h(1);

h(1);

h(1);

{
  function f(w) {
    return g();
  }
  function g() {
    return 1;
  }
  return f(0);
};

{
  function f(w) {
    return g();
  }
  function g() {
    return 1;
  }
  return f(0);
};

{
  function g() {
    return 1;
  }
  return f(0);
};

{
  function g() {
    return 1;
  }
  return f(0);
};

{
  return f(0);
};

{
  return f(0);
};

f(0);

f(0);

g();

g();

1;

1;
"
`;

exports[`scoping test for block expressions, with renaming 1`] = `
"function f(w) {
  return g();
}
function h(f) {
  function g() {
    return w;
  }
  const w = 0;
  return f(1);
}
h(f);

function f(w) {
  return g();
}
function h(f) {
  function g() {
    return w;
  }
  const w = 0;
  return f(1);
}
h(f);

function h(f) {
  function g() {
    return w;
  }
  const w = 0;
  return f(1);
}
h(f);

function h(f) {
  function g() {
    return w;
  }
  const w = 0;
  return f(1);
}
h(f);

h(f);

h(f);

{
  function g_1() {
    return w;
  }
  const w = 0;
  return f(1);
};

{
  function g_1() {
    return w;
  }
  const w = 0;
  return f(1);
};

{
  const w = 0;
  return f(1);
};

{
  const w = 0;
  return f(1);
};

{
  return f(1);
};

{
  return f(1);
};

f(1);

f(1);

g();

g();
"
`;

exports[`scoping test for blocks nested in lambda expressions 1`] = `
"const f = x => {
  g();
};
const g = () => {
  x;
};
const x = 1;
f(0);

const f = x => {
  g();
};
const g = () => {
  x;
};
const x = 1;
f(0);

const g = () => {
  x;
};
const x = 1;
(x => {
  g();
})(0);

const g = () => {
  x;
};
const x = 1;
(x => {
  g();
})(0);

const x = 1;
(x_1 => {
  (() => {
    x;
  })();
})(0);

const x = 1;
(x_1 => {
  (() => {
    x;
  })();
})(0);

(x_1 => {
  (() => {
    1;
  })();
})(0);

(x_1 => {
  (() => {
    1;
  })();
})(0);

{
  (() => {
    1;
  })();
};

{
  (() => {
    1;
  })();
};

{
  {
    1;
  };
};

{
  {
    1;
  };
};

{
  undefined;
};

{
  undefined;
};

undefined;

undefined;
"
`;

exports[`scoping test for function expressions 1`] = `
"function f(x) {
  return g();
}
function g() {
  return x;
}
const x = 1;
f(0);

function f(x) {
  return g();
}
function g() {
  return x;
}
const x = 1;
f(0);

function g() {
  return x;
}
const x = 1;
f(0);

function g() {
  return x;
}
const x = 1;
f(0);

const x = 1;
f(0);

const x = 1;
f(0);

f(0);

f(0);

g();

g();

1;

1;
"
`;

exports[`scoping test for lambda expressions 1`] = `
"const f = x => g();
const g = () => x;
const x = 1;
f(0);

const f = x => g();
const g = () => x;
const x = 1;
f(0);

const g = () => x;
const x = 1;
(x => g())(0);

const g = () => x;
const x = 1;
(x => g())(0);

const x = 1;
(x_1 => (() => x)())(0);

const x = 1;
(x_1 => (() => x)())(0);

(x_1 => (() => 1)())(0);

(x_1 => (() => 1)())(0);

(() => 1)();

(() => 1)();

1;

1;
"
`;

exports[`scoping test for lambda expressions nested in blocks 1`] = `
"{
  const f = x => g();
  const g = () => x;
  const x = 1;
  f(0);
}

{
  const f = x => g();
  const g = () => x;
  const x = 1;
  f(0);
}

{
  const g = () => x;
  const x = 1;
  (x => g())(0);
}

{
  const g = () => x;
  const x = 1;
  (x => g())(0);
}

{
  const x = 1;
  (x_1 => (() => x)())(0);
}

{
  const x = 1;
  (x_1 => (() => x)())(0);
}

{
  (x_1 => (() => 1)())(0);
}

{
  (x_1 => (() => 1)())(0);
}

{
  (() => 1)();
}

{
  (() => 1)();
}

{
  1;
}

{
  1;
}

1;

1;
"
`;

exports[`subsets 1`] = `
"function subsets(s) {
  if (is_null(s)) {
    return list(null);
  } else {
    const rest = subsets(tail(s));
    return append(rest, map(x => pair(head(s), x), rest));
  }
}
subsets(list(1, 2, 3));

function subsets(s) {
  if (is_null(s)) {
    return list(null);
  } else {
    const rest = subsets(tail(s));
    return append(rest, map(x => pair(head(s), x), rest));
  }
}
subsets(list(1, 2, 3));

subsets(list(1, 2, 3));

subsets(list(1, 2, 3));

subsets([1, [2, [3, null]]]);

subsets([1, [2, [3, null]]]);

{
  if (is_null([1, [2, [3, null]]])) {
    return list(null);
  } else {
    const rest = subsets(tail([1, [2, [3, null]]]));
    return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
  }
};

{
  if (is_null([1, [2, [3, null]]])) {
    return list(null);
  } else {
    const rest = subsets(tail([1, [2, [3, null]]]));
    return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
  }
};

{
  if (false) {
    return list(null);
  } else {
    const rest = subsets(tail([1, [2, [3, null]]]));
    return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
  }
};

{
  if (false) {
    return list(null);
  } else {
    const rest = subsets(tail([1, [2, [3, null]]]));
    return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
  }
};

{
  const rest = subsets(tail([1, [2, [3, null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = subsets(tail([1, [2, [3, null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = subsets([2, [3, null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = subsets([2, [3, null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    if (is_null([2, [3, null]])) {
      return list(null);
    } else {
      const rest = subsets(tail([2, [3, null]]));
      return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
    }
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    if (is_null([2, [3, null]])) {
      return list(null);
    } else {
      const rest = subsets(tail([2, [3, null]]));
      return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
    }
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    if (false) {
      return list(null);
    } else {
      const rest = subsets(tail([2, [3, null]]));
      return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
    }
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    if (false) {
      return list(null);
    } else {
      const rest = subsets(tail([2, [3, null]]));
      return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
    }
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = subsets(tail([2, [3, null]]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = subsets(tail([2, [3, null]]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = subsets([3, null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = subsets([3, null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      if (is_null([3, null])) {
        return list(null);
      } else {
        const rest = subsets(tail([3, null]));
        return append(rest, map(x => pair(head([3, null]), x), rest));
      }
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      if (is_null([3, null])) {
        return list(null);
      } else {
        const rest = subsets(tail([3, null]));
        return append(rest, map(x => pair(head([3, null]), x), rest));
      }
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      if (false) {
        return list(null);
      } else {
        const rest = subsets(tail([3, null]));
        return append(rest, map(x => pair(head([3, null]), x), rest));
      }
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      if (false) {
        return list(null);
      } else {
        const rest = subsets(tail([3, null]));
        return append(rest, map(x => pair(head([3, null]), x), rest));
      }
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = subsets(tail([3, null]));
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = subsets(tail([3, null]));
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = subsets(null);
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = subsets(null);
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        if (is_null(null)) {
          return list(null);
        } else {
          const rest = subsets(tail(null));
          return append(rest, map(x => pair(head(null), x), rest));
        }
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        if (is_null(null)) {
          return list(null);
        } else {
          const rest = subsets(tail(null));
          return append(rest, map(x => pair(head(null), x), rest));
        }
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        if (true) {
          return list(null);
        } else {
          const rest = subsets(tail(null));
          return append(rest, map(x => pair(head(null), x), rest));
        }
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        if (true) {
          return list(null);
        } else {
          const rest = subsets(tail(null));
          return append(rest, map(x => pair(head(null), x), rest));
        }
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        return list(null);
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = {
        return list(null);
      };
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = list(null);
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = list(null);
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = [null, null];
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      const rest = [null, null];
      return append(rest, map(x => pair(head([3, null]), x), rest));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      return append([null, null], map(x => pair(head([3, null]), x), [null, null]));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = {
      return append([null, null], map(x => pair(head([3, null]), x), [null, null]));
    };
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], map(x => pair(head([3, null]), x), [null, null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], map(x => pair(head([3, null]), x), [null, null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), [null, null], null));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), [null, null], null));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null([null, null]) ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null([null, null]) ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], false ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], false ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(head([null, null])), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(head([3, null]), null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(head([3, null]), null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(3, null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(3, null), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair([3, null], null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair([3, null], null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $map(x => pair(head([3, null]), x), null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null(null) ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null(null) ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], true ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], true ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], reverse([[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], reverse([[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse([[3, null], null], null));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse([[3, null], null], null));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null([[3, null], null]) ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null([[3, null], null]) ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], false ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], false ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, pair(head([[3, null], null]), null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, pair([3, null], null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, pair([3, null], null)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], $reverse(null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null(null) ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], is_null(null) ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], true ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], true ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null])));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], [[3, null], null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = append([null, null], [[3, null], null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append([null, null], [[3, null], null], xs => xs);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append([null, null], [[3, null], null], xs => xs);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = is_null([null, null]) ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = is_null([null, null]) ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = false ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = false ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = $append(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)(pair(head([null, null]), [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)(pair(head([null, null]), [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)(pair(null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)(pair(null, [[3, null], null]));
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)([null, [[3, null], null]]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = (xs => xs)([null, [[3, null], null]]);
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = [null, [[3, null], null]];
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    const rest = [null, [[3, null], null]];
    return append(rest, map(x => pair(head([2, [3, null]]), x), rest));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]]));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = {
    return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]]));
  };
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([null, [[3, null], null]]) ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([null, [[3, null], null]]) ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(head([2, [3, null]]), null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(head([2, [3, null]]), null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(2, null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(2, null), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair([2, null], null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair([2, null], null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[3, null], null]) ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[3, null], null]) ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))([3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))([3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(head([2, [3, null]]), [3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(head([2, [3, null]]), [3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(2, [3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(2, [3, null]), [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair([2, [3, null]], [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair([2, [3, null]], [[2, null], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null(null) ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null(null) ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], true ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], true ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], reverse([[2, [3, null]], [[2, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], reverse([[2, [3, null]], [[2, null], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, [3, null]], [[2, null], null]], null));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, [3, null]], [[2, null], null]], null));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[2, [3, null]], [[2, null], null]]) ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[2, [3, null]], [[2, null], null]]) ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair(head([[2, [3, null]], [[2, null], null]]), null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair([2, [3, null]], null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair([2, [3, null]], null)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], [[2, [3, null]], null]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse([[2, null], null], [[2, [3, null]], null]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[2, null], null]) ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null([[2, null], null]) ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], false ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, pair(head([[2, null], null]), [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, pair([2, null], [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, pair([2, null], [[2, [3, null]], null])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], $reverse(null, [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null(null) ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], is_null(null) ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], true ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], true ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]])));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null([null, [[3, null], null]]) ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null([null, [[3, null], null]]) ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = false ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = false ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null([[3, null], null]) ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null([[3, null], null]) ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = false ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = false ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = $append(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null(null) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = is_null(null) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = true ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = true ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs)));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], null]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[3, null], [[2, null], [[2, [3, null]], null]]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[3, null], [[2, null], [[2, [3, null]], null]]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)(pair(head([null, [[3, null], null]]), [[3, null], [[2, null], [[2, [3, null]], null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)(pair(head([null, [[3, null], null]]), [[3, null], [[2, null], [[2, [3, null]], null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], null]]]));
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = (xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]);
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = [null, [[3, null], [[2, null], [[2, [3, null]], null]]]];
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  const rest = [null, [[3, null], [[2, null], [[2, [3, null]], null]]]];
  return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest));
};

{
  return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));
};

{
  return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));
};

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(head([1, [2, [3, null]]]), null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(head([1, [2, [3, null]]]), null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(1, null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(1, null), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair([1, null], null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair([1, null], null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))([3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))([3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(head([1, [2, [3, null]]]), [3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(head([1, [2, [3, null]]]), [3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(1, [3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(1, [3, null]), [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair([1, [3, null]], [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair([1, [3, null]], [[1, null], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, null], [[2, [3, null]], null]]) ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, null], [[2, [3, null]], null]]) ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))([2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))([2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(head([1, [2, [3, null]]]), [2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(head([1, [2, [3, null]]]), [2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(1, [2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(1, [2, null]), [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair([1, [2, null]], [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair([1, [2, null]], [[1, [3, null]], [[1, null], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, [3, null]], null]) ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, [3, null]], null]) ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))([2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))([2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(head([1, [2, [3, null]]]), [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(head([1, [2, [3, null]]]), [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(1, [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(1, [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair([1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair([1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair([1, [2, [3, null]]], null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair([1, [2, [3, null]]], null)));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair([1, [2, null]], [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair([1, [2, null]], [[1, [2, [3, null]]], null])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [3, null]], [[1, null], null]]) ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [3, null]], [[1, null], null]]) ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair([1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair([1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, null], null]) ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, null], null]) ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair([1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair([1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);

$append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);

$append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);

is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

false ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

false ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

$append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

$append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

$append([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

$append([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));

is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

false ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

false ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

$append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

$append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

$append([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

$append([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));

is_null([[2, null], [[2, [3, null]], null]]) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

is_null([[2, null], [[2, [3, null]], null]]) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

false ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

false ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

$append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

$append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

$append([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

$append([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));

is_null([[2, [3, null]], null]) ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

is_null([[2, [3, null]], null]) ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

false ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

false ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

$append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

$append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

$append(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

$append(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));

is_null(null) ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => ...)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));

is_null(null) ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => ...)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));

true ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => ...)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));

true ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => ...)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));

(zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);

(zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair([2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair([2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]);

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]);

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair([2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair([2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]);

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]);

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]);

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]);

(xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));

(xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));

(xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));

(xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));

(xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]]);

(xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]]);

[null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]];

[null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]];
"
`;
