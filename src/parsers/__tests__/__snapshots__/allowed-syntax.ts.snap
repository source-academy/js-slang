// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Syntaxes are allowed in the chapter they are introduced 0: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      null,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 0: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"function name(a, b) {\\\\n  const sum = a + b;\\\\n  if (sum > 1) {\\\\n    return sum;\\\\n  } else {\\\\n    if (a % 2 === 0) {\\\\n      return -1;\\\\n    } else if (b % 2 === 0) {\\\\n      return 1;\\\\n    } else {\\\\n      return a > b ? 0 : -2;\\\\n    }\\\\n  }\\\\n}\\\\nname(1, 2);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "function_declaration",
          Array [
            Array [
              "name",
              Array [
                "name",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "name",
                  Array [
                    "a",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "name",
                    Array [
                      "b",
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              Array [
                Array [
                  "block",
                  Array [
                    Array [
                      "sequence",
                      Array [
                        Array [
                          Array [
                            "constant_declaration",
                            Array [
                              Array [
                                "name",
                                Array [
                                  "sum",
                                  null,
                                ],
                              ],
                              Array [
                                Array [
                                  "binary_operator_combination",
                                  Array [
                                    "+",
                                    Array [
                                      Array [
                                        "name",
                                        Array [
                                          "a",
                                          null,
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "name",
                                          Array [
                                            "b",
                                            null,
                                          ],
                                        ],
                                        null,
                                      ],
                                    ],
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                          Array [
                            Array [
                              "conditional_statement",
                              Array [
                                Array [
                                  "binary_operator_combination",
                                  Array [
                                    ">",
                                    Array [
                                      Array [
                                        "name",
                                        Array [
                                          "sum",
                                          null,
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "literal",
                                          Array [
                                            1,
                                            null,
                                          ],
                                        ],
                                        null,
                                      ],
                                    ],
                                  ],
                                ],
                                Array [
                                  Array [
                                    "return_statement",
                                    Array [
                                      Array [
                                        "name",
                                        Array [
                                          "sum",
                                          null,
                                        ],
                                      ],
                                      null,
                                    ],
                                  ],
                                  Array [
                                    Array [
                                      "conditional_statement",
                                      Array [
                                        Array [
                                          "binary_operator_combination",
                                          Array [
                                            "===",
                                            Array [
                                              Array [
                                                "binary_operator_combination",
                                                Array [
                                                  "%",
                                                  Array [
                                                    Array [
                                                      "name",
                                                      Array [
                                                        "a",
                                                        null,
                                                      ],
                                                    ],
                                                    Array [
                                                      Array [
                                                        "literal",
                                                        Array [
                                                          2,
                                                          null,
                                                        ],
                                                      ],
                                                      null,
                                                    ],
                                                  ],
                                                ],
                                              ],
                                              Array [
                                                Array [
                                                  "literal",
                                                  Array [
                                                    0,
                                                    null,
                                                  ],
                                                ],
                                                null,
                                              ],
                                            ],
                                          ],
                                        ],
                                        Array [
                                          Array [
                                            "return_statement",
                                            Array [
                                              Array [
                                                "unary_operator_combination",
                                                Array [
                                                  "-unary",
                                                  Array [
                                                    Array [
                                                      "literal",
                                                      Array [
                                                        1,
                                                        null,
                                                      ],
                                                    ],
                                                    null,
                                                  ],
                                                ],
                                              ],
                                              null,
                                            ],
                                          ],
                                          Array [
                                            Array [
                                              "conditional_statement",
                                              Array [
                                                Array [
                                                  "binary_operator_combination",
                                                  Array [
                                                    "===",
                                                    Array [
                                                      Array [
                                                        "binary_operator_combination",
                                                        Array [
                                                          "%",
                                                          Array [
                                                            Array [
                                                              "name",
                                                              Array [
                                                                "b",
                                                                null,
                                                              ],
                                                            ],
                                                            Array [
                                                              Array [
                                                                "literal",
                                                                Array [
                                                                  2,
                                                                  null,
                                                                ],
                                                              ],
                                                              null,
                                                            ],
                                                          ],
                                                        ],
                                                      ],
                                                      Array [
                                                        Array [
                                                          "literal",
                                                          Array [
                                                            0,
                                                            null,
                                                          ],
                                                        ],
                                                        null,
                                                      ],
                                                    ],
                                                  ],
                                                ],
                                                Array [
                                                  Array [
                                                    "return_statement",
                                                    Array [
                                                      Array [
                                                        "literal",
                                                        Array [
                                                          1,
                                                          null,
                                                        ],
                                                      ],
                                                      null,
                                                    ],
                                                  ],
                                                  Array [
                                                    Array [
                                                      "return_statement",
                                                      Array [
                                                        Array [
                                                          "conditional_expression",
                                                          Array [
                                                            Array [
                                                              "binary_operator_combination",
                                                              Array [
                                                                ">",
                                                                Array [
                                                                  Array [
                                                                    "name",
                                                                    Array [
                                                                      "a",
                                                                      null,
                                                                    ],
                                                                  ],
                                                                  Array [
                                                                    Array [
                                                                      "name",
                                                                      Array [
                                                                        "b",
                                                                        null,
                                                                      ],
                                                                    ],
                                                                    null,
                                                                  ],
                                                                ],
                                                              ],
                                                            ],
                                                            Array [
                                                              Array [
                                                                "literal",
                                                                Array [
                                                                  0,
                                                                  null,
                                                                ],
                                                              ],
                                                              Array [
                                                                Array [
                                                                  "unary_operator_combination",
                                                                  Array [
                                                                    "-unary",
                                                                    Array [
                                                                      Array [
                                                                        "literal",
                                                                        Array [
                                                                          2,
                                                                          null,
                                                                        ],
                                                                      ],
                                                                      null,
                                                                    ],
                                                                  ],
                                                                ],
                                                                null,
                                                              ],
                                                            ],
                                                          ],
                                                        ],
                                                        null,
                                                      ],
                                                    ],
                                                    null,
                                                  ],
                                                ],
                                              ],
                                            ],
                                            null,
                                          ],
                                        ],
                                      ],
                                    ],
                                    null,
                                  ],
                                ],
                              ],
                            ],
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
        ],
        Array [
          Array [
            "application",
            Array [
              Array [
                "name",
                Array [
                  "name",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "function name(a, b) {
  const sum = a + b;
  if (sum > 1) {
    return sum;
  } else {
    if (a % 2 === 0) {
      return -1;
    } else if (b % 2 === 0) {
      return 1;
    } else {
      return a > b ? 0 : -2;
    }
  }
}
name(1, 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"(() => true)();\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "application",
    Array [
      Array [
        "lambda_expression",
        Array [
          null,
          Array [
            Array [
              "return_statement",
              Array [
                Array [
                  "literal",
                  Array [
                    true,
                    null,
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        null,
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "(() => true)();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"((x, y) => { return x + y; })(1, 2);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "application",
    Array [
      Array [
        "lambda_expression",
        Array [
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "name",
                Array [
                  "y",
                  null,
                ],
              ],
              null,
            ],
          ],
          Array [
            Array [
              "return_statement",
              Array [
                Array [
                  "binary_operator_combination",
                  Array [
                    "+",
                    Array [
                      Array [
                        "name",
                        Array [
                          "x",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "name",
                          Array [
                            "y",
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          Array [
            "literal",
            Array [
              1,
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                2,
                null,
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "((x, y) => { return x + y; })(1, 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"true;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "literal",
    Array [
      true,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"false;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "literal",
    Array [
      false,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"'a string \\\\\\"\\\\\\" \\\\\\\\'\\\\\\\\'';\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "literal",
    Array [
      "a string \\"\\" ''",
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "'a string \\"\\" \\\\'\\\\'';",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "a string \\"\\" ''",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"31.4 + (-3.14e10) * -1 % 2 / 1.5;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "binary_operator_combination",
    Array [
      "+",
      Array [
        Array [
          "literal",
          Array [
            31.4,
            null,
          ],
        ],
        Array [
          Array [
            "binary_operator_combination",
            Array [
              "/",
              Array [
                Array [
                  "binary_operator_combination",
                  Array [
                    "%",
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          "*",
                          Array [
                            Array [
                              "unary_operator_combination",
                              Array [
                                "-unary",
                                Array [
                                  Array [
                                    "literal",
                                    Array [
                                      31400000000,
                                      null,
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                            ],
                            Array [
                              Array [
                                "unary_operator_combination",
                                Array [
                                  "-unary",
                                  Array [
                                    Array [
                                      "literal",
                                      Array [
                                        1,
                                        null,
                                      ],
                                    ],
                                    null,
                                  ],
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            2,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1.5,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
          ],
          null,
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "31.4 + (-3.14e10) * -1 % 2 / 1.5;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 31.4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"1 === 1 && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "logical_composition",
    Array [
      "||",
      Array [
        Array [
          "logical_composition",
          Array [
            "&&",
            Array [
              Array [
                "logical_composition",
                Array [
                  "&&",
                  Array [
                    Array [
                      "logical_composition",
                      Array [
                        "&&",
                        Array [
                          Array [
                            "logical_composition",
                            Array [
                              "&&",
                              Array [
                                Array [
                                  "binary_operator_combination",
                                  Array [
                                    "===",
                                    Array [
                                      Array [
                                        "literal",
                                        Array [
                                          1,
                                          null,
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "literal",
                                          Array [
                                            1,
                                            null,
                                          ],
                                        ],
                                        null,
                                      ],
                                    ],
                                  ],
                                ],
                                Array [
                                  Array [
                                    "binary_operator_combination",
                                    Array [
                                      "<",
                                      Array [
                                        Array [
                                          "literal",
                                          Array [
                                            1,
                                            null,
                                          ],
                                        ],
                                        Array [
                                          Array [
                                            "literal",
                                            Array [
                                              2,
                                              null,
                                            ],
                                          ],
                                          null,
                                        ],
                                      ],
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                            ],
                          ],
                          Array [
                            Array [
                              "binary_operator_combination",
                              Array [
                                "<=",
                                Array [
                                  Array [
                                    "literal",
                                    Array [
                                      1,
                                      null,
                                    ],
                                  ],
                                  Array [
                                    Array [
                                      "literal",
                                      Array [
                                        2,
                                        null,
                                      ],
                                    ],
                                    null,
                                  ],
                                ],
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          ">=",
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  1,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              Array [
                Array [
                  "binary_operator_combination",
                  Array [
                    ">",
                    Array [
                      Array [
                        "literal",
                        Array [
                          2,
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            1,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                ],
                null,
              ],
            ],
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              false,
              null,
            ],
          ],
          null,
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "1 === 1 && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"true ? 1 : 2;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "conditional_expression",
    Array [
      Array [
        "literal",
        Array [
          true,
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            1,
            null,
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              2,
              null,
            ],
          ],
          null,
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "true ? 1 : 2;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "null;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: null literals are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"null;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "literal",
    Array [
      null,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "null;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, null);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: null literals are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"pair(1, null);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "application",
    Array [
      Array [
        "name",
        Array [
          "pair",
          null,
        ],
      ],
      Array [
        Array [
          Array [
            "literal",
            Array [
              1,
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                null,
                null,
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, null);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "list(1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Name list not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"list(1);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "application",
    Array [
      Array [
        "name",
        Array [
          "list",
          null,
        ],
      ],
      Array [
        Array [
          Array [
            "literal",
            Array [
              1,
              null,
            ],
          ],
          null,
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "list(1);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "export function f(x) {
  return x;
}
f(5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Export named declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"export function f(x) {\\\\n  return x;\\\\n}\\\\nf(5);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "export_named_declaration",
          Array [
            Array [
              "function_declaration",
              Array [
                Array [
                  "name",
                  Array [
                    "f",
                    null,
                  ],
                ],
                Array [
                  Array [
                    Array [
                      "name",
                      Array [
                        "x",
                        null,
                      ],
                    ],
                    null,
                  ],
                  Array [
                    Array [
                      "return_statement",
                      Array [
                        Array [
                          "name",
                          Array [
                            "x",
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
            null,
          ],
        ],
        Array [
          Array [
            "application",
            Array [
              Array [
                "name",
                Array [
                  "f",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "literal",
                    Array [
                      5,
                      null,
                    ],
                  ],
                  null,
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "export function f(x) {
  return x;
}
f(5);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "export const x = 1;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Export named declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"export const x = 1;\\\\nx;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "export_named_declaration",
          Array [
            Array [
              "constant_declaration",
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "export const x = 1;
x;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
while (i < 5) {
  i = i + 1;
}
i;",
  "displayResult": Array [],
  "numErrors": 3,
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 3: Assignment expressions are not allowed
Line 2: While statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nwhile (i < 5) {\\\\n  i = i + 1;\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "while_loop",
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  "<",
                  Array [
                    Array [
                      "name",
                      Array [
                        "i",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          5,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              Array [
                Array [
                  "assignment",
                  Array [
                    Array [
                      "name",
                      Array [
                        "i",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          "+",
                          Array [
                            Array [
                              "name",
                              Array [
                                "i",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  1,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
while (i < 5) {
  i = i + 1;
}
i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (i = 1; i < 5; i = i + 1) {
}
i;",
  "displayResult": Array [],
  "numErrors": 4,
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 2: Assignment expressions are not allowed
Line 2: For statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nfor (i = 1; i < 5; i = i + 1) {\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "for_loop",
            Array [
              Array [
                "assignment",
                Array [
                  Array [
                    "name",
                    Array [
                      "i",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        1,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "binary_operator_combination",
                  Array [
                    "<",
                    Array [
                      Array [
                        "name",
                        Array [
                          "i",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            5,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                ],
                Array [
                  Array [
                    "assignment",
                    Array [
                      Array [
                        "name",
                        Array [
                          "i",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "binary_operator_combination",
                          Array [
                            "+",
                            Array [
                              Array [
                                "name",
                                Array [
                                  "i",
                                  null,
                                ],
                              ],
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    1,
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "sequence",
                      Array [
                        null,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
          ],
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (i = 1; i < 5; i = i + 1) {
}
i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (let j = 0; j < 5; j = j + 1) {
  if (j < 1) {
    continue;
  } else {
    i = i + 1;
    if (j > 2) {
      break;
    }
  }
}
i;",
  "displayResult": Array [],
  "numErrors": 8,
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 4: Continue statements are not allowed
Line 6: Assignment expressions are not allowed
Line 8: Break statements are not allowed
Line 7: Missing \\"else\\" in \\"if-else\\" statement.
Line 2: For statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nfor (let j = 0; j < 5; j = j + 1) {\\\\n  if (j < 1) {\\\\n    continue;\\\\n  } else {\\\\n    i = i + 1;\\\\n    if (j > 2) {\\\\n      break;\\\\n    }\\\\n  }\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "for_loop",
            Array [
              Array [
                "variable_declaration",
                Array [
                  Array [
                    "name",
                    Array [
                      "j",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        0,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "binary_operator_combination",
                  Array [
                    "<",
                    Array [
                      Array [
                        "name",
                        Array [
                          "j",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            5,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                ],
                Array [
                  Array [
                    "assignment",
                    Array [
                      Array [
                        "name",
                        Array [
                          "j",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "binary_operator_combination",
                          Array [
                            "+",
                            Array [
                              Array [
                                "name",
                                Array [
                                  "j",
                                  null,
                                ],
                              ],
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    1,
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "conditional_statement",
                      Array [
                        Array [
                          "binary_operator_combination",
                          Array [
                            "<",
                            Array [
                              Array [
                                "name",
                                Array [
                                  "j",
                                  null,
                                ],
                              ],
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    1,
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                        ],
                        Array [
                          Array [
                            "continue_statement",
                            null,
                          ],
                          Array [
                            Array [
                              "sequence",
                              Array [
                                Array [
                                  Array [
                                    "assignment",
                                    Array [
                                      Array [
                                        "name",
                                        Array [
                                          "i",
                                          null,
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "binary_operator_combination",
                                          Array [
                                            "+",
                                            Array [
                                              Array [
                                                "name",
                                                Array [
                                                  "i",
                                                  null,
                                                ],
                                              ],
                                              Array [
                                                Array [
                                                  "literal",
                                                  Array [
                                                    1,
                                                    null,
                                                  ],
                                                ],
                                                null,
                                              ],
                                            ],
                                          ],
                                        ],
                                        null,
                                      ],
                                    ],
                                  ],
                                  Array [
                                    Array [
                                      "conditional_statement",
                                      Array [
                                        Array [
                                          "binary_operator_combination",
                                          Array [
                                            ">",
                                            Array [
                                              Array [
                                                "name",
                                                Array [
                                                  "j",
                                                  null,
                                                ],
                                              ],
                                              Array [
                                                Array [
                                                  "literal",
                                                  Array [
                                                    2,
                                                    null,
                                                  ],
                                                ],
                                                null,
                                              ],
                                            ],
                                          ],
                                        ],
                                        Array [
                                          Array [
                                            "break_statement",
                                            null,
                                          ],
                                          Array [
                                            Array [
                                              "sequence",
                                              Array [
                                                null,
                                                null,
                                              ],
                                            ],
                                            null,
                                          ],
                                        ],
                                      ],
                                    ],
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
          ],
          Array [
            Array [
              "name",
              Array [
                "i",
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (let j = 0; j < 5; j = j + 1) {
  if (j < 1) {
    continue;
  } else {
    i = i + 1;
    if (j > 2) {
      break;
    }
  }
}
i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Array expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "array_expression",
    Array [
      null,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Array expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[1, 2, 3];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "array_expression",
    Array [
      Array [
        Array [
          "literal",
          Array [
            1,
            null,
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              2,
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                3,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    2,
    3,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3][1];",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Member expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[1, 2, 3][1];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_access",
    Array [
      Array [
        "array_expression",
        Array [
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  2,
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    3,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            1,
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3][1];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1];",
  "displayResult": Array [],
  "numErrors": 3,
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = [1, 2, 3];\\\\nx[1];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "array_expression",
                Array [
                  Array [
                    Array [
                      "literal",
                      Array [
                        1,
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          2,
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            3,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_access",
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1] = 4;",
  "displayResult": Array [],
  "numErrors": 4,
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed
Line 2: Assignment expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = [1, 2, 3];\\\\nx[1] = 4;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "array_expression",
                Array [
                  Array [
                    Array [
                      "literal",
                      Array [
                        1,
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          2,
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            3,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_assignment",
            Array [
              Array [
                "object_access",
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        1,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    4,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1] = 4;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3;
let y = 4;
let z = 5;
x = y = z = 6;
x;",
  "displayResult": Array [],
  "numErrors": 6,
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Mutable variable declaration using keyword 'let' is not allowed.
Line 3: Mutable variable declaration using keyword 'let' is not allowed.
Line 4: Assignment expressions are not allowed
Line 4: Assignment expressions are not allowed
Line 4: Assignment expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = 3;\\\\nlet y = 4;\\\\nlet z = 5;\\\\nx = y = z = 6;\\\\nx;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  3,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "variable_declaration",
            Array [
              Array [
                "name",
                Array [
                  "y",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    4,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "variable_declaration",
              Array [
                Array [
                  "name",
                  Array [
                    "z",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      5,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "assignment",
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "assignment",
                      Array [
                        Array [
                          "name",
                          Array [
                            "y",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "assignment",
                            Array [
                              Array [
                                "name",
                                Array [
                                  "z",
                                  null,
                                ],
                              ],
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    6,
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3;
let y = 4;
let z = 5;
x = y = z = 6;
x;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y, ...z) {
  return x + y;
}
f(...[1, 2]);",
  "displayResult": Array [],
  "numErrors": 3,
  "parsedErrors": "Line 1: Rest elements are not allowed
Line 4: Array expressions are not allowed
Line 4: Spread elements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"function f(x, y, ...z) {\\\\n  return x + y;\\\\n}\\\\nf(...[1, 2]);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "function_declaration",
          Array [
            Array [
              "name",
              Array [
                "f",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "name",
                    Array [
                      "y",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "rest_element",
                      Array [
                        Array [
                          "name",
                          Array [
                            "z",
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "return_statement",
                  Array [
                    Array [
                      "binary_operator_combination",
                      Array [
                        "+",
                        Array [
                          Array [
                            "name",
                            Array [
                              "x",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "name",
                              Array [
                                "y",
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
        ],
        Array [
          Array [
            "application",
            Array [
              Array [
                "name",
                Array [
                  "f",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "spread_element",
                    Array [
                      Array [
                        "array_expression",
                        Array [
                          Array [
                            Array [
                              "literal",
                              Array [
                                1,
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  2,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y, ...z) {
  return x + y;
}
f(...[1, 2]);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({});",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({});\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_expression",
    Array [
      null,
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({});",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Object {},
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2});",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2});\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_expression",
    Array [
      Array [
        Array [
          "key_value_pair",
          Array [
            Array [
              "property",
              Array [
                "a",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "key_value_pair",
            Array [
              Array [
                "property",
                Array [
                  "b",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    2,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2});",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Object {
    "a": 1,
    "b": 2,
  },
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2})['a'];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2})['a'];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_access",
    Array [
      Array [
        "object_expression",
        Array [
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "property",
                  Array [
                    "a",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "key_value_pair",
                Array [
                  Array [
                    "property",
                    Array [
                      "b",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            "a",
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2})['a'];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2}).a;",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2}).a;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_access",
    Array [
      Array [
        "object_expression",
        Array [
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "property",
                  Array [
                    "a",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "key_value_pair",
                Array [
                  Array [
                    "property",
                    Array [
                      "b",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "property",
          Array [
            "a",
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2}).a;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({'a': 1, 'b': 2}).a;",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({'a': 1, 'b': 2}).a;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_access",
    Array [
      Array [
        "object_expression",
        Array [
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "literal",
                  Array [
                    "a",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "key_value_pair",
                Array [
                  Array [
                    "literal",
                    Array [
                      "b",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "property",
          Array [
            "a",
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({'a': 1, 'b': 2}).a;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({1: 1, 2: 2})['1'];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({1: 1, 2: 2})['1'];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "object_access",
    Array [
      Array [
        "object_expression",
        Array [
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "key_value_pair",
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            "1",
            null,
          ],
        ],
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({1: 1, 2: 2})['1'];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "const key = 'a';
({a: 1, b: 2})[key];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"const key = 'a';\\\\n({a: 1, b: 2})[key];\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "constant_declaration",
          Array [
            Array [
              "name",
              Array [
                "key",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  "a",
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_access",
            Array [
              Array [
                "object_expression",
                Array [
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "a",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              1,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "key_value_pair",
                        Array [
                          Array [
                            "property",
                            Array [
                              "b",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              Array [
                Array [
                  "name",
                  Array [
                    "key",
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "const key = 'a';
({a: 1, b: 2})[key];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 32: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x.a = 3;",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 2: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 32: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nx.a = 3;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "object_expression",
                Array [
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "a",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              1,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "key_value_pair",
                        Array [
                          Array [
                            "property",
                            Array [
                              "b",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_assignment",
            Array [
              Array [
                "object_access",
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "property",
                      Array [
                        "a",
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    3,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 32: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x.a = 3;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 33: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x['a'] = 3;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 33: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nx['a'] = 3;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "object_expression",
                Array [
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "a",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              1,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "key_value_pair",
                        Array [
                          Array [
                            "property",
                            Array [
                              "b",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_assignment",
            Array [
              Array [
                "object_access",
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        "a",
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    3,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 33: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x['a'] = 3;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 34: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
const key = 'a';
x[key] = 3;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 34: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nconst key = 'a';\\\\nx[key] = 3;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "object_expression",
                Array [
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "a",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              1,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "key_value_pair",
                        Array [
                          Array [
                            "property",
                            Array [
                              "b",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "constant_declaration",
            Array [
              Array [
                "name",
                Array [
                  "key",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    "a",
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "object_assignment",
              Array [
                Array [
                  "object_access",
                  Array [
                    Array [
                      "name",
                      Array [
                        "x",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "name",
                        Array [
                          "key",
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      3,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 34: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
const key = 'a';
x[key] = 3;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 35: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "import defaultExport from \\"module-name\\";",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Import default specifiers are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 35: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"import defaultExport from \\\\\\"module-name\\\\\\";\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "import_declaration",
    Array [
      Array [
        Array [
          "default",
          null,
        ],
        null,
      ],
      Array [
        "module-name",
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 35: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "import defaultExport from \\"module-name\\";",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 36: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "export default function f(x) {
  return x;
}
f(5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Export default declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 36: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"export default function f(x) {\\\\n  return x;\\\\n}\\\\nf(5);\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "export_default_declaration",
          Array [
            Array [
              "function_declaration",
              Array [
                Array [
                  "name",
                  Array [
                    "f",
                    null,
                  ],
                ],
                Array [
                  Array [
                    Array [
                      "name",
                      Array [
                        "x",
                        null,
                      ],
                    ],
                    null,
                  ],
                  Array [
                    Array [
                      "return_statement",
                      Array [
                        Array [
                          "name",
                          Array [
                            "x",
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
            null,
          ],
        ],
        Array [
          Array [
            "application",
            Array [
              Array [
                "name",
                Array [
                  "f",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "literal",
                    Array [
                      5,
                      null,
                    ],
                  ],
                  null,
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 36: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "export default function f(x) {
  return x;
}
f(5);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 37: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = 1;
export default x;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Export default declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 37: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"const x = 1;\\\\nexport default x;\\\\nx;\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    "sequence",
    Array [
      Array [
        Array [
          "constant_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "export_default_declaration",
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              null,
            ],
          ],
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      null,
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 37: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = 1;
export default x;
x;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
