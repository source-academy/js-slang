import es from 'estree'

import { full, simple } from '../../utils/walkers'

export const parseCodeError = new Error('Unable to parse code')

/**
 * Strips out location information from an AST.
 *
 * The local imports test suites only care about the structure of the
 * transformed AST. The line & column numbers, as well as the character
 * offsets of each node in the ASTs derived from parsing the pre-transform
 * code & the equivalent post-transform code will not be the same.
 * Note that it is insufficient to pass in 'locations: false' into the acorn
 * parser as there will still be 'start' & 'end' properties attached to nodes
 * which represent character offsets.
 *
 * WARNING: Since this function is only used for test suites, it mutates
 * the original AST for convenience instead of creating a copy.
 *
 * @param node The AST which should be stripped of location information.
 */
export const stripLocationInfo = (node: es.Node): es.Node => {
  // The 'start' & 'end' properties are not typed in ESTree, but they exist
  // on some nodes in the AST generated by acorn parser.
  const deleteLocationProperties = (node: es.Node & { start?: number; end?: number }): void => {
    // Line & column numbers
    delete node.loc
    // Character offsets
    delete node.start
    delete node.end
  }
  full(node, (node: es.Node): void => {
    deleteLocationProperties(node)
  })
  // Unfortunately, acorn-walk does not actually visit all nodes in the AST.
  // Namely, Identifier nodes are not visited except when they occur as expressions.
  // According to a maintainer of acorn-walk, users of the library are expected to
  // read Identifier nodes from their parent node if there is a need to do so,
  // although it was not explained why this is the case.
  // See https://github.com/acornjs/acorn/issues/1180 for the discussion.
  //
  // As a workaround, we walk through the AST again specifically to strip the
  // location information out of Identifier nodes.
  // NOTE: This second walk does not exhaustively visit all Identifier nodes.
  //       Please add custom walkers as needed.
  simple(node, {
    ImportSpecifier(node: es.ImportSpecifier): void {
      deleteLocationProperties(node.local)
      deleteLocationProperties(node.imported)
    },
    ImportDefaultSpecifier(node: es.ImportDefaultSpecifier): void {
      deleteLocationProperties(node.local)
    },
    ExportNamedDeclaration(node: es.ExportNamedDeclaration): void {
      node.specifiers.forEach((node: es.ExportSpecifier) => {
        deleteLocationProperties(node)
        deleteLocationProperties(node.exported)
      })
    }
  })
  return node
}
