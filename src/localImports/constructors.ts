import es from 'estree'

// Note that typecasting is done on some of the constructed AST nodes because
// the ESTree AST node types are not fully aligned with the actual AST that
// is generated by the Acorn parser. However, the extra/missing properties
// are unused in the Source interpreter/transpiler. As such, we can safely
// ignore their existence to make the typing cleaner. The alternative would
// be to define our own AST node types based off the ESTree AST node types
// and use our custom AST node types everywhere.

export const createLiteral = (
  value: string | number | boolean | null,
  raw?: string
): es.Literal => {
  return {
    type: 'Literal',
    value,
    raw: raw ?? typeof value === 'string' ? `"${value}"` : String(value)
  }
}

export const createPairCallExpression = (
  head: es.Expression | es.SpreadElement,
  tail: es.Expression | es.SpreadElement
): es.SimpleCallExpression => {
  return {
    type: 'CallExpression',
    callee: {
      type: 'Identifier',
      name: 'pair'
    },
    arguments: [head, tail]
    // The 'optional' property is typed in ESTree, but does not exist
    // on SimpleCallExpression nodes in the AST generated by acorn parser.
  } as es.SimpleCallExpression
}

export const createListCallExpression = (
  elements: Array<es.Expression | es.SpreadElement>
): es.SimpleCallExpression => {
  return {
    type: 'CallExpression',
    callee: {
      type: 'Identifier',
      name: 'list'
    },
    arguments: elements
    // The 'optional' property is typed in ESTree, but does not exist
    // on SimpleCallExpression nodes in the AST generated by acorn parser.
  } as es.SimpleCallExpression
}

export const createReturnStatement = (
  argument: es.Expression | null | undefined
): es.ReturnStatement => {
  return {
    type: 'ReturnStatement',
    argument
  }
}

export const createFunctionDeclaration = (
  name: string,
  params: es.Pattern[],
  body: es.Statement[]
): es.FunctionDeclaration => {
  return {
    type: 'FunctionDeclaration',
    expression: false,
    generator: false,
    id: {
      type: 'Identifier',
      name
    },
    params,
    body: {
      type: 'BlockStatement',
      body
    }
    // The 'expression' property is not typed in ESTree, but it exists
    // on FunctionDeclaration nodes in the AST generated by acorn parser.
  } as es.FunctionDeclaration
}
