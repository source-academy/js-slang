// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`String representation of arrays are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const xs = [1, 'true', true, () => x];
stringify(xs);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[1, \\"true\\", true, () => x]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const xs = [1, 'true', true, wrap(() => ({
      isTail: false,
      value: x
    }), \\"() => x\\")];
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 2, 0, xs);\\");
    native.globals.set(\\"xs\\", {
      kind: \\"const\\",
      value: xs
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of arrow functions are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => z;
stringify(f);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "(x, y) => z",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const f = wrap((x, y) => ({
      isTail: false,
      value: z
    }), \\"(x, y) => z\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 2, 0, f);\\");
    native.globals.set(\\"f\\", {
      kind: \\"const\\",
      value: f
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of big objects are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = { a: 1, b: true, c: () => x, d: { e: 5, f: 6 }, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0};
stringify(o);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "{ \\"a\\": 1,
  \\"b\\": true,
  \\"c\\": () => x,
  \\"d\\": {\\"e\\": 5, \\"f\\": 6},
  \\"g\\": 0,
  \\"h\\": 0,
  \\"i\\": 0,
  \\"j\\": 0,
  \\"k\\": 0,
  \\"l\\": 0,
  \\"m\\": 0,
  \\"n\\": 0 }",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of booleans are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify('true');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "\\"true\\"",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, 'true');\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of builtins are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(pair);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "function pair(left, right) {
	[implementation hidden]
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of empty arrays are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const xs = [];
stringify(xs);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const xs = [];
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 2, 0, xs);\\");
    native.globals.set(\\"xs\\", {
      kind: \\"const\\",
      value: xs
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of functions are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return z;
}
stringify(f);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "function f(x, y) {
  return z;
}",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const f = wrap((x, y) => {
      return {
        isTail: false,
        value: z
      };
    }, \\"function f(x, y) {\\\\n  return z;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 4, 0, f);\\");
    native.globals.set(\\"f\\", {
      kind: \\"const\\",
      value: f
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of huge arrays are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const arr = [];
for (let i = 0; i < 100; i = i + 1) {
  arr[i] = i;
}
stringify(arr);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ 0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99 ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const arr = [];
    const startTime = runtime();
    for (let i = 0; boolOrErr(binaryOp(\\"<\\", i, 100, 2, 16), 2, 0); i = binaryOp(\\"+\\", i, 1, 2, 29)) {
      throwIfTimeout(startTime, runtime(), 2, 0);
      arr[i] = i;
    }
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 5, 0, arr);\\");
    native.globals.set(\\"arr\\", {
      kind: \\"const\\",
      value: arr
    });
    native.globals.set(\\"startTime\\", {
      kind: \\"const\\",
      value: startTime
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of huge lists are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(enum_list(1, 1000));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ 1,
[ 2,
[ 3,
[ 4,
[ 5,
[ 6,
[ 7,
[ 8,
[ 9,
[ 10,
[ 11,
[ 12,
[ 13,
[ 14,
[ 15,
[ 16,
[ 17,
[ 18,
[ 19,
[ 20,
[ 21,
[ 22,
[ 23,
[ 24,
[ 25,
[ 26,
[ 27,
[ 28,
[ 29,
[ 30,
[ 31,
[ 32,
[ 33,
[ 34,
[ 35,
[ 36,
[ 37,
[ 38,
[ 39,
[ 40,
[ 41,
[ 42,
[ 43,
[ 44,
[ 45,
[ 46,
[ 47,
[ 48,
[ 49,
[ 50,
[ 51,
[ 52,
[ 53,
[ 54,
[ 55,
[ 56,
[ 57,
[ 58,
[ 59,
[ 60,
[ 61,
[ 62,
[ 63,
[ 64,
[ 65,
[ 66,
[ 67,
[ 68,
[ 69,
[ 70,
[ 71,
[ 72,
[ 73,
[ 74,
[ 75,
[ 76,
[ 77,
[ 78,
[ 79,
[ 80,
[ 81,
[ 82,
[ 83,
[ 84,
[ 85,
[ 86,
[ 87,
[ 88,
[ 89,
[ 90,
[91, [92, [93, [94, [95, [96, [97, [98, [99, [100, [101, ...<truncated>]]]]]]]]]]] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 10, 1, 1000));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of lists are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(enum_list(1, 10));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, null]]]]]]]]]]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 10, 1, 10));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of multidimensional arrays are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const xs = [1, 'true', [true, () => x, [[]]]];
stringify(xs);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[1, \\"true\\", [true, () => x, [[]]]]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const xs = [1, 'true', [true, wrap(() => ({
      isTail: false,
      value: x
    }), \\"() => x\\"), [[]]]];
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 2, 0, xs);\\");
    native.globals.set(\\"xs\\", {
      kind: \\"const\\",
      value: xs
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of nested objects are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = { a: 1, b: true, c: () => x, d: { e: 5, f: 6 } };
stringify(o);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "{\\"a\\": 1, \\"b\\": true, \\"c\\": () => x, \\"d\\": {\\"e\\": 5, \\"f\\": 6}}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of nested objects are nice: expectResult 2`] = `
Object {
  "alertResult": Array [],
  "code": "let o = {};
o.o = o;
stringify(o);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "{\\"o\\": ...<circular>}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of null is nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(null);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "null",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, null);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of numbers are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(0);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "0",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, 0);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of objects are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = { a: 1, b: true, c: () => x };
stringify(o);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "{\\"a\\": 1, \\"b\\": true, \\"c\\": () => x}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of strings are nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify('a string');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "\\"a string\\"",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, 'a string');\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation of undefined is nice: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(undefined);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "undefined",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, undefined);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with 1 space indent: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'), 1);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[{\\"tag\\": \\"function_definition\\",
  \\"parameters\\":
   [{\\"tag\\": \\"name\\",
     \\"name\\": \\"x\\",
     \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}}},
   null],
  \\"body\\":
   {\\"tag\\": \\"return_statement\\",
    \\"expression\\":
     {\\"tag\\": \\"name\\",
      \\"name\\": \\"x\\",
      \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}},
    \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}},
  \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}}},
null]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with custom indent: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'), ' ... ');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[... {... \\"tag\\": \\"function_definition\\",
 ...  ... \\"parameters\\":
 ...  ...  ... [... {... \\"tag\\": \\"name\\",
 ...  ...  ...  ...  ... \\"name\\": \\"x\\",
 ...  ...  ...  ...  ... \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}} ...},
 ...  ...  ... null ...],
 ...  ... \\"body\\":
 ...  ...  ... {... \\"tag\\": \\"return_statement\\",
 ...  ...  ...  ... \\"expression\\":
 ...  ...  ...  ...  ... {... \\"tag\\": \\"name\\",
 ...  ...  ...  ...  ...  ... \\"name\\": \\"x\\",
 ...  ...  ...  ...  ...  ... \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}} ...},
 ...  ...  ...  ... \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}} ...},
 ...  ... \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}} ...},
null ...]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, 'x=>x;'), ' ... ');\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with default (2 space) indent: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ { \\"tag\\": \\"function_definition\\",
    \\"parameters\\":
      [ { \\"tag\\": \\"name\\",
          \\"name\\": \\"x\\",
          \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}} },
      null ],
    \\"body\\":
      { \\"tag\\": \\"return_statement\\",
        \\"expression\\":
          { \\"tag\\": \\"name\\",
            \\"name\\": \\"x\\",
            \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}} },
        \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}} },
    \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}} },
null ]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with long custom indent gets trimmed to 10 characters: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'), '.................................');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[.........{.........\\"tag\\": \\"function_definition\\",
....................\\"parameters\\":
..............................[.........{.........\\"tag\\": \\"name\\",
..................................................\\"name\\": \\"x\\",
..................................................\\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}}.........},
..............................null.........],
....................\\"body\\":
..............................{.........\\"tag\\": \\"return_statement\\",
........................................\\"expression\\":
..................................................{.........\\"tag\\": \\"name\\",
............................................................\\"name\\": \\"x\\",
............................................................\\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}.........},
........................................\\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}.........},
....................\\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}}.........},
null.........]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, 'x=>x;'), '.................................');\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with more than 10 space indent should trim to 10 space indent: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'), 100);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[         {         \\"tag\\": \\"function_definition\\",
                    \\"parameters\\":
                              [         {         \\"tag\\": \\"name\\",
                                                  \\"name\\": \\"x\\",
                                                  \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}}         },
                              null         ],
                    \\"body\\":
                              {         \\"tag\\": \\"return_statement\\",
                                        \\"expression\\":
                                                  {         \\"tag\\": \\"name\\",
                                                            \\"name\\": \\"x\\",
                                                            \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}         },
                                        \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}         },
                    \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}}         },
null         ]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`String representation with no indent: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse('x=>x;'), 0);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[{\\"tag\\": \\"function_definition\\", \\"parameters\\": [{\\"tag\\": \\"name\\", \\"name\\": \\"x\\", \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 1}}}, null], \\"body\\": {\\"tag\\": \\"return_statement\\", \\"expression\\": {\\"tag\\": \\"name\\", \\"name\\": \\"x\\", \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}}, \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 3}, \\"end\\": {\\"line\\": 1, \\"column\\": 4}}}, \\"loc\\": {\\"start\\": {\\"line\\": 1, \\"column\\": 0}, \\"end\\": {\\"line\\": 1, \\"column\\": 5}}}, null]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
