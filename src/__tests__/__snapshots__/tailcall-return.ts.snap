// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Simple tail call returns work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return false || f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in conditional expressions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : f(x-1, y+1);
}
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in nested mix of conditional expressions boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : false || x > 0 ? f(x-1, y+1) : 'unreachable';
}
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow block functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
};
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion with arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : g(x-1, y+1);
const g = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return g(x-1, y+1);
  }
}
function g(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
