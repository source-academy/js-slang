// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Syntaxes are allowed in the chapter they are introduced 0: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 0: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "transpiled": "",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"function name(a, b) {\\\\n  const sum = a + b;\\\\n  if (sum > 1) {\\\\n    return sum;\\\\n  } else {\\\\n    if (a % 2 === 0) {\\\\n      return -1;\\\\n    } else if (b % 2 === 0) {\\\\n      return 1;\\\\n    } else {\\\\n      return a > b ? 0 : -2;\\\\n    }\\\\n  }\\\\n}\\\\nname(1, 2);\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 14,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "name": "name",
        "tag": "name",
      },
      "tag": "constant_declaration",
      "value": Object {
        "body": Array [
          Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "name": Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 2,
                },
                "start": Position {
                  "column": 8,
                  "line": 2,
                },
              },
              "name": "sum",
              "tag": "name",
            },
            "tag": "constant_declaration",
            "value": Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 19,
                  "line": 2,
                },
                "start": Position {
                  "column": 14,
                  "line": 2,
                },
              },
              "operands": Array [
                Object {
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 15,
                      "line": 2,
                    },
                    "start": Position {
                      "column": 14,
                      "line": 2,
                    },
                  },
                  "name": "a",
                  "tag": "name",
                },
                Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 19,
                        "line": 2,
                      },
                      "start": Position {
                        "column": 18,
                        "line": 2,
                      },
                    },
                    "name": "b",
                    "tag": "name",
                  },
                  null,
                ],
              ],
              "operator": Object {
                "loc": Object {
                  "end": Object {
                    "column": 18,
                    "line": 2,
                  },
                  "start": Object {
                    "column": 17,
                    "line": 2,
                  },
                },
                "name": "+",
                "tag": "name",
              },
              "tag": "application",
            },
          },
          Array [
            Object {
              "alternative": Object {
                "body": Array [
                  Object {
                    "alternative": Object {
                      "alternative": Object {
                        "body": Array [
                          Object {
                            "expression": Object {
                              "alternative": Object {
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 27,
                                    "line": 11,
                                  },
                                  "start": Position {
                                    "column": 25,
                                    "line": 11,
                                  },
                                },
                                "operands": Array [
                                  2,
                                  null,
                                ],
                                "operator": Object {
                                  "loc": Object {
                                    "end": Object {
                                      "column": 26,
                                      "line": 11,
                                    },
                                    "start": Position {
                                      "column": 25,
                                      "line": 11,
                                    },
                                  },
                                  "name": "-",
                                  "tag": "name",
                                },
                                "tag": "application",
                              },
                              "consequent": 0,
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 27,
                                  "line": 11,
                                },
                                "start": Position {
                                  "column": 13,
                                  "line": 11,
                                },
                              },
                              "predicate": Object {
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 18,
                                    "line": 11,
                                  },
                                  "start": Position {
                                    "column": 13,
                                    "line": 11,
                                  },
                                },
                                "operands": Array [
                                  Object {
                                    "loc": SourceLocation {
                                      "end": Position {
                                        "column": 14,
                                        "line": 11,
                                      },
                                      "start": Position {
                                        "column": 13,
                                        "line": 11,
                                      },
                                    },
                                    "name": "a",
                                    "tag": "name",
                                  },
                                  Array [
                                    Object {
                                      "loc": SourceLocation {
                                        "end": Position {
                                          "column": 18,
                                          "line": 11,
                                        },
                                        "start": Position {
                                          "column": 17,
                                          "line": 11,
                                        },
                                      },
                                      "name": "b",
                                      "tag": "name",
                                    },
                                    null,
                                  ],
                                ],
                                "operator": Object {
                                  "loc": Object {
                                    "end": Object {
                                      "column": 17,
                                      "line": 11,
                                    },
                                    "start": Object {
                                      "column": 16,
                                      "line": 11,
                                    },
                                  },
                                  "name": ">",
                                  "tag": "name",
                                },
                                "tag": "application",
                              },
                              "tag": "conditional_expression",
                            },
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 28,
                                "line": 11,
                              },
                              "start": Position {
                                "column": 6,
                                "line": 11,
                              },
                            },
                            "tag": "return_statement",
                          },
                          null,
                        ],
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 5,
                            "line": 12,
                          },
                          "start": Position {
                            "column": 11,
                            "line": 10,
                          },
                        },
                        "tag": "block",
                      },
                      "consequent": Object {
                        "body": Array [
                          Object {
                            "expression": 1,
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 15,
                                "line": 9,
                              },
                              "start": Position {
                                "column": 6,
                                "line": 9,
                              },
                            },
                            "tag": "return_statement",
                          },
                          null,
                        ],
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 5,
                            "line": 10,
                          },
                          "start": Position {
                            "column": 28,
                            "line": 8,
                          },
                        },
                        "tag": "block",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 12,
                        },
                        "start": Position {
                          "column": 11,
                          "line": 8,
                        },
                      },
                      "predicate": Object {
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 26,
                            "line": 8,
                          },
                          "start": Position {
                            "column": 15,
                            "line": 8,
                          },
                        },
                        "operands": Array [
                          Object {
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 20,
                                "line": 8,
                              },
                              "start": Position {
                                "column": 15,
                                "line": 8,
                              },
                            },
                            "operands": Array [
                              Object {
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 16,
                                    "line": 8,
                                  },
                                  "start": Position {
                                    "column": 15,
                                    "line": 8,
                                  },
                                },
                                "name": "b",
                                "tag": "name",
                              },
                              Array [
                                2,
                                null,
                              ],
                            ],
                            "operator": Object {
                              "loc": Object {
                                "end": Object {
                                  "column": 19,
                                  "line": 8,
                                },
                                "start": Object {
                                  "column": 18,
                                  "line": 8,
                                },
                              },
                              "name": "%",
                              "tag": "name",
                            },
                            "tag": "application",
                          },
                          Array [
                            0,
                            null,
                          ],
                        ],
                        "operator": Object {
                          "loc": Object {
                            "end": Object {
                              "column": 25,
                              "line": 8,
                            },
                            "start": Object {
                              "column": 24,
                              "line": 8,
                            },
                          },
                          "name": "===",
                          "tag": "name",
                        },
                        "tag": "application",
                      },
                      "tag": "conditional_statement",
                    },
                    "consequent": Object {
                      "body": Array [
                        Object {
                          "expression": Object {
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 15,
                                "line": 7,
                              },
                              "start": Position {
                                "column": 13,
                                "line": 7,
                              },
                            },
                            "operands": Array [
                              1,
                              null,
                            ],
                            "operator": Object {
                              "loc": Object {
                                "end": Object {
                                  "column": 14,
                                  "line": 7,
                                },
                                "start": Position {
                                  "column": 13,
                                  "line": 7,
                                },
                              },
                              "name": "-",
                              "tag": "name",
                            },
                            "tag": "application",
                          },
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 16,
                              "line": 7,
                            },
                            "start": Position {
                              "column": 6,
                              "line": 7,
                            },
                          },
                          "tag": "return_statement",
                        },
                        null,
                      ],
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 8,
                        },
                        "start": Position {
                          "column": 21,
                          "line": 6,
                        },
                      },
                      "tag": "block",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 5,
                        "line": 12,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 6,
                      },
                    },
                    "predicate": Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 19,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 6,
                        },
                      },
                      "operands": Array [
                        Object {
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 13,
                              "line": 6,
                            },
                            "start": Position {
                              "column": 8,
                              "line": 6,
                            },
                          },
                          "operands": Array [
                            Object {
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 9,
                                  "line": 6,
                                },
                                "start": Position {
                                  "column": 8,
                                  "line": 6,
                                },
                              },
                              "name": "a",
                              "tag": "name",
                            },
                            Array [
                              2,
                              null,
                            ],
                          ],
                          "operator": Object {
                            "loc": Object {
                              "end": Object {
                                "column": 12,
                                "line": 6,
                              },
                              "start": Object {
                                "column": 11,
                                "line": 6,
                              },
                            },
                            "name": "%",
                            "tag": "name",
                          },
                          "tag": "application",
                        },
                        Array [
                          0,
                          null,
                        ],
                      ],
                      "operator": Object {
                        "loc": Object {
                          "end": Object {
                            "column": 18,
                            "line": 6,
                          },
                          "start": Object {
                            "column": 17,
                            "line": 6,
                          },
                        },
                        "name": "===",
                        "tag": "name",
                      },
                      "tag": "application",
                    },
                    "tag": "conditional_statement",
                  },
                  null,
                ],
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 13,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 5,
                  },
                },
                "tag": "block",
              },
              "consequent": Object {
                "body": Array [
                  Object {
                    "expression": Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 14,
                          "line": 4,
                        },
                        "start": Position {
                          "column": 11,
                          "line": 4,
                        },
                      },
                      "name": "sum",
                      "tag": "name",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 4,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 4,
                      },
                    },
                    "tag": "return_statement",
                  },
                  null,
                ],
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 5,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 3,
                  },
                },
                "tag": "block",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 13,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "predicate": Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "operands": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 9,
                        "line": 3,
                      },
                      "start": Position {
                        "column": 6,
                        "line": 3,
                      },
                    },
                    "name": "sum",
                    "tag": "name",
                  },
                  Array [
                    1,
                    null,
                  ],
                ],
                "operator": Object {
                  "loc": Object {
                    "end": Object {
                      "column": 12,
                      "line": 3,
                    },
                    "start": Object {
                      "column": 11,
                      "line": 3,
                    },
                  },
                  "name": ">",
                  "tag": "name",
                },
                "tag": "application",
              },
              "tag": "conditional_statement",
            },
            null,
          ],
        ],
        "parameters": Array [
          Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 14,
                "line": 1,
              },
            },
            "name": "a",
            "tag": "name",
          },
          Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 18,
                  "line": 1,
                },
                "start": Position {
                  "column": 17,
                  "line": 1,
                },
              },
              "name": "b",
              "tag": "name",
            },
            null,
          ],
        ],
        "tag": "function_definition",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 11,
            "line": 15,
          },
          "start": Position {
            "column": 0,
            "line": 15,
          },
        },
        "operands": Array [
          1,
          Array [
            2,
            null,
          ],
        ],
        "operator": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 15,
            },
            "start": Position {
              "column": 0,
              "line": 15,
            },
          },
          "name": "name",
          "tag": "name",
        },
        "tag": "application",
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"function name(a, b) {\\\\\\\\n  const sum = a + b;\\\\\\\\n  if (sum > 1) {\\\\\\\\n    return sum;\\\\\\\\n  } else {\\\\\\\\n    if (a % 2 === 0) {\\\\\\\\n      return -1;\\\\\\\\n    } else if (b % 2 === 0) {\\\\\\\\n      return 1;\\\\\\\\n    } else {\\\\\\\\n      return a > b ? 0 : -2;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\nname(1, 2);\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "function name(a, b) {
  const sum = a + b;
  if (sum > 1) {
    return sum;
  } else {
    if (a % 2 === 0) {
      return -1;
    } else if (b % 2 === 0) {
      return 1;
    } else {
      return a > b ? 0 : -2;
    }
  }
}
name(1, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const name = wrap((a, b) => {
      const sum = binaryOp(\\"+\\", a, b, 2, 14);
      if (boolOrErr(binaryOp(\\">\\", sum, 1, 3, 6), 3, 2)) {
        return {
          isTail: false,
          value: sum
        };
      } else {
        if (boolOrErr(binaryOp(\\"===\\", binaryOp(\\"%\\", a, 2, 6, 8), 0, 6, 8), 6, 4)) {
          return {
            isTail: false,
            value: unaryOp(\\"-\\", 1, 7, 13)
          };
        } else if (boolOrErr(binaryOp(\\"===\\", binaryOp(\\"%\\", b, 2, 8, 15), 0, 8, 15), 8, 11)) {
          return {
            isTail: false,
            value: 1
          };
        } else {
          return boolOrErr(binaryOp(\\">\\", a, b, 11, 13), 11, 13) ? {
            isTail: false,
            value: 0
          } : {
            isTail: false,
            value: unaryOp(\\"-\\", 2, 11, 25)
          };
        }
      }
    }, \\"function name(a, b) {\\\\n  const sum = a + b;\\\\n  if (sum > 1) {\\\\n    return sum;\\\\n  } else {\\\\n    if (a % 2 === 0) {\\\\n      return -1;\\\\n    } else if (b % 2 === 0) {\\\\n      return 1;\\\\n    } else {\\\\n      return a > b ? 0 : -2;\\\\n    }\\\\n  }\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(name, 15, 0, 1, 2);\\");
    native.globals.set(\\"name\\", {
      kind: \\"const\\",
      value: name
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"(() => true)();\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": null,
      "operator": Object {
        "body": Object {
          "expression": true,
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 7,
              "line": 1,
            },
          },
          "tag": "return_statement",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 11,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "parameters": null,
        "tag": "function_definition",
      },
      "tag": "application",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"(() => true)();\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "(() => true)();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(wrap(() => ({   isTail: false,   value: true }), \\\\\\"() => true\\\\\\"), 1, 0);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"((x, y) => { return x + y; })(1, 2);\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 36,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": Array [
        1,
        Array [
          2,
          null,
        ],
      ],
      "operator": Object {
        "body": Object {
          "expression": Object {
            "body": Array [
              Object {
                "expression": Object {
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 25,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 20,
                      "line": 1,
                    },
                  },
                  "operands": Array [
                    Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 21,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 20,
                          "line": 1,
                        },
                      },
                      "name": "x",
                      "tag": "name",
                    },
                    Array [
                      Object {
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 25,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 24,
                            "line": 1,
                          },
                        },
                        "name": "y",
                        "tag": "name",
                      },
                      null,
                    ],
                  ],
                  "operator": Object {
                    "loc": Object {
                      "end": Object {
                        "column": 24,
                        "line": 1,
                      },
                      "start": Object {
                        "column": 23,
                        "line": 1,
                      },
                    },
                    "name": "+",
                    "tag": "name",
                  },
                  "tag": "application",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 26,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 1,
                  },
                },
                "tag": "return_statement",
              },
              null,
            ],
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 1,
              },
              "start": Position {
                "column": 11,
                "line": 1,
              },
            },
            "tag": "block",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 11,
              "line": 1,
            },
          },
          "tag": "return_statement",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 28,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "parameters": Array [
          Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "name": "x",
            "tag": "name",
          },
          Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "name": "y",
              "tag": "name",
            },
            null,
          ],
        ],
        "tag": "function_definition",
      },
      "tag": "application",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"((x, y) => { return x + y; })(1, 2);\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "((x, y) => { return x + y; })(1, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(wrap((x, y) => {   return {     isTail: false,     value: binaryOp(\\\\\\"+\\\\\\", x, y, 1, 20)   }; }, \\\\\\"(x, y) => {\\\\\\\\n  return x + y;\\\\\\\\n}\\\\\\"), 1, 0, 1, 2);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"true;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    true,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"true;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"true;\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"false;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    false,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"false;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"false;\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"'a string \\\\\\"\\\\\\" \\\\\\\\'\\\\\\\\'';\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    "a string \\"\\" ''",
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\'';\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "'a string \\"\\" \\\\'\\\\'';",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "a string \\"\\" ''",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"'a string \\\\\\"\\\\\\" \\\\\\\\'\\\\\\\\'';\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"31.4 + (-3.14e10) * -1 % 2 / 1.5;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 33,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": Array [
        31.4,
        Array [
          Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "operands": Array [
              Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 26,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 7,
                    "line": 1,
                  },
                },
                "operands": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 22,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 7,
                        "line": 1,
                      },
                    },
                    "operands": Array [
                      Object {
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 16,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 1,
                          },
                        },
                        "operands": Array [
                          31400000000,
                          null,
                        ],
                        "operator": Object {
                          "loc": Object {
                            "end": Object {
                              "column": 9,
                              "line": 1,
                            },
                            "start": Position {
                              "column": 8,
                              "line": 1,
                            },
                          },
                          "name": "-",
                          "tag": "name",
                        },
                        "tag": "application",
                      },
                      Array [
                        Object {
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 22,
                              "line": 1,
                            },
                            "start": Position {
                              "column": 20,
                              "line": 1,
                            },
                          },
                          "operands": Array [
                            1,
                            null,
                          ],
                          "operator": Object {
                            "loc": Object {
                              "end": Object {
                                "column": 21,
                                "line": 1,
                              },
                              "start": Position {
                                "column": 20,
                                "line": 1,
                              },
                            },
                            "name": "-",
                            "tag": "name",
                          },
                          "tag": "application",
                        },
                        null,
                      ],
                    ],
                    "operator": Object {
                      "loc": Object {
                        "end": Object {
                          "column": 20,
                          "line": 1,
                        },
                        "start": Object {
                          "column": 19,
                          "line": 1,
                        },
                      },
                      "name": "*",
                      "tag": "name",
                    },
                    "tag": "application",
                  },
                  Array [
                    2,
                    null,
                  ],
                ],
                "operator": Object {
                  "loc": Object {
                    "end": Object {
                      "column": 25,
                      "line": 1,
                    },
                    "start": Object {
                      "column": 24,
                      "line": 1,
                    },
                  },
                  "name": "%",
                  "tag": "name",
                },
                "tag": "application",
              },
              Array [
                1.5,
                null,
              ],
            ],
            "operator": Object {
              "loc": Object {
                "end": Object {
                  "column": 29,
                  "line": 1,
                },
                "start": Object {
                  "column": 28,
                  "line": 1,
                },
              },
              "name": "/",
              "tag": "name",
            },
            "tag": "application",
          },
          null,
        ],
      ],
      "operator": Object {
        "loc": Object {
          "end": Object {
            "column": 7,
            "line": 1,
          },
          "start": Object {
            "column": 6,
            "line": 1,
          },
        },
        "name": "+",
        "tag": "name",
      },
      "tag": "application",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"31.4 + (-3.14e10) * -1 % 2 / 1.5;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "31.4 + (-3.14e10) * -1 % 2 / 1.5;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 31.4,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"binaryOp(\\\\\\"+\\\\\\", 31.4, binaryOp(\\\\\\"/\\\\\\", binaryOp(\\\\\\"%\\\\\\", binaryOp(\\\\\\"*\\\\\\", unaryOp(\\\\\\"-\\\\\\", 3.14e10, 1, 8), unaryOp(\\\\\\"-\\\\\\", 1, 1, 20), 1, 7), 2, 1, 7), 1.5, 1, 7), 1, 0);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"!false === (1 !== 2) && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 68,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": Array [
        Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 58,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "operands": Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 49,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "operands": Array [
                Object {
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 39,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "operands": Array [
                    Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 29,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 0,
                          "line": 1,
                        },
                      },
                      "operands": Array [
                        Object {
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 20,
                              "line": 1,
                            },
                            "start": Position {
                              "column": 0,
                              "line": 1,
                            },
                          },
                          "operands": Array [
                            Object {
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 6,
                                  "line": 1,
                                },
                                "start": Position {
                                  "column": 0,
                                  "line": 1,
                                },
                              },
                              "operands": Array [
                                false,
                                null,
                              ],
                              "operator": Object {
                                "loc": Object {
                                  "end": Object {
                                    "column": 1,
                                    "line": 1,
                                  },
                                  "start": Position {
                                    "column": 0,
                                    "line": 1,
                                  },
                                },
                                "name": "!",
                                "tag": "name",
                              },
                              "tag": "application",
                            },
                            Array [
                              Object {
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 19,
                                    "line": 1,
                                  },
                                  "start": Position {
                                    "column": 12,
                                    "line": 1,
                                  },
                                },
                                "operands": Array [
                                  1,
                                  Array [
                                    2,
                                    null,
                                  ],
                                ],
                                "operator": Object {
                                  "loc": Object {
                                    "end": Object {
                                      "column": 18,
                                      "line": 1,
                                    },
                                    "start": Object {
                                      "column": 17,
                                      "line": 1,
                                    },
                                  },
                                  "name": "!==",
                                  "tag": "name",
                                },
                                "tag": "application",
                              },
                              null,
                            ],
                          ],
                          "operator": Object {
                            "loc": Object {
                              "end": Object {
                                "column": 12,
                                "line": 1,
                              },
                              "start": Object {
                                "column": 11,
                                "line": 1,
                              },
                            },
                            "name": "===",
                            "tag": "name",
                          },
                          "tag": "application",
                        },
                        Array [
                          Object {
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 29,
                                "line": 1,
                              },
                              "start": Position {
                                "column": 24,
                                "line": 1,
                              },
                            },
                            "operands": Array [
                              1,
                              Array [
                                2,
                                null,
                              ],
                            ],
                            "operator": Object {
                              "loc": Object {
                                "end": Object {
                                  "column": 28,
                                  "line": 1,
                                },
                                "start": Object {
                                  "column": 27,
                                  "line": 1,
                                },
                              },
                              "name": "<",
                              "tag": "name",
                            },
                            "tag": "application",
                          },
                          null,
                        ],
                      ],
                      "operator": Object {
                        "loc": Object {
                          "end": Object {
                            "column": 24,
                            "line": 1,
                          },
                          "start": Object {
                            "column": 23,
                            "line": 1,
                          },
                        },
                        "name": "&&",
                        "tag": "name",
                      },
                      "tag": "boolean_operation",
                    },
                    Array [
                      Object {
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 39,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 33,
                            "line": 1,
                          },
                        },
                        "operands": Array [
                          1,
                          Array [
                            2,
                            null,
                          ],
                        ],
                        "operator": Object {
                          "loc": Object {
                            "end": Object {
                              "column": 38,
                              "line": 1,
                            },
                            "start": Object {
                              "column": 37,
                              "line": 1,
                            },
                          },
                          "name": "<=",
                          "tag": "name",
                        },
                        "tag": "application",
                      },
                      null,
                    ],
                  ],
                  "operator": Object {
                    "loc": Object {
                      "end": Object {
                        "column": 33,
                        "line": 1,
                      },
                      "start": Object {
                        "column": 32,
                        "line": 1,
                      },
                    },
                    "name": "&&",
                    "tag": "name",
                  },
                  "tag": "boolean_operation",
                },
                Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 49,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 43,
                        "line": 1,
                      },
                    },
                    "operands": Array [
                      2,
                      Array [
                        1,
                        null,
                      ],
                    ],
                    "operator": Object {
                      "loc": Object {
                        "end": Object {
                          "column": 48,
                          "line": 1,
                        },
                        "start": Object {
                          "column": 47,
                          "line": 1,
                        },
                      },
                      "name": ">=",
                      "tag": "name",
                    },
                    "tag": "application",
                  },
                  null,
                ],
              ],
              "operator": Object {
                "loc": Object {
                  "end": Object {
                    "column": 43,
                    "line": 1,
                  },
                  "start": Object {
                    "column": 42,
                    "line": 1,
                  },
                },
                "name": "&&",
                "tag": "name",
              },
              "tag": "boolean_operation",
            },
            Array [
              Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 58,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 53,
                    "line": 1,
                  },
                },
                "operands": Array [
                  2,
                  Array [
                    1,
                    null,
                  ],
                ],
                "operator": Object {
                  "loc": Object {
                    "end": Object {
                      "column": 57,
                      "line": 1,
                    },
                    "start": Object {
                      "column": 56,
                      "line": 1,
                    },
                  },
                  "name": ">",
                  "tag": "name",
                },
                "tag": "application",
              },
              null,
            ],
          ],
          "operator": Object {
            "loc": Object {
              "end": Object {
                "column": 53,
                "line": 1,
              },
              "start": Object {
                "column": 52,
                "line": 1,
              },
            },
            "name": "&&",
            "tag": "name",
          },
          "tag": "boolean_operation",
        },
        Array [
          false,
          null,
        ],
      ],
      "operator": Object {
        "loc": Object {
          "end": Object {
            "column": 62,
            "line": 1,
          },
          "start": Object {
            "column": 61,
            "line": 1,
          },
        },
        "name": "||",
        "tag": "name",
      },
      "tag": "boolean_operation",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"!false === (1 !== 2) && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "!false === (1 !== 2) && 1 < 2 && 1 <= 2 && 2 >= 1 && 2 > 1 || false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"boolOrErr(boolOrErr(boolOrErr(boolOrErr(boolOrErr(binaryOp(\\\\\\"===\\\\\\", unaryOp(\\\\\\"!\\\\\\", false, 1, 0), binaryOp(\\\\\\"!==\\\\\\", 1, 2, 1, 12), 1, 0), 1, 0) && binaryOp(\\\\\\"<\\\\\\", 1, 2, 1, 24), 1, 0) && binaryOp(\\\\\\"<=\\\\\\", 1, 2, 1, 33), 1, 0) && binaryOp(\\\\\\">=\\\\\\", 2, 1, 1, 43), 1, 0) && binaryOp(\\\\\\">\\\\\\", 2, 1, 1, 53), 1, 0) || false;\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"true ? 1 : 2;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "alternative": 2,
      "consequent": 1,
      "loc": SourceLocation {
        "end": Position {
          "column": 13,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "predicate": true,
      "tag": "conditional_expression",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"true ? 1 : 2;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "true ? 1 : 2;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"boolOrErr(true, 1, 0) ? 1 : 2;\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "null;",
  "displayResult": Array [],
  "errors": Array [
    NoNullError {
      "node": Node {
        "end": 4,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "raw": "null",
        "start": 0,
        "type": "Literal",
        "value": null,
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: null literals are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"null;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    null,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"null;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "null;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"null;\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, null);",
  "displayResult": Array [],
  "errors": Array [
    NoNullError {
      "node": Node {
        "end": 12,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "raw": "null",
        "start": 8,
        "type": "Literal",
        "value": null,
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: null literals are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"pair(1, null);\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": Array [
        1,
        Array [
          null,
          null,
        ],
      ],
      "operator": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "name": "pair",
        "tag": "name",
      },
      "tag": "application",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"pair(1, null);\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, null);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(pair, 1, 0, 1, null);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "list(1);",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 4,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": "list",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name list not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"list(1);\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 8,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "operands": Array [
        1,
        null,
      ],
      "operator": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "name": "list",
        "tag": "name",
      },
      "tag": "application",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"list(1);\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "list(1);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(list, 1, 0, 1);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
while (i < 5) {
  i = i + 1;
}
i;",
  "displayResult": Array [],
  "errors": Array [
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 9,
            "id": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "name": "i",
              "start": 4,
              "type": "Identifier",
            },
            "init": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 8,
              "type": "Literal",
              "value": 1,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "start": 4,
            "type": "VariableDeclarator",
          },
        ],
        "end": 10,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 38,
        "left": Node {
          "end": 30,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 3,
            },
            "start": Position {
              "column": 2,
              "line": 3,
            },
          },
          "name": "i",
          "start": 29,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 11,
            "line": 3,
          },
          "start": Position {
            "column": 2,
            "line": 3,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 38,
          "left": Node {
            "end": 34,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 3,
              },
              "start": Position {
                "column": 6,
                "line": 3,
              },
            },
            "name": "i",
            "start": 33,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 3,
            },
            "start": Position {
              "column": 6,
              "line": 3,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 38,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 3,
              },
              "start": Position {
                "column": 10,
                "line": 3,
              },
            },
            "raw": "1",
            "start": 37,
            "type": "Literal",
            "value": 1,
          },
          "start": 33,
          "type": "BinaryExpression",
        },
        "start": 29,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "body": Node {
          "body": Array [
            Node {
              "end": 39,
              "expression": Node {
                "end": 38,
                "left": Node {
                  "end": 30,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 3,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 2,
                      "line": 3,
                    },
                  },
                  "name": "i",
                  "start": 29,
                  "type": "Identifier",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 3,
                  },
                },
                "operator": "=",
                "right": Node {
                  "end": 38,
                  "left": Node {
                    "end": 34,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 7,
                        "line": 3,
                      },
                      "start": Position {
                        "column": 6,
                        "line": 3,
                      },
                    },
                    "name": "i",
                    "start": 33,
                    "type": "Identifier",
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 11,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 6,
                      "line": 3,
                    },
                  },
                  "operator": "+",
                  "right": Node {
                    "end": 38,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 11,
                        "line": 3,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 3,
                      },
                    },
                    "raw": "1",
                    "start": 37,
                    "type": "Literal",
                    "value": 1,
                  },
                  "start": 33,
                  "type": "BinaryExpression",
                },
                "start": 29,
                "type": "AssignmentExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 3,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "start": 29,
              "type": "ExpressionStatement",
            },
          ],
          "end": 41,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 14,
              "line": 2,
            },
          },
          "start": 25,
          "type": "BlockStatement",
        },
        "end": 41,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "start": 11,
        "test": Node {
          "end": 23,
          "left": Node {
            "end": 19,
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 2,
              },
              "start": Position {
                "column": 7,
                "line": 2,
              },
            },
            "name": "i",
            "start": 18,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 2,
            },
            "start": Position {
              "column": 7,
              "line": 2,
            },
          },
          "operator": "<",
          "right": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 2,
              },
              "start": Position {
                "column": 11,
                "line": 2,
              },
            },
            "raw": "5",
            "start": 22,
            "type": "Literal",
            "value": 5,
          },
          "start": 18,
          "type": "BinaryExpression",
        },
        "type": "WhileStatement",
      },
      "nodeType": "While statements",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 3: Assignment expressions are not allowed
Line 2: While statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nwhile (i < 5) {\\\\n  i = i + 1;\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "i",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": 1,
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "predicate": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 2,
            },
            "start": Position {
              "column": 7,
              "line": 2,
            },
          },
          "operands": Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 2,
                },
                "start": Position {
                  "column": 7,
                  "line": 2,
                },
              },
              "name": "i",
              "tag": "name",
            },
            Array [
              5,
              null,
            ],
          ],
          "operator": Object {
            "loc": Object {
              "end": Object {
                "column": 11,
                "line": 2,
              },
              "start": Object {
                "column": 10,
                "line": 2,
              },
            },
            "name": "<",
            "tag": "name",
          },
          "tag": "application",
        },
        "statements": Object {
          "body": Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 3,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "name": Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 3,
                  },
                },
                "name": "i",
                "tag": "name",
              },
              "tag": "assignment",
              "value": Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "operands": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 7,
                        "line": 3,
                      },
                      "start": Position {
                        "column": 6,
                        "line": 3,
                      },
                    },
                    "name": "i",
                    "tag": "name",
                  },
                  Array [
                    1,
                    null,
                  ],
                ],
                "operator": Object {
                  "loc": Object {
                    "end": Object {
                      "column": 10,
                      "line": 3,
                    },
                    "start": Object {
                      "column": 9,
                      "line": 3,
                    },
                  },
                  "name": "+",
                  "tag": "name",
                },
                "tag": "application",
              },
            },
            null,
          ],
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 14,
              "line": 2,
            },
          },
          "tag": "block",
        },
        "tag": "while_loop",
      },
      Array [
        Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 2,
              "line": 5,
            },
            "start": Position {
              "column": 0,
              "line": 5,
            },
          },
          "name": "i",
          "tag": "name",
        },
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let i = 1;\\\\\\\\nwhile (i < 5) {\\\\\\\\n  i = i + 1;\\\\\\\\n}\\\\\\\\ni;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
while (i < 5) {
  i = i + 1;
}
i;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let i = 1;
    const startTime = runtime();
    while (boolOrErr(binaryOp(\\"<\\", i, 5, 2, 7), 2, 0)) {
      throwIfTimeout(startTime, runtime(), 2, 0);
      i = binaryOp(\\"+\\", i, 1, 3, 6);
    }
    const lastStatementResult = eval(\\"i;\\");
    native.globals.set(\\"i\\", {
      kind: \\"let\\",
      value: i
    });
    native.globals.set(\\"startTime\\", {
      kind: \\"const\\",
      value: startTime
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (i = 1; i < 5; i = i + 1) {
}
i;",
  "displayResult": Array [],
  "errors": Array [
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 9,
            "id": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "name": "i",
              "start": 4,
              "type": "Identifier",
            },
            "init": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 8,
              "type": "Literal",
              "value": 1,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "start": 4,
            "type": "VariableDeclarator",
          },
        ],
        "end": 10,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 21,
        "left": Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 6,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "name": "i",
          "start": 16,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 2,
          },
          "start": Position {
            "column": 5,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 21,
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 2,
            },
            "start": Position {
              "column": 9,
              "line": 2,
            },
          },
          "raw": "1",
          "start": 20,
          "type": "Literal",
          "value": 1,
        },
        "start": 16,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 39,
        "left": Node {
          "end": 31,
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 2,
            },
            "start": Position {
              "column": 19,
              "line": 2,
            },
          },
          "name": "i",
          "start": 30,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 28,
            "line": 2,
          },
          "start": Position {
            "column": 19,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 39,
          "left": Node {
            "end": 35,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "name": "i",
            "start": 34,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 39,
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 38,
            "type": "Literal",
            "value": 1,
          },
          "start": 34,
          "type": "BinaryExpression",
        },
        "start": 30,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "body": Node {
          "body": Array [],
          "end": 44,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 3,
            },
            "start": Position {
              "column": 30,
              "line": 2,
            },
          },
          "start": 41,
          "type": "BlockStatement",
        },
        "end": 44,
        "init": Node {
          "end": 21,
          "left": Node {
            "end": 17,
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 2,
              },
              "start": Position {
                "column": 5,
                "line": 2,
              },
            },
            "name": "i",
            "start": 16,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "operator": "=",
          "right": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 10,
                "line": 2,
              },
              "start": Position {
                "column": 9,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 20,
            "type": "Literal",
            "value": 1,
          },
          "start": 16,
          "type": "AssignmentExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "start": 11,
        "test": Node {
          "end": 28,
          "left": Node {
            "end": 24,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 2,
              },
              "start": Position {
                "column": 12,
                "line": 2,
              },
            },
            "name": "i",
            "start": 23,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 2,
            },
            "start": Position {
              "column": 12,
              "line": 2,
            },
          },
          "operator": "<",
          "right": Node {
            "end": 28,
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 2,
              },
              "start": Position {
                "column": 16,
                "line": 2,
              },
            },
            "raw": "5",
            "start": 27,
            "type": "Literal",
            "value": 5,
          },
          "start": 23,
          "type": "BinaryExpression",
        },
        "type": "ForStatement",
        "update": Node {
          "end": 39,
          "left": Node {
            "end": 31,
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 2,
              },
              "start": Position {
                "column": 19,
                "line": 2,
              },
            },
            "name": "i",
            "start": 30,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 2,
            },
            "start": Position {
              "column": 19,
              "line": 2,
            },
          },
          "operator": "=",
          "right": Node {
            "end": 39,
            "left": Node {
              "end": 35,
              "loc": SourceLocation {
                "end": Position {
                  "column": 24,
                  "line": 2,
                },
                "start": Position {
                  "column": 23,
                  "line": 2,
                },
              },
              "name": "i",
              "start": 34,
              "type": "Identifier",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "operator": "+",
            "right": Node {
              "end": 39,
              "loc": SourceLocation {
                "end": Position {
                  "column": 28,
                  "line": 2,
                },
                "start": Position {
                  "column": 27,
                  "line": 2,
                },
              },
              "raw": "1",
              "start": 38,
              "type": "Literal",
              "value": 1,
            },
            "start": 34,
            "type": "BinaryExpression",
          },
          "start": 30,
          "type": "AssignmentExpression",
        },
      },
      "nodeType": "For statements",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 2: Assignment expressions are not allowed
Line 2: For statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nfor (i = 1; i < 5; i = i + 1) {\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "i",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": 1,
    },
    Array [
      Object {
        "finaliser": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 2,
            },
            "start": Position {
              "column": 19,
              "line": 2,
            },
          },
          "name": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 2,
              },
              "start": Position {
                "column": 19,
                "line": 2,
              },
            },
            "name": "i",
            "tag": "name",
          },
          "tag": "assignment",
          "value": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "operands": Array [
              Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 24,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 23,
                    "line": 2,
                  },
                },
                "name": "i",
                "tag": "name",
              },
              Array [
                1,
                null,
              ],
            ],
            "operator": Object {
              "loc": Object {
                "end": Object {
                  "column": 27,
                  "line": 2,
                },
                "start": Object {
                  "column": 26,
                  "line": 2,
                },
              },
              "name": "+",
              "tag": "name",
            },
            "tag": "application",
          },
        },
        "initialiser": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "name": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 2,
              },
              "start": Position {
                "column": 5,
                "line": 2,
              },
            },
            "name": "i",
            "tag": "name",
          },
          "tag": "assignment",
          "value": 1,
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "predicate": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 2,
            },
            "start": Position {
              "column": 12,
              "line": 2,
            },
          },
          "operands": Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 2,
                },
                "start": Position {
                  "column": 12,
                  "line": 2,
                },
              },
              "name": "i",
              "tag": "name",
            },
            Array [
              5,
              null,
            ],
          ],
          "operator": Object {
            "loc": Object {
              "end": Object {
                "column": 16,
                "line": 2,
              },
              "start": Object {
                "column": 15,
                "line": 2,
              },
            },
            "name": "<",
            "tag": "name",
          },
          "tag": "application",
        },
        "statements": Object {
          "body": null,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 3,
            },
            "start": Position {
              "column": 30,
              "line": 2,
            },
          },
          "tag": "block",
        },
        "tag": "for_loop",
      },
      Array [
        Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 2,
              "line": 4,
            },
            "start": Position {
              "column": 0,
              "line": 4,
            },
          },
          "name": "i",
          "tag": "name",
        },
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let i = 1;\\\\\\\\nfor (i = 1; i < 5; i = i + 1) {\\\\\\\\n}\\\\\\\\ni;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (i = 1; i < 5; i = i + 1) {
}
i;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let i = 1;
    const startTime = runtime();
    for (i = 1; boolOrErr(binaryOp(\\"<\\", i, 5, 2, 12), 2, 0); i = binaryOp(\\"+\\", i, 1, 2, 23)) {
      throwIfTimeout(startTime, runtime(), 2, 0);
    }
    const lastStatementResult = eval(\\"i;\\");
    native.globals.set(\\"i\\", {
      kind: \\"let\\",
      value: i
    });
    native.globals.set(\\"startTime\\", {
      kind: \\"const\\",
      value: startTime
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (let j = 0; j < 5; j = j + 1) {
  if (j < 1) {
    continue;
  } else {
    i = i + 1;
    if (j > 2) {
      break;
    } else {
    }
  }
}
i;",
  "displayResult": Array [],
  "errors": Array [
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 9,
            "id": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "name": "i",
              "start": 4,
              "type": "Identifier",
            },
            "init": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 8,
              "type": "Literal",
              "value": 1,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "start": 4,
            "type": "VariableDeclarator",
          },
        ],
        "end": 10,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 25,
            "id": Node {
              "end": 21,
              "loc": SourceLocation {
                "end": Position {
                  "column": 10,
                  "line": 2,
                },
                "start": Position {
                  "column": 9,
                  "line": 2,
                },
              },
              "name": "j",
              "start": 20,
              "type": "Identifier",
            },
            "init": Node {
              "end": 25,
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 2,
                },
                "start": Position {
                  "column": 13,
                  "line": 2,
                },
              },
              "raw": "0",
              "start": 24,
              "type": "Literal",
              "value": 0,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 14,
                "line": 2,
              },
              "start": Position {
                "column": 9,
                "line": 2,
              },
            },
            "start": 20,
            "type": "VariableDeclarator",
          },
        ],
        "end": 25,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 14,
            "line": 2,
          },
          "start": Position {
            "column": 5,
            "line": 2,
          },
        },
        "start": 16,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 43,
        "left": Node {
          "end": 35,
          "loc": SourceLocation {
            "end": Position {
              "column": 24,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "name": "j",
          "start": 34,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 32,
            "line": 2,
          },
          "start": Position {
            "column": 23,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 43,
          "left": Node {
            "end": 39,
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "name": "j",
            "start": 38,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 32,
              "line": 2,
            },
            "start": Position {
              "column": 27,
              "line": 2,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 43,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 2,
              },
              "start": Position {
                "column": 31,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 42,
            "type": "Literal",
            "value": 1,
          },
          "start": 38,
          "type": "BinaryExpression",
        },
        "start": 34,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 75,
        "label": null,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 4,
          },
          "start": Position {
            "column": 4,
            "line": 4,
          },
        },
        "start": 66,
        "type": "ContinueStatement",
      },
      "nodeType": "Continue statements",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 100,
        "left": Node {
          "end": 92,
          "loc": SourceLocation {
            "end": Position {
              "column": 5,
              "line": 6,
            },
            "start": Position {
              "column": 4,
              "line": 6,
            },
          },
          "name": "i",
          "start": 91,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 6,
          },
          "start": Position {
            "column": 4,
            "line": 6,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 100,
          "left": Node {
            "end": 96,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 6,
              },
              "start": Position {
                "column": 8,
                "line": 6,
              },
            },
            "name": "i",
            "start": 95,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 6,
            },
            "start": Position {
              "column": 8,
              "line": 6,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 100,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 6,
              },
              "start": Position {
                "column": 12,
                "line": 6,
              },
            },
            "raw": "1",
            "start": 99,
            "type": "Literal",
            "value": 1,
          },
          "start": 95,
          "type": "BinaryExpression",
        },
        "start": 91,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 131,
        "label": null,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 8,
          },
          "start": Position {
            "column": 6,
            "line": 8,
          },
        },
        "start": 125,
        "type": "BreakStatement",
      },
      "nodeType": "Break statements",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "body": Node {
          "body": Array [
            Node {
              "alternate": Node {
                "body": Array [
                  Node {
                    "end": 101,
                    "expression": Node {
                      "end": 100,
                      "left": Node {
                        "end": 92,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 5,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 4,
                            "line": 6,
                          },
                        },
                        "name": "i",
                        "start": 91,
                        "type": "Identifier",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 4,
                          "line": 6,
                        },
                      },
                      "operator": "=",
                      "right": Node {
                        "end": 100,
                        "left": Node {
                          "end": 96,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 9,
                              "line": 6,
                            },
                            "start": Position {
                              "column": 8,
                              "line": 6,
                            },
                          },
                          "name": "i",
                          "start": 95,
                          "type": "Identifier",
                        },
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 13,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 6,
                          },
                        },
                        "operator": "+",
                        "right": Node {
                          "end": 100,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 13,
                              "line": 6,
                            },
                            "start": Position {
                              "column": 12,
                              "line": 6,
                            },
                          },
                          "raw": "1",
                          "start": 99,
                          "type": "Literal",
                          "value": 1,
                        },
                        "start": 95,
                        "type": "BinaryExpression",
                      },
                      "start": 91,
                      "type": "AssignmentExpression",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 14,
                        "line": 6,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 6,
                      },
                    },
                    "start": 91,
                    "type": "ExpressionStatement",
                  },
                  Node {
                    "alternate": Node {
                      "body": Array [],
                      "end": 150,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 10,
                        },
                        "start": Position {
                          "column": 11,
                          "line": 9,
                        },
                      },
                      "start": 143,
                      "type": "BlockStatement",
                    },
                    "consequent": Node {
                      "body": Array [
                        Node {
                          "end": 131,
                          "label": null,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 12,
                              "line": 8,
                            },
                            "start": Position {
                              "column": 6,
                              "line": 8,
                            },
                          },
                          "start": 125,
                          "type": "BreakStatement",
                        },
                      ],
                      "end": 137,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 9,
                        },
                        "start": Position {
                          "column": 15,
                          "line": 7,
                        },
                      },
                      "start": 117,
                      "type": "BlockStatement",
                    },
                    "end": 150,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 5,
                        "line": 10,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 7,
                      },
                    },
                    "start": 106,
                    "test": Node {
                      "end": 115,
                      "left": Node {
                        "end": 111,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 9,
                            "line": 7,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 7,
                          },
                        },
                        "name": "j",
                        "start": 110,
                        "type": "Identifier",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 7,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 7,
                        },
                      },
                      "operator": ">",
                      "right": Node {
                        "end": 115,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 13,
                            "line": 7,
                          },
                          "start": Position {
                            "column": 12,
                            "line": 7,
                          },
                        },
                        "raw": "2",
                        "start": 114,
                        "type": "Literal",
                        "value": 2,
                      },
                      "start": 110,
                      "type": "BinaryExpression",
                    },
                    "type": "IfStatement",
                  },
                ],
                "end": 154,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 11,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 5,
                  },
                },
                "start": 85,
                "type": "BlockStatement",
              },
              "consequent": Node {
                "body": Array [
                  Node {
                    "end": 75,
                    "label": null,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 13,
                        "line": 4,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 4,
                      },
                    },
                    "start": 66,
                    "type": "ContinueStatement",
                  },
                ],
                "end": 79,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 5,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 3,
                  },
                },
                "start": 60,
                "type": "BlockStatement",
              },
              "end": 154,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 11,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "start": 49,
              "test": Node {
                "end": 58,
                "left": Node {
                  "end": 54,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 7,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 6,
                      "line": 3,
                    },
                  },
                  "name": "j",
                  "start": 53,
                  "type": "Identifier",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "operator": "<",
                "right": Node {
                  "end": 58,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 11,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 3,
                    },
                  },
                  "raw": "1",
                  "start": 57,
                  "type": "Literal",
                  "value": 1,
                },
                "start": 53,
                "type": "BinaryExpression",
              },
              "type": "IfStatement",
            },
          ],
          "end": 156,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 12,
            },
            "start": Position {
              "column": 34,
              "line": 2,
            },
          },
          "start": 45,
          "type": "BlockStatement",
        },
        "end": 156,
        "init": Node {
          "declarations": Array [
            Node {
              "end": 25,
              "id": Node {
                "end": 21,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 2,
                  },
                },
                "name": "j",
                "start": 20,
                "type": "Identifier",
              },
              "init": Node {
                "end": 25,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 14,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 2,
                  },
                },
                "raw": "0",
                "start": 24,
                "type": "Literal",
                "value": 0,
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 2,
                },
                "start": Position {
                  "column": 9,
                  "line": 2,
                },
              },
              "start": 20,
              "type": "VariableDeclarator",
            },
          ],
          "end": 25,
          "kind": "let",
          "loc": SourceLocation {
            "end": Position {
              "column": 14,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "start": 16,
          "type": "VariableDeclaration",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 12,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "start": 11,
        "test": Node {
          "end": 32,
          "left": Node {
            "end": 28,
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 2,
              },
              "start": Position {
                "column": 16,
                "line": 2,
              },
            },
            "name": "j",
            "start": 27,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 21,
              "line": 2,
            },
            "start": Position {
              "column": 16,
              "line": 2,
            },
          },
          "operator": "<",
          "right": Node {
            "end": 32,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 2,
              },
              "start": Position {
                "column": 20,
                "line": 2,
              },
            },
            "raw": "5",
            "start": 31,
            "type": "Literal",
            "value": 5,
          },
          "start": 27,
          "type": "BinaryExpression",
        },
        "type": "ForStatement",
        "update": Node {
          "end": 43,
          "left": Node {
            "end": 35,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "name": "j",
            "start": 34,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 32,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "operator": "=",
          "right": Node {
            "end": 43,
            "left": Node {
              "end": 39,
              "loc": SourceLocation {
                "end": Position {
                  "column": 28,
                  "line": 2,
                },
                "start": Position {
                  "column": 27,
                  "line": 2,
                },
              },
              "name": "j",
              "start": 38,
              "type": "Identifier",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "operator": "+",
            "right": Node {
              "end": 43,
              "loc": SourceLocation {
                "end": Position {
                  "column": 32,
                  "line": 2,
                },
                "start": Position {
                  "column": 31,
                  "line": 2,
                },
              },
              "raw": "1",
              "start": 42,
              "type": "Literal",
              "value": 1,
            },
            "start": 38,
            "type": "BinaryExpression",
          },
          "start": 34,
          "type": "AssignmentExpression",
        },
      },
      "nodeType": "For statements",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 4: Continue statements are not allowed
Line 6: Assignment expressions are not allowed
Line 8: Break statements are not allowed
Line 2: For statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let i = 1;\\\\nfor (let j = 0; j < 5; j = j + 1) {\\\\n  if (j < 1) {\\\\n    continue;\\\\n  } else {\\\\n    i = i + 1;\\\\n    if (j > 2) {\\\\n      break;\\\\n    } else {\\\\n    }\\\\n  }\\\\n}\\\\ni;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "i",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": 1,
    },
    Array [
      Object {
        "finaliser": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 32,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "name": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "name": "j",
            "tag": "name",
          },
          "tag": "assignment",
          "value": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "operands": Array [
              Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 28,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 27,
                    "line": 2,
                  },
                },
                "name": "j",
                "tag": "name",
              },
              Array [
                1,
                null,
              ],
            ],
            "operator": Object {
              "loc": Object {
                "end": Object {
                  "column": 31,
                  "line": 2,
                },
                "start": Object {
                  "column": 30,
                  "line": 2,
                },
              },
              "name": "+",
              "tag": "name",
            },
            "tag": "application",
          },
        },
        "initialiser": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 14,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "name": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 10,
                "line": 2,
              },
              "start": Position {
                "column": 9,
                "line": 2,
              },
            },
            "name": "j",
            "tag": "name",
          },
          "tag": "variable_declaration",
          "value": 0,
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 12,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "predicate": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 21,
              "line": 2,
            },
            "start": Position {
              "column": 16,
              "line": 2,
            },
          },
          "operands": Array [
            Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 17,
                  "line": 2,
                },
                "start": Position {
                  "column": 16,
                  "line": 2,
                },
              },
              "name": "j",
              "tag": "name",
            },
            Array [
              5,
              null,
            ],
          ],
          "operator": Object {
            "loc": Object {
              "end": Object {
                "column": 20,
                "line": 2,
              },
              "start": Object {
                "column": 19,
                "line": 2,
              },
            },
            "name": "<",
            "tag": "name",
          },
          "tag": "application",
        },
        "statements": Object {
          "body": Array [
            Object {
              "alternative": Object {
                "body": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 14,
                        "line": 6,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 6,
                      },
                    },
                    "name": Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 4,
                          "line": 6,
                        },
                      },
                      "name": "i",
                      "tag": "name",
                    },
                    "tag": "assignment",
                    "value": Object {
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 6,
                        },
                      },
                      "operands": Array [
                        Object {
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 9,
                              "line": 6,
                            },
                            "start": Position {
                              "column": 8,
                              "line": 6,
                            },
                          },
                          "name": "i",
                          "tag": "name",
                        },
                        Array [
                          1,
                          null,
                        ],
                      ],
                      "operator": Object {
                        "loc": Object {
                          "end": Object {
                            "column": 12,
                            "line": 6,
                          },
                          "start": Object {
                            "column": 11,
                            "line": 6,
                          },
                        },
                        "name": "+",
                        "tag": "name",
                      },
                      "tag": "application",
                    },
                  },
                  Array [
                    Object {
                      "alternative": Object {
                        "body": null,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 5,
                            "line": 10,
                          },
                          "start": Position {
                            "column": 11,
                            "line": 9,
                          },
                        },
                        "tag": "block",
                      },
                      "consequent": Object {
                        "body": Array [
                          Object {
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 12,
                                "line": 8,
                              },
                              "start": Position {
                                "column": 6,
                                "line": 8,
                              },
                            },
                            "tag": "break_statement",
                          },
                          null,
                        ],
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 5,
                            "line": 9,
                          },
                          "start": Position {
                            "column": 15,
                            "line": 7,
                          },
                        },
                        "tag": "block",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 10,
                        },
                        "start": Position {
                          "column": 4,
                          "line": 7,
                        },
                      },
                      "predicate": Object {
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 13,
                            "line": 7,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 7,
                          },
                        },
                        "operands": Array [
                          Object {
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 9,
                                "line": 7,
                              },
                              "start": Position {
                                "column": 8,
                                "line": 7,
                              },
                            },
                            "name": "j",
                            "tag": "name",
                          },
                          Array [
                            2,
                            null,
                          ],
                        ],
                        "operator": Object {
                          "loc": Object {
                            "end": Object {
                              "column": 12,
                              "line": 7,
                            },
                            "start": Object {
                              "column": 11,
                              "line": 7,
                            },
                          },
                          "name": ">",
                          "tag": "name",
                        },
                        "tag": "application",
                      },
                      "tag": "conditional_statement",
                    },
                    null,
                  ],
                ],
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 11,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 5,
                  },
                },
                "tag": "block",
              },
              "consequent": Object {
                "body": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 13,
                        "line": 4,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 4,
                      },
                    },
                    "tag": "continue_statement",
                  },
                  null,
                ],
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 5,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 3,
                  },
                },
                "tag": "block",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 11,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "predicate": Object {
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "operands": Array [
                  Object {
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 7,
                        "line": 3,
                      },
                      "start": Position {
                        "column": 6,
                        "line": 3,
                      },
                    },
                    "name": "j",
                    "tag": "name",
                  },
                  Array [
                    1,
                    null,
                  ],
                ],
                "operator": Object {
                  "loc": Object {
                    "end": Object {
                      "column": 10,
                      "line": 3,
                    },
                    "start": Object {
                      "column": 9,
                      "line": 3,
                    },
                  },
                  "name": "<",
                  "tag": "name",
                },
                "tag": "application",
              },
              "tag": "conditional_statement",
            },
            null,
          ],
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 12,
            },
            "start": Position {
              "column": 34,
              "line": 2,
            },
          },
          "tag": "block",
        },
        "tag": "for_loop",
      },
      Array [
        Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 2,
              "line": 13,
            },
            "start": Position {
              "column": 0,
              "line": 13,
            },
          },
          "name": "i",
          "tag": "name",
        },
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let i = 1;\\\\\\\\nfor (let j = 0; j < 5; j = j + 1) {\\\\\\\\n  if (j < 1) {\\\\\\\\n    continue;\\\\\\\\n  } else {\\\\\\\\n    i = i + 1;\\\\\\\\n    if (j > 2) {\\\\\\\\n      break;\\\\\\\\n    } else {\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\ni;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 1;
for (let j = 0; j < 5; j = j + 1) {
  if (j < 1) {
    continue;
  } else {
    i = i + 1;
    if (j > 2) {
      break;
    } else {
    }
  }
}
i;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let i = 1;
    const startTime = runtime();
    for (let j = 0; boolOrErr(binaryOp(\\"<\\", j, 5, 2, 16), 2, 0); j = binaryOp(\\"+\\", j, 1, 2, 27)) {
      throwIfTimeout(startTime, runtime(), 2, 0);
      if (boolOrErr(binaryOp(\\"<\\", j, 1, 3, 6), 3, 2)) {
        continue;
      } else {
        i = binaryOp(\\"+\\", i, 1, 6, 8);
        if (boolOrErr(binaryOp(\\">\\", j, 2, 7, 8), 7, 4)) {
          break;
        } else {}
      }
    }
    const lastStatementResult = eval(\\"i;\\");
    native.globals.set(\\"i\\", {
      kind: \\"let\\",
      value: i
    });
    native.globals.set(\\"startTime\\", {
      kind: \\"const\\",
      value: startTime
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "elements": Array [],
        "end": 2,
        "loc": SourceLocation {
          "end": Position {
            "column": 2,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ArrayExpression",
      },
      "nodeType": "Array expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Array expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 3,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "tag": "empty_list",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"[];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"[];\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "elements": Array [
          Node {
            "end": 2,
            "loc": SourceLocation {
              "end": Position {
                "column": 2,
                "line": 1,
              },
              "start": Position {
                "column": 1,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 1,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 4,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 8,
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 7,
            "type": "Literal",
            "value": 3,
          },
        ],
        "end": 9,
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ArrayExpression",
      },
      "nodeType": "Array expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Array expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[1, 2, 3];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "elements": Array [
        1,
        Array [
          2,
          Array [
            3,
            null,
          ],
        ],
      ],
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "tag": "array_expression",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"[1, 2, 3];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    2,
    3,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"[1, 2, 3];\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3][1];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "elements": Array [
          Node {
            "end": 2,
            "loc": SourceLocation {
              "end": Position {
                "column": 2,
                "line": 1,
              },
              "start": Position {
                "column": 1,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 1,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 4,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 8,
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 7,
            "type": "Literal",
            "value": 3,
          },
        ],
        "end": 9,
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ArrayExpression",
      },
      "nodeType": "Array expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "computed": true,
        "end": 12,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "elements": Array [
            Node {
              "end": 2,
              "loc": SourceLocation {
                "end": Position {
                  "column": 2,
                  "line": 1,
                },
                "start": Position {
                  "column": 1,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 1,
              "type": "Literal",
              "value": 1,
            },
            Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 4,
              "type": "Literal",
              "value": 2,
            },
            Node {
              "end": 8,
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 1,
                },
                "start": Position {
                  "column": 7,
                  "line": 1,
                },
              },
              "raw": "3",
              "start": 7,
              "type": "Literal",
              "value": 3,
            },
          ],
          "end": 9,
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "start": 0,
          "type": "ArrayExpression",
        },
        "property": Node {
          "end": 11,
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 10,
              "line": 1,
            },
          },
          "raw": "1",
          "start": 10,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "nodeType": "Member expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Member expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"[1, 2, 3][1];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 13,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "object": Object {
        "elements": Array [
          1,
          Array [
            2,
            Array [
              3,
              null,
            ],
          ],
        ],
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "tag": "array_expression",
      },
      "property": 1,
      "tag": "property_access",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"[1, 2, 3][1];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, 2, 3][1];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"[1, 2, 3][1];\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "elements": Array [
          Node {
            "end": 10,
            "loc": SourceLocation {
              "end": Position {
                "column": 10,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 9,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 13,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 1,
              },
              "start": Position {
                "column": 12,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 12,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 16,
            "loc": SourceLocation {
              "end": Position {
                "column": 16,
                "line": 1,
              },
              "start": Position {
                "column": 15,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 15,
            "type": "Literal",
            "value": 3,
          },
        ],
        "end": 17,
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "start": 8,
        "type": "ArrayExpression",
      },
      "nodeType": "Array expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 17,
            "id": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "name": "x",
              "start": 4,
              "type": "Identifier",
            },
            "init": Node {
              "elements": Array [
                Node {
                  "end": 10,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 9,
                  "type": "Literal",
                  "value": 1,
                },
                Node {
                  "end": 13,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 12,
                  "type": "Literal",
                  "value": 2,
                },
                Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 15,
                      "line": 1,
                    },
                  },
                  "raw": "3",
                  "start": 15,
                  "type": "Literal",
                  "value": 3,
                },
              ],
              "end": 17,
              "loc": SourceLocation {
                "end": Position {
                  "column": 17,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "start": 8,
              "type": "ArrayExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "start": 4,
            "type": "VariableDeclarator",
          },
        ],
        "end": 18,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 18,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "computed": true,
        "end": 23,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "name": "x",
          "start": 19,
          "type": "Identifier",
        },
        "property": Node {
          "end": 22,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 2,
              "line": 2,
            },
          },
          "raw": "1",
          "start": 21,
          "type": "Literal",
          "value": 1,
        },
        "start": 19,
        "type": "MemberExpression",
      },
      "nodeType": "Member expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = [1, 2, 3];\\\\nx[1];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "x",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": Object {
        "elements": Array [
          1,
          Array [
            2,
            Array [
              3,
              null,
            ],
          ],
        ],
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "tag": "array_expression",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "name": "x",
          "tag": "name",
        },
        "property": 1,
        "tag": "property_access",
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let x = [1, 2, 3];\\\\\\\\nx[1];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let x = [1, 2, 3];
    const lastStatementResult = eval(\\"x[1];\\");
    native.globals.set(\\"x\\", {
      kind: \\"let\\",
      value: x
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1] = 4;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "elements": Array [
          Node {
            "end": 10,
            "loc": SourceLocation {
              "end": Position {
                "column": 10,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 9,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 13,
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 1,
              },
              "start": Position {
                "column": 12,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 12,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 16,
            "loc": SourceLocation {
              "end": Position {
                "column": 16,
                "line": 1,
              },
              "start": Position {
                "column": 15,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 15,
            "type": "Literal",
            "value": 3,
          },
        ],
        "end": 17,
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "start": 8,
        "type": "ArrayExpression",
      },
      "nodeType": "Array expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    NoDeclareMutableError {
      "node": Node {
        "declarations": Array [
          Node {
            "end": 17,
            "id": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "name": "x",
              "start": 4,
              "type": "Identifier",
            },
            "init": Node {
              "elements": Array [
                Node {
                  "end": 10,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 9,
                  "type": "Literal",
                  "value": 1,
                },
                Node {
                  "end": 13,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 12,
                  "type": "Literal",
                  "value": 2,
                },
                Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 15,
                      "line": 1,
                    },
                  },
                  "raw": "3",
                  "start": 15,
                  "type": "Literal",
                  "value": 3,
                },
              ],
              "end": 17,
              "loc": SourceLocation {
                "end": Position {
                  "column": 17,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "start": 8,
              "type": "ArrayExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "start": 4,
            "type": "VariableDeclarator",
          },
        ],
        "end": 18,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 18,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "VariableDeclaration",
      },
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "computed": true,
        "end": 23,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "name": "x",
          "start": 19,
          "type": "Identifier",
        },
        "property": Node {
          "end": 22,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 2,
              "line": 2,
            },
          },
          "raw": "1",
          "start": 21,
          "type": "Literal",
          "value": 1,
        },
        "start": 19,
        "type": "MemberExpression",
      },
      "nodeType": "Member expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    DisallowedConstructError {
      "node": Node {
        "end": 27,
        "left": Node {
          "computed": true,
          "end": 23,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "start": 19,
            "type": "Identifier",
          },
          "property": Node {
            "end": 22,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 21,
            "type": "Literal",
            "value": 1,
          },
          "start": 19,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 8,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 27,
          "loc": SourceLocation {
            "end": Position {
              "column": 8,
              "line": 2,
            },
            "start": Position {
              "column": 7,
              "line": 2,
            },
          },
          "raw": "4",
          "start": 26,
          "type": "Literal",
          "value": 4,
        },
        "start": 19,
        "type": "AssignmentExpression",
      },
      "nodeType": "Assignment expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed
Line 2: Assignment expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = [1, 2, 3];\\\\nx[1] = 4;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "x",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": Object {
        "elements": Array [
          1,
          Array [
            2,
            Array [
              3,
              null,
            ],
          ],
        ],
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "tag": "array_expression",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "tag": "name",
          },
          "property": 1,
          "tag": "property_access",
        },
        "tag": "property_assignment",
        "value": 4,
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let x = [1, 2, 3];\\\\\\\\nx[1] = 4;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2, 3];
x[1] = 4;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let x = [1, 2, 3];
    const lastStatementResult = eval(\\"x[1] = 4;\\");
    native.globals.set(\\"x\\", {
      kind: \\"let\\",
      value: x
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({});",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 3,
        "loc": SourceLocation {
          "end": Position {
            "column": 3,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({});\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "pairs": null,
      "tag": "object_expression",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({});\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({});",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Object {},
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2});",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 6,
            "key": Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 12,
            "key": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 8,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 8,
            "type": "Property",
            "value": Node {
              "end": 12,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 11,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 11,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2});\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "pairs": Array [
        Array [
          "a",
          1,
        ],
        Array [
          Array [
            "b",
            2,
          ],
          null,
        ],
      ],
      "tag": "object_expression",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({a: 1, b: 2});\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2});",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Object {
    "a": 1,
    "b": 2,
  },
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2})['a'];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 6,
            "key": Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 12,
            "key": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 8,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 8,
            "type": "Property",
            "value": Node {
              "end": 12,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 11,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 11,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2})['a'];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "object": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
      "property": "a",
      "tag": "property_access",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({a: 1, b: 2})['a'];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2})['a'];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2}).a;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 6,
            "key": Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 12,
            "key": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 8,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 8,
            "type": "Property",
            "value": Node {
              "end": 12,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 11,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 11,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    NoDotAbbreviationError {
      "node": Node {
        "computed": false,
        "end": 16,
        "loc": SourceLocation {
          "end": Position {
            "column": 16,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 6,
              "key": Node {
                "end": 3,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "name": "a",
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 6,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 6,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 5,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 5,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 12,
              "key": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "name": "b",
                "start": 8,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 8,
              "type": "Property",
              "value": Node {
                "end": 12,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 12,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 11,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 11,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 16,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 1,
            },
            "start": Position {
              "column": 15,
              "line": 1,
            },
          },
          "name": "a",
          "start": 15,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({a: 1, b: 2}).a;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "object": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
      "property": "a",
      "tag": "property_access",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({a: 1, b: 2}).a;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({a: 1, b: 2}).a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({'a': 1, 'b': 2}).a;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 17,
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 8,
            "key": Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "raw": "'a'",
              "start": 2,
              "type": "Literal",
              "value": "a",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 8,
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 1,
                },
                "start": Position {
                  "column": 7,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 7,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 16,
            "key": Node {
              "end": 13,
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 1,
                },
                "start": Position {
                  "column": 10,
                  "line": 1,
                },
              },
              "raw": "'b'",
              "start": 10,
              "type": "Literal",
              "value": "b",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 16,
                "line": 1,
              },
              "start": Position {
                "column": 10,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 10,
            "type": "Property",
            "value": Node {
              "end": 16,
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 15,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 15,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    NoDotAbbreviationError {
      "node": Node {
        "computed": false,
        "end": 20,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 8,
              "key": Node {
                "end": 5,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 5,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "raw": "'a'",
                "start": 2,
                "type": "Literal",
                "value": "a",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 8,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 8,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 7,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 7,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 16,
              "key": Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 10,
                    "line": 1,
                  },
                },
                "raw": "'b'",
                "start": 10,
                "type": "Literal",
                "value": "b",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 10,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 10,
              "type": "Property",
              "value": Node {
                "end": 16,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 15,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 19,
              "line": 1,
            },
          },
          "name": "a",
          "start": 19,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({'a': 1, 'b': 2}).a;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "object": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
      "property": "a",
      "tag": "property_access",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({'a': 1, 'b': 2}).a;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({'a': 1, 'b': 2}).a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "({1: 1, 2: 2})['1'];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 6,
            "key": Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 2,
              "type": "Literal",
              "value": 1,
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 12,
            "key": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 8,
              "type": "Literal",
              "value": 2,
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 8,
            "type": "Property",
            "value": Node {
              "end": 12,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 11,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 11,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"({1: 1, 2: 2})['1'];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "object": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            1,
            1,
          ],
          Array [
            Array [
              2,
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
      "property": "1",
      "tag": "property_access",
    },
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"({1: 1, 2: 2})['1'];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "({1: 1, 2: 2})['1'];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "const key = 'a';
({a: 1, b: 2})[key];",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 30,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 2,
          },
          "start": Position {
            "column": 1,
            "line": 2,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 23,
            "key": Node {
              "end": 20,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 2,
                },
                "start": Position {
                  "column": 2,
                  "line": 2,
                },
              },
              "name": "a",
              "start": 19,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 19,
            "type": "Property",
            "value": Node {
              "end": 23,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 2,
                },
                "start": Position {
                  "column": 5,
                  "line": 2,
                },
              },
              "raw": "1",
              "start": 22,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 29,
            "key": Node {
              "end": 26,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 2,
                },
                "start": Position {
                  "column": 8,
                  "line": 2,
                },
              },
              "name": "b",
              "start": 25,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 2,
              },
              "start": Position {
                "column": 8,
                "line": 2,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 25,
            "type": "Property",
            "value": Node {
              "end": 29,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 2,
                },
                "start": Position {
                  "column": 11,
                  "line": 2,
                },
              },
              "raw": "2",
              "start": 28,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 18,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 2: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"const key = 'a';\\\\n({a: 1, b: 2})[key];\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 1,
          },
          "start": Position {
            "column": 6,
            "line": 1,
          },
        },
        "name": "key",
        "tag": "name",
      },
      "tag": "constant_declaration",
      "value": "a",
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 2,
            },
            "start": Position {
              "column": 1,
              "line": 2,
            },
          },
          "pairs": Array [
            Array [
              "a",
              1,
            ],
            Array [
              Array [
                "b",
                2,
              ],
              null,
            ],
          ],
          "tag": "object_expression",
        },
        "property": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 2,
            },
            "start": Position {
              "column": 15,
              "line": 2,
            },
          },
          "name": "key",
          "tag": "name",
        },
        "tag": "property_access",
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"const key = 'a';\\\\\\\\n({a: 1, b: 2})[key];\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "const key = 'a';
({a: 1, b: 2})[key];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x.a = 3;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 20,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 13,
            "key": Node {
              "end": 10,
              "loc": SourceLocation {
                "end": Position {
                  "column": 10,
                  "line": 1,
                },
                "start": Position {
                  "column": 9,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 9,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 9,
            "type": "Property",
            "value": Node {
              "end": 13,
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 1,
                },
                "start": Position {
                  "column": 12,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 12,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 19,
            "key": Node {
              "end": 16,
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 15,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 15,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 1,
              },
              "start": Position {
                "column": 15,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 15,
            "type": "Property",
            "value": Node {
              "end": 19,
              "loc": SourceLocation {
                "end": Position {
                  "column": 19,
                  "line": 1,
                },
                "start": Position {
                  "column": 18,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 18,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 8,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
    NoDotAbbreviationError {
      "node": Node {
        "computed": false,
        "end": 25,
        "loc": SourceLocation {
          "end": Position {
            "column": 3,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Node {
          "end": 23,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "name": "x",
          "start": 22,
          "type": "Identifier",
        },
        "property": Node {
          "end": 25,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 2,
              "line": 2,
            },
          },
          "name": "a",
          "start": 24,
          "type": "Identifier",
        },
        "start": 22,
        "type": "MemberExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed
Line 2: Dot abbreviations are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nx.a = 3;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "x",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 8,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "tag": "name",
          },
          "property": "a",
          "tag": "property_access",
        },
        "tag": "property_assignment",
        "value": 3,
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let x = {a: 1, b: 2};\\\\\\\\nx.a = 3;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x.a = 3;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x['a'] = 3;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 20,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 13,
            "key": Node {
              "end": 10,
              "loc": SourceLocation {
                "end": Position {
                  "column": 10,
                  "line": 1,
                },
                "start": Position {
                  "column": 9,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 9,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 9,
            "type": "Property",
            "value": Node {
              "end": 13,
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 1,
                },
                "start": Position {
                  "column": 12,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 12,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 19,
            "key": Node {
              "end": 16,
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 15,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 15,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 1,
              },
              "start": Position {
                "column": 15,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 15,
            "type": "Property",
            "value": Node {
              "end": 19,
              "loc": SourceLocation {
                "end": Position {
                  "column": 19,
                  "line": 1,
                },
                "start": Position {
                  "column": 18,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 18,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 8,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nx['a'] = 3;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "x",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 11,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 6,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "tag": "name",
          },
          "property": "a",
          "tag": "property_access",
        },
        "tag": "property_assignment",
        "value": 3,
      },
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let x = {a: 1, b: 2};\\\\\\\\nx['a'] = 3;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
x['a'] = 3;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: fails a chapter below 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
const key = 'a';
x[key] = 3;",
  "displayResult": Array [],
  "errors": Array [
    DisallowedConstructError {
      "node": Node {
        "end": 20,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 13,
            "key": Node {
              "end": 10,
              "loc": SourceLocation {
                "end": Position {
                  "column": 10,
                  "line": 1,
                },
                "start": Position {
                  "column": 9,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 9,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 9,
            "type": "Property",
            "value": Node {
              "end": 13,
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 1,
                },
                "start": Position {
                  "column": 12,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 12,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 19,
            "key": Node {
              "end": 16,
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 15,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 15,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 1,
              },
              "start": Position {
                "column": 15,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 15,
            "type": "Property",
            "value": Node {
              "end": 19,
              "loc": SourceLocation {
                "end": Position {
                  "column": 19,
                  "line": 1,
                },
                "start": Position {
                  "column": 18,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 18,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 8,
        "type": "ObjectExpression",
      },
      "nodeType": "Object expressions",
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Object expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: parse passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse(\\"let x = {a: 1, b: 2};\\\\nconst key = 'a';\\\\nx[key] = 3;\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    Object {
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 4,
            "line": 1,
          },
        },
        "name": "x",
        "tag": "name",
      },
      "tag": "variable_declaration",
      "value": Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 8,
            "line": 1,
          },
        },
        "pairs": Array [
          Array [
            "a",
            1,
          ],
          Array [
            Array [
              "b",
              2,
            ],
            null,
          ],
        ],
        "tag": "object_expression",
      },
    },
    Array [
      Object {
        "loc": SourceLocation {
          "end": Position {
            "column": 16,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "name": Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 2,
            },
            "start": Position {
              "column": 6,
              "line": 2,
            },
          },
          "name": "key",
          "tag": "name",
        },
        "tag": "constant_declaration",
        "value": "a",
      },
      Array [
        Object {
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 3,
            },
            "start": Position {
              "column": 0,
              "line": 3,
            },
          },
          "object": Object {
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 3,
              },
              "start": Position {
                "column": 0,
                "line": 3,
              },
            },
            "object": Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 1,
                  "line": 3,
                },
                "start": Position {
                  "column": 0,
                  "line": 3,
                },
              },
              "name": "x",
              "tag": "name",
            },
            "property": Object {
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 3,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "name": "key",
              "tag": "name",
            },
            "tag": "property_access",
          },
          "tag": "property_assignment",
          "value": 3,
        },
        null,
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(parse, 1, 0, \\\\\\"let x = {a: 1, b: 2};\\\\\\\\nconst key = 'a';\\\\\\\\nx[key] = 3;\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30: passes 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = {a: 1, b: 2};
const key = 'a';
x[key] = 3;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
