// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cannot overwrite loop variables within a block: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
    let z = [];
    for (let x = 0; x < 2; x = x + 1) {
      x = 1;
    }
    return false;
}
test();",
  "displayResult": Array [],
  "errors": Array [
    ConstAssignment {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 4,
        },
        "start": Position {
          "column": 6,
          "line": 4,
        },
      },
      "name": "x",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 4: Cannot assign new value to constant x.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Error when accessing temporal dead zone: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
function f() {
  display(a);
  const a = 5;
}
f();",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 3,
        },
        "start": Position {
          "column": 10,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`In a block, every going-to-be-defined variable in the block cannot be accessed until it has been defined in the block.: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
{
  a + a;
  const a = 10;
}",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 3,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No hoisting of functions. Only the name is hoisted like let and const: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const v = f();
function f() {
  return 1;
}
v;",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 1,
        },
        "start": Position {
          "column": 10,
          "line": 1,
        },
      },
      "name": "f",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name f declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Shadowed variables may not be assigned to until declared in the current scope: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let variable = 1;
function test(){
  variable = 100;
  let variable = true;
  return variable;
}
test();",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "variable",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name variable not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`const uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  if(true) {
      const x = false;
  } else {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      const x = true;
      if (boolOrErr(true, 3, 2)) {
        const x = false;
      } else {
        const x = false;
      }
      return {
        isTail: false,
        value: x
      };
    }, \\"function test() {\\\\n  const x = true;\\\\n  if (true) {\\\\n    const x = false;\\\\n  } else {\\\\n    const x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 10, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for loop \`let\` variables are copied into the block scope: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let z = [];
  for (let x = 0; x < 10; x = x + 1) {
    z[x] = () => x;
  }
  return z[1]();
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      let z = [];
      for (let x = 0; x < 10; x = x + 1) {
        z[x] = wrap(() => ({
          isTail: false,
          value: x
        }), \\"() => x\\");
      }
      return {
        isTail: true,
        function: z[1],
        arguments: [],
        line: 6,
        column: 9
      };
    }, \\"function test() {\\\\n  let z = [];\\\\n  for (let x = 0; x < 10; x = x + 1) {\\\\n    z[x] = () => x;\\\\n  }\\\\n  return z[1]();\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 8, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  for (let x = 1; x > 0; x = x - 1) {
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      let x = true;
      for (let x = 1; x > 0; x = x - 1) {}
      return {
        isTail: false,
        value: x
      };
    }, \\"function test() {\\\\n  let x = true;\\\\n  for (let x = 1; x > 0; x = x - 1) {}\\\\n  return x;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 7, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`let uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  if(true) {
      let x = false;
  } else {
      let x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      let x = true;
      if (boolOrErr(true, 3, 2)) {
        let x = false;
      } else {
        let x = false;
      }
      return {
        isTail: false,
        value: x
      };
    }, \\"function test() {\\\\n  let x = true;\\\\n  if (true) {\\\\n    let x = false;\\\\n  } else {\\\\n    let x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 10, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`standalone block statements: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      const x = true;
      {
        const x = false;
      }
      return {
        isTail: false,
        value: x
      };
    }, \\"function test() {\\\\n  const x = true;\\\\n  {\\\\n    const x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 8, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`while loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  while (true) {
    let x = false;
    break;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      let x = true;
      while (true) {
        let x = false;
        break;
      }
      return {
        isTail: false,
        value: x
      };
    }, \\"function test() {\\\\n  let x = true;\\\\n  while (true) {\\\\n    let x = false;\\\\n    break;\\\\n  }\\\\n  return x;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 9, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
