// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cannot overwrite loop variables within a block: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
    let z = [];
    for (let x = 0; x < 2; x = x + 1) {
      x = 1;
    }
    return false;
}
test();",
  "displayResult": Array [],
  "errors": Array [
    NoAssignmentToForVariable {
      "node": Node {
        "end": 84,
        "left": Node {
          "end": 80,
          "loc": SourceLocation {
            "end": Position {
              "column": 7,
              "line": 4,
            },
            "start": Position {
              "column": 6,
              "line": 4,
            },
          },
          "name": "x",
          "start": 79,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 11,
            "line": 4,
          },
          "start": Position {
            "column": 6,
            "line": 4,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 84,
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 4,
            },
            "start": Position {
              "column": 10,
              "line": 4,
            },
          },
          "raw": "1",
          "start": 83,
          "type": "Literal",
          "value": 1,
        },
        "start": 79,
        "type": "AssignmentExpression",
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 4: Assignment to a for loop variable in the for loop is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Error when accessing temporal dead zone: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
function f() {
  display(a);
  const a = 5;
}
f();",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 3,
        },
        "start": Position {
          "column": 10,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`In a block, every going-to-be-defined variable in the block cannot be accessed until it has been defined in the block.: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
{
  a + a;
  const a = 10;
}",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 3,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No hoisting of functions. Only the name is hoisted like let and const: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const v = f();
function f() {
  return 1;
}
v;",
  "displayResult": Array [],
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 1,
        },
        "start": Position {
          "column": 10,
          "line": 1,
        },
      },
      "name": "f",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name f declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Shadowed variables may not be assigned to until declared in the current scope: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let variable = 1;
function test(){
  variable = 100;
  let variable = true;
  return variable;
}
test();",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "variable",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Name variable not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`const uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  if(true) {
      const x = false;
  } else {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          const x = true;
          if (boolOrErr(true, 3, 2)) {
            const x = false;
          } else {
            const x = false;
          }
          return {
            isTail: false,
            value: x
          };
        }, \\"function test() {\\\\n  const x = true;\\\\n  if (true) {\\\\n    const x = false;\\\\n  } else {\\\\n    const x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 10, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for loop \`let\` variables are copied into the block scope: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let z = [];
  for (let x = 0; x < 10; x = x + 1) {
    z[x] = () => x;
  }
  return z[1]();
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          let z = [];
          const startTime = runtime();
          for (let x = 0; boolOrErr(binaryOp(\\"<\\", x, 10, 3, 18), 3, 2); x = binaryOp(\\"+\\", x, 1, 3, 30)) {
            throwIfTimeout(startTime, runtime(), 3, 2);
            setProp(z, x, wrap(() => ({
              isTail: false,
              value: x
            }), \\"() => x\\"), 4, 4);
          }
          return {
            isTail: true,
            function: getProp(z, 1, 6, 9),
            functionName: \\"<anonymous>\\",
            arguments: [],
            line: 6,
            column: 9
          };
        }, \\"function test() {\\\\n  let z = [];\\\\n  for (let x = 0; x < 10; x = x + 1) {\\\\n    z[x] = () => x;\\\\n  }\\\\n  return z[1]();\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 8, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  for (let x = 1; x > 0; x = x - 1) {
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          let x = true;
          const startTime = runtime();
          for (let x = 1; boolOrErr(binaryOp(\\">\\", x, 0, 3, 18), 3, 2); x = binaryOp(\\"-\\", x, 1, 3, 29)) {
            throwIfTimeout(startTime, runtime(), 3, 2);
          }
          return {
            isTail: false,
            value: x
          };
        }, \\"function test() {\\\\n  let x = true;\\\\n  for (let x = 1; x > 0; x = x - 1) {}\\\\n  return x;\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 7, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`let uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  if(true) {
      let x = false;
  } else {
      let x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          let x = true;
          if (boolOrErr(true, 3, 2)) {
            let x = false;
          } else {
            let x = false;
          }
          return {
            isTail: false,
            value: x
          };
        }, \\"function test() {\\\\n  let x = true;\\\\n  if (true) {\\\\n    let x = false;\\\\n  } else {\\\\n    let x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 10, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`standalone block statements: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          const x = true;
          {
            const x = false;
          }
          return {
            isTail: false,
            value: x
          };
        }, \\"function test() {\\\\n  const x = true;\\\\n  {\\\\n    const x = false;\\\\n  }\\\\n  return x;\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 8, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`while loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  while (true) {
    let x = false;
    break;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const test = wrap(() => {
          let x = true;
          const startTime = runtime();
          while (boolOrErr(true, 3, 2)) {
            throwIfTimeout(startTime, runtime(), 3, 2);
            let x = false;
            break;
          }
          return {
            isTail: false,
            value: x
          };
        }, \\"function test() {\\\\n  let x = true;\\\\n  while (true) {\\\\n    let x = false;\\\\n    break;\\\\n  }\\\\n  return x;\\\\n}\\");
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 9, 0);\\");
        globals.variables.set(\\"test\\", {
          kind: \\"const\\",
          getValue: () => {
            return test;
          }
        });
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
