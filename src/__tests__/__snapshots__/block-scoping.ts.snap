// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cannot overwrite loop variables within a block: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
    let z = [];
    for (let x = 0; x < 2; x = x + 1) {
      x = 1;
    }
    return false;
}
test();",
  "displayResult": undefined,
  "errors": Array [
    ConstAssignment {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 4,
        },
        "start": Position {
          "column": 6,
          "line": 4,
        },
      },
      "name": "x",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Error when accessing temporal dead zone: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "const a = 1;
function f() {
  display(a);
  const a = 5;
}
f();",
  "displayResult": undefined,
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 3,
        },
        "start": Position {
          "column": 10,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`In a block, every going-to-be-defined variable in the block cannot be accessed until it has been defined in the block.: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "const a = 1;
{
  a + a;
  const a = 10;
}",
  "displayResult": undefined,
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 3,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "a",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`No hoisting of functions. Only the name is hoisted like let and const: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "const v = f();
function f() {
  return 1;
}
v;",
  "displayResult": undefined,
  "errors": Array [
    UnassignedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 1,
        },
        "start": Position {
          "column": 10,
          "line": 1,
        },
      },
      "name": "f",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Shadowed variables may not be assigned to until declared in the current scope: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "let variable = 1;
function test(){
  variable = 100;
  let variable = true;
  return variable;
}
test();",
  "displayResult": undefined,
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "variable",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`const uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  const x = true;
  if(true) {
      const x = false;
  } else {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`for loop \`let\` variables are copied into the block scope: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  let z = [];
  for (let x = 0; x < 10; x = x + 1) {
    z[x] = () => x;
  }
  return z[1]();
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 1,
  },
  "visualiseListResult": undefined,
}
`;

exports[`for loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  let x = true;
  for (let x = 1; x > 0; x = x - 1) {
  }
  return x;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`let uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  let x = true;
  if(true) {
      let x = false;
  } else {
      let x = false;
  }
  return x;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`standalone block statements: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  const x = true;
  {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`while loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  let x = true;
  while (true) {
    let x = false;
    break;
  }
  return x;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;
