// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Binary operations force arguments: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(x, y) {
  return x + y;
}
const res = add(((x) => x)(5), ((x) => x + 1)(9));
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 15,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Conditionals force test: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(a, b) {
  return (a ? true : head(null)) && (!b ? true : head(null));
}

const res = f(((b) => b)(true), ((b) => !b)(true));
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(a, b) {
  return a === 1 ? a : b;
}

function test2(a) {
  return test(a, head(null));
}

const res = test2(1);
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Thunks are memoized: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 1;

function incX() {
  x = x + 1;
  return x;
}

function square(n) {
  return n * n;
}

const res = square(incX());
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Thunks capture local environment: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function addSome(x) {
  const y = x + 1;
  return z => y + z;
}

const addSome2 = addSome(2);

const res = addSome2(3);
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Unary operations force argument: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function neg(b) {
  return !b;
}
const res = neg(((x) => x)(false));
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Unused arguments are not evaluated: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(a, b, c, d, e, f) {
  return a;
}
const res = test(1, head(null), 1 + '', !1, '' - 1, head(head(null)));
res;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
