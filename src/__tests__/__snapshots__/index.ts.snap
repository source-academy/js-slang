// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`__SOURCE__ functions now uses Source toString instead of native when +ed with another string 1`] = `
Object {
  "status": "finished",
  "value": "function pair(x, xs) {
	[implementation hidden]
}123",
}
`;

exports[`Allow display to return value it is displaying 1`] = `
Object {
  "status": "finished",
  "value": 50,
}
`;

exports[`Arrow function definition returns itself 1`] = `
Object {
  "status": "finished",
  "value": [Function],
}
`;

exports[`Arrow function definition returns itself 2`] = `[Function]`;

exports[`Arrow function infinite recursion with list args represents CallExpression well 1`] = `
"Line 2: Infinite recursion
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]]).."
`;

exports[`Cannot overwrite consts even when assignment is allowed 1`] = `"Line 4: Cannot assign new value to constant constant"`;

exports[`Deep object assignment and retrieval 1`] = `
Object {
  "status": "finished",
  "value": "string",
}
`;

exports[`Empty code returns undefined 1`] = `
Object {
  "status": "finished",
  "value": undefined,
}
`;

exports[`Factorial arrow function 1`] = `
Object {
  "status": "finished",
  "value": 120,
}
`;

exports[`Function infinite recursion with list args represents CallExpression well 1`] = `
"Line 2: Infinite recursion
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]]).."
`;

exports[`Multi-dimensional arrays display properly 1`] = `
Object {
  "status": "finished",
  "value": "[1, function a() {}, 3, [() => 1, 5]]",
}
`;

exports[`Multi-dimensional arrays display properly 2`] = `
Object {
  "status": "finished",
  "value": "[1, function a() {}, 3, [() => 1, 5]]",
}
`;

exports[`Simple arrow function infinite recursion represents CallExpression well 1`] = `
"Line 1: Infinite recursion
  x(x => x(x)(x))..  x(x => x(x)(x))..  x(x => x(x)(x)).."
`;

exports[`Simple function infinite recursion represents CallExpression well 1`] = `
"Line 1: Infinite recursion
  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
}).."
`;

exports[`Simple object assignment and retrieval 1`] = `
Object {
  "status": "finished",
  "value": 1,
}
`;

exports[`Single boolean self-evaluates to itself 1`] = `
Object {
  "status": "finished",
  "value": true,
}
`;

exports[`Single number self-evaluates to itself 1`] = `
Object {
  "status": "finished",
  "value": 42,
}
`;

exports[`Single string self-evaluates to itself 1`] = `
Object {
  "status": "finished",
  "value": "42",
}
`;

exports[`list now uses Source toString instead of native when +ed with another string 1`] = `
Object {
  "status": "finished",
  "value": "123[4, [5, [6, null]]]",
}
`;

exports[`parseError for missing semicolon 1`] = `"Line 1: Missing semicolon at the end of statement"`;
