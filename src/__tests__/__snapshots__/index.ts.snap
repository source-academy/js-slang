// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Allow display to return value it is displaying: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "25*(display(1+1));",
  "displayResult": Array [
    "2",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 50,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Arrays toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString([1, 2]);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "1,2",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(toString, 1, 0, [1, 2]);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Arrow function definition returns itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "() => 42;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": [Function],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Arrow function infinite recursion with list args represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = xs => append(f(xs), list());
f(list(1, 2));",
  "displayResult": Array [],
  "errors": Any<Array>,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]])..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Builtins hide their implementation when stringify: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(pair);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "function pair(left, right) {
	[implementation hidden]
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Builtins hide their implementation when toString: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString(pair);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "function pair(left, right) {
	[implementation hidden]
}",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(toString, 1, 0, pair);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Can overwrite lets when assignment is allowed: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test() {
  let variable = false;
  variable = true;
  return variable;
}
test();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const test = wrap(() => {
      let variable = false;
      variable = true;
      return {
        isTail: false,
        value: variable
      };
    }, \\"function test() {\\\\n  let variable = false;\\\\n  variable = true;\\\\n  return variable;\\\\n}\\");
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(test, 6, 0);\\");
    native.globals.set(\\"test\\", {
      kind: \\"const\\",
      value: test
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot overwrite consts even when assignment is allowed: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const constant = 3;
  constant = 4;
  return constant;
}
test();",
  "displayResult": Array [],
  "errors": Array [
    ConstAssignment {
      "location": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "constant",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Cannot assign new value to constant constant.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Deep object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = {};
o.a = {};
o.a.b = {};
o.a.b.c = \\"string\\";
o.a.b.c;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "string",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Empty code returns undefined: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Factorial arrow function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const fac = (i) => i === 1 ? 1 : i * fac(i-1);
fac(5);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 120,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Function infinite recursion with list args represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(xs) { return append(f(xs), list()); }
f(list(1, 2));",
  "displayResult": Array [],
  "errors": Any<Array>,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]])..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Functions passed into non-source functions remain equal: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function t(x, y, z) {
  return x + y + z;
}
identity(t) === t && t(1, 2, 3) === 6;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Objects toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString({a: 1});",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[object Object]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Simple arrow function infinite recursion represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "(x => x(x)(x))(x => x(x)(x));",
  "displayResult": Array [],
  "errors": Any<Array>,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  x(x => x(x)(x))..  x(x => x(x)(x))..  x(x => x(x)(x))..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Simple function infinite recursion represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) {return x(x)(x);} f(f);",
  "displayResult": Array [],
  "errors": Any<Array>,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
})..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Simple object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = {};
o.a = 1;
o.a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single boolean self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single number self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "42;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 42,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single string self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "'42';",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "42",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test apply_in_underlying_javascript: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "apply_in_underlying_javascript((a, b, c) => a * b * c, list(2, 5, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 60,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(apply_in_underlying_javascript, 1, 0, wrap((a, b, c) => ({   isTail: false,   value: a * b * c }), \\\\\\"(a, b, c) => a * b * c\\\\\\"), callIfFuncAndRightArgs(list, 1, 55, 2, 5, 6));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for different lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "!equal(list(1, 2), pair(1, 2)) && !equal(list(1, 2, 3), list(1, list(2, 3)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"boolOrErr(!callIfFuncAndRightArgs(equal, 1, 1, callIfFuncAndRightArgs(list, 1, 7, 1, 2), callIfFuncAndRightArgs(pair, 1, 19, 1, 2)), 1, 0) && !callIfFuncAndRightArgs(equal, 1, 35, callIfFuncAndRightArgs(list, 1, 41, 1, 2, 3), callIfFuncAndRightArgs(list, 1, 56, 1, callIfFuncAndRightArgs(list, 1, 64, 2, 3)));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(list(1, 2), pair(1, pair(2, null))) && equal(list(1, 2, 3, 4), list(1, 2, 3, 4));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"boolOrErr(callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(list, 1, 6, 1, 2), callIfFuncAndRightArgs(pair, 1, 18, 1, callIfFuncAndRightArgs(pair, 1, 26, 2, null))), 1, 0) && callIfFuncAndRightArgs(equal, 1, 45, callIfFuncAndRightArgs(list, 1, 51, 1, 2, 3, 4), callIfFuncAndRightArgs(list, 1, 69, 1, 2, 3, 4));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for primitives: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(1, 1) && equal(\\"str\\", \\"str\\") && equal(null, null) && !equal(1, 2) && !equal(\\"str\\", \\"\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"boolOrErr(boolOrErr(boolOrErr(boolOrErr(callIfFuncAndRightArgs(equal, 1, 0, 1, 1), 1, 0) && callIfFuncAndRightArgs(equal, 1, 15, \\\\\\"str\\\\\\", \\\\\\"str\\\\\\"), 1, 0) && callIfFuncAndRightArgs(equal, 1, 38, null, null), 1, 0) && !callIfFuncAndRightArgs(equal, 1, 60, 1, 2), 1, 0) && !callIfFuncAndRightArgs(equal, 1, 76, \\\\\\"str\\\\\\", \\\\\\"\\\\\\");\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`false if with empty else works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (false) {
} else {
}",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`false if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (false) {
} else {
  2;
}",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`functions toString (mostly) matches up with JS: expect to loosely match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) {
  return 5;
}
toString(a=>b) + toString(f);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "a => bfunction f(x) {
  return 5;
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`parseError for missing semicolon: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "42",
  "displayResult": Array [],
  "errors": Array [
    MissingSemicolonError {
      "location": Object {
        "end": Object {
          "column": 3,
          "line": 1,
        },
        "start": Position {
          "column": 2,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "parsedErrors": "Line 1: Missing semicolon at the end of statement",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitives toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString(true) +
toString(false) +
toString(1) +
toString(1.5) +
toString(null) +
toString(undefined) +
toString(NaN);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "truefalse11.5nullundefinedNaN",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(toString, 1, 0, true) + callIfFuncAndRightArgs(toString, 2, 0, false) + callIfFuncAndRightArgs(toString, 3, 0, 1) + callIfFuncAndRightArgs(toString, 4, 0, 1.5) + callIfFuncAndRightArgs(toString, 5, 0, null) + callIfFuncAndRightArgs(toString, 6, 0, undefined) + callIfFuncAndRightArgs(toString, 7, 0, NaN);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`test && shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && 1();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test || shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || 1();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false && false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false && true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false || false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false || false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false || true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false || true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false ? true : false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true && false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true && false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true && true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true && true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true || false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true || true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || true;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true ? true : false;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`true if with empty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) {
} else {
}",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`true if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) {
  1;
} else {
}",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
