// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Accessing array with nonexistent index returns undefined: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = [];
a[1];",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Accessing object with nonexistent property returns undefined: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = {};
o.nonexistent;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Allow display to return value it is displaying: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "25*(display(1+1));",
  "displayResult": Array [
    "2",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 50,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Array assignment has value: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let arr = [];
const a = arr[0] = 1;
const b = arr[1] = arr[2] = 4;
arr[0] === 1 && arr[1] === 4 && arr[2] === 4;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Arrays toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString([1, 2]);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "1,2",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Arrow function definition returns itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "() => 42;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": [Function],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Arrow function infinite recursion with list args represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = xs => append(f(xs), list());
f(list(1, 2));",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]])..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Assignment has value: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let a = 1;
let b = a = 4;
b === 4 && a === 4;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Builtins hide their implementation when stringify: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(pair);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "function pair(left, right) {
	[implementation hidden]
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Builtins hide their implementation when toString: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString(pair);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "function pair(left, right) {
	[implementation hidden]
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Can overwrite lets when assignment is allowed: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test() {
  let variable = false;
  variable = true;
  return variable;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot overwrite consts even when assignment is allowed: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const constant = 3;
  constant = 4;
  return constant;
}
test();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3: Cannot assign new value to constant constant.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Deep object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = {};
o.a = {};
o.a.b = {};
o.a.b.c = \\"string\\";
o.a.b.c;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "string",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Empty code returns undefined: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Factorial arrow function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const fac = (i) => i === 1 ? 1 : i * fac(i-1);
fac(5);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 120,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Find arrow function declaration 1`] = `
SourceLocation {
  "end": Position {
    "column": 9,
    "line": 2,
  },
  "start": Position {
    "column": 6,
    "line": 2,
  },
}
`;

exports[`Find arrow function param declaration 1`] = `
SourceLocation {
  "end": Position {
    "column": 21,
    "line": 1,
  },
  "start": Position {
    "column": 18,
    "line": 1,
  },
}
`;

exports[`Find declaration in init of for loop 1`] = `
SourceLocation {
  "end": Position {
    "column": 10,
    "line": 2,
  },
  "start": Position {
    "column": 9,
    "line": 2,
  },
}
`;

exports[`Find declaration of of variable in update statement of a for loop 1`] = `
SourceLocation {
  "end": Position {
    "column": 10,
    "line": 1,
  },
  "start": Position {
    "column": 9,
    "line": 1,
  },
}
`;

exports[`Find function declaration 1`] = `
SourceLocation {
  "end": Position {
    "column": 12,
    "line": 2,
  },
  "start": Position {
    "column": 9,
    "line": 2,
  },
}
`;

exports[`Find function param declaration 1`] = `
SourceLocation {
  "end": Position {
    "column": 21,
    "line": 1,
  },
  "start": Position {
    "column": 18,
    "line": 1,
  },
}
`;

exports[`Find no declaration from occurrence when there is no declaration (syntax error) 1`] = `null`;

exports[`Find no declaration from selection that does not refer to a declaration 1`] = `null`;

exports[`Find scope of a function declaration 1`] = `
Array [
  SourceLocation {
    "end": Position {
      "column": 5,
      "line": 8,
    },
    "start": Position {
      "column": 4,
      "line": 3,
    },
  },
]
`;

exports[`Find scope of a function parameter 1`] = `
Array [
  SourceLocation {
    "end": Position {
      "column": 9,
      "line": 7,
    },
    "start": Position {
      "column": 22,
      "line": 5,
    },
  },
]
`;

exports[`Find scope of a nested variable declaration 1`] = `
Array [
  SourceLocation {
    "end": Position {
      "column": 5,
      "line": 8,
    },
    "start": Position {
      "column": 4,
      "line": 3,
    },
  },
]
`;

exports[`Find scope of a variable declaration 1`] = `
Array [
  Object {
    "end": Position {
      "column": 4,
      "line": 3,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  Object {
    "end": Position {
      "column": 3,
      "line": 10,
    },
    "start": Position {
      "column": 5,
      "line": 8,
    },
  },
]
`;

exports[`Find scope of a variable declaration with more nesting 1`] = `
Array [
  Object {
    "end": Position {
      "column": 12,
      "line": 6,
    },
    "start": Position {
      "column": 4,
      "line": 3,
    },
  },
  Object {
    "end": Position {
      "column": 8,
      "line": 11,
    },
    "start": Position {
      "column": 13,
      "line": 8,
    },
  },
  Object {
    "end": Position {
      "column": 5,
      "line": 14,
    },
    "start": Position {
      "column": 9,
      "line": 13,
    },
  },
]
`;

exports[`Find scope of a variable declaration with multiple blocks 1`] = `
Array [
  Object {
    "end": Position {
      "column": 8,
      "line": 4,
    },
    "start": Position {
      "column": 4,
      "line": 2,
    },
  },
  Object {
    "end": Position {
      "column": 8,
      "line": 8,
    },
    "start": Position {
      "column": 9,
      "line": 6,
    },
  },
  Object {
    "end": Position {
      "column": 8,
      "line": 12,
    },
    "start": Position {
      "column": 9,
      "line": 10,
    },
  },
  Object {
    "end": Position {
      "column": 5,
      "line": 15,
    },
    "start": Position {
      "column": 9,
      "line": 14,
    },
  },
]
`;

exports[`Find variable declaration in block statement 1`] = `
SourceLocation {
  "end": Position {
    "column": 7,
    "line": 2,
  },
  "start": Position {
    "column": 6,
    "line": 2,
  },
}
`;

exports[`Find variable declaration in function scope from occurrence in function scope 1`] = `
SourceLocation {
  "end": Position {
    "column": 7,
    "line": 3,
  },
  "start": Position {
    "column": 6,
    "line": 3,
  },
}
`;

exports[`Find variable declaration in global scope 1`] = `
SourceLocation {
  "end": Position {
    "column": 5,
    "line": 1,
  },
  "start": Position {
    "column": 4,
    "line": 1,
  },
}
`;

exports[`Find variable declaration in global scope from occurrence in function scope 1`] = `
SourceLocation {
  "end": Position {
    "column": 5,
    "line": 1,
  },
  "start": Position {
    "column": 4,
    "line": 1,
  },
}
`;

exports[`Find variable declaration of same name as variable declaration in block statement 1`] = `
SourceLocation {
  "end": Position {
    "column": 5,
    "line": 5,
  },
  "start": Position {
    "column": 4,
    "line": 5,
  },
}
`;

exports[`Find variable declaration with same name as arrow function param declaration 1`] = `
SourceLocation {
  "end": Position {
    "column": 9,
    "line": 4,
  },
  "start": Position {
    "column": 6,
    "line": 4,
  },
}
`;

exports[`Find variable declaration with same name as init of for loop 1`] = `
SourceLocation {
  "end": Position {
    "column": 7,
    "line": 5,
  },
  "start": Position {
    "column": 6,
    "line": 5,
  },
}
`;

exports[`Function infinite recursion with list args represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(xs) { return append(f(xs), list()); }
f(list(1, 2));",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  f([1, [2, null]])..  f([1, [2, null]])..  f([1, [2, null]])..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Functions passed into non-source functions remain equal: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function t(x, y, z) {
  return x + y + z;
}
identity(t) === t && t(1, 2, 3) === 6;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Multiline string self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "\`1
1\`;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "1
1",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Objects toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString({a: 1});",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "[object Object]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Rest parameters work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function rest(a, b, ...c) {
  let sum = a + b;
  for (let i = 0; i < array_length(c); i = i + 1) {
    sum = sum + c[i];
  }
  return sum;
}
rest(1, 2); // no error
rest(1, 2, ...[3, 4, 5],  ...[6, 7], ...[]);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 28,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Simple arrow function infinite recursion represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "(x => x(x)(x))(x => x(x)(x));",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  x(x => x(x)(x))..  x(x => x(x)(x))..  x(x => x(x)(x))..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Simple function infinite recursion represents CallExpression well: expectParsedErrorNoErrorSnapshot 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) {return x(x)(x);} f(f);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Maximum call stack size exceeded
  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
})..  x(function f(x) {
  return x(x)(x);
})..",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Simple object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const o = {};
o.a = 1;
o.a;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single boolean self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single number self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "42;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 42,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Single string self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "'42';",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "42",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test apply_in_underlying_javascript: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "apply_in_underlying_javascript((a, b, c) => a * b * c, list(2, 5, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 60,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test context reuse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 0;
function f() {
  i = i + 1;
  return i;
}
i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test context reuse: expectResult 2`] = `
Object {
  "alertResult": Array [],
  "code": "i = 100; f();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 101,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test context reuse: expectResult 3`] = `
Object {
  "alertResult": Array [],
  "code": "f(); i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 102,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test context reuse: expectResult 4`] = `
Object {
  "alertResult": Array [],
  "code": "i;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 102,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for different lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "!equal(list(1, 2), pair(1, 2)) && !equal(list(1, 2, 3), list(1, list(2, 3)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(list(1, 2), pair(1, pair(2, null))) && equal(list(1, 2, 3, 4), list(1, 2, 3, 4));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Test equal for primitives: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(1, 1) && equal(\\"str\\", \\"str\\") && equal(null, null) && !equal(1, 2) && !equal(\\"str\\", \\"\\");",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`false if with empty else works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (false) {
} else {
}",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`false if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (false) {
} else {
  2;
}",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`functions toString (mostly) matches up with JS: expect to loosely match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) {
  return 5;
}
toString(a=>a) + toString(f);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "a => afunction f(x) {
  return 5;
}",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`parseError for missing semicolon: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "42",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing semicolon at the end of statement",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parseError for template literals with expressions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\`\${1}\`;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Expressions are not allowed in template literals (\`multiline strings\`)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitives toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "toString(true) +
toString(false) +
toString(1) +
toString(1.5) +
toString(null) +
toString(undefined) +
toString(NaN);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "truefalse11.5nullundefinedNaN",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test && shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && 1();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test || shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || 1();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false && false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false && true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false && true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false || false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false || false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false || true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false || true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test false conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "false ? true : false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true && false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true && false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true && true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true && true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true || false: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true || true: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true || true;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`test true conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": Array [],
  "code": "true ? true : false;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`true if with empty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) {
} else {
}",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`true if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) {
  1;
} else {
}",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
