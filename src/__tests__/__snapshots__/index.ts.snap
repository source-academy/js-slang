// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Allow display to return value it is displaying: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "25*(display(1+1));",
  "displayResult": "2",
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 50,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Arrays toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "\\"\\" + [1, 2];",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "1,2",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Arrow function definition returns itself: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "() => 42;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": [Function],
  },
  "visualiseListResult": undefined,
}
`;

exports[`Arrow function infinite recursion with list args represents CallExpression well: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "const f = xs => append(f(xs), list());
f(list(1, 2));",
  "displayResult": undefined,
  "errors": Array [
    MaximumStackLimitExceeded {
      "calls": Array [
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 24,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 1,
              },
              "start": Position {
                "column": 23,
                "line": 1,
              },
            },
            "name": "f",
            "start": 23,
            "type": "Identifier",
          },
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 23,
              "line": 1,
            },
          },
          "start": 23,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 24,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 1,
              },
              "start": Position {
                "column": 23,
                "line": 1,
              },
            },
            "name": "f",
            "start": 23,
            "type": "Identifier",
          },
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 23,
              "line": 1,
            },
          },
          "start": 23,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 24,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 1,
              },
              "start": Position {
                "column": 23,
                "line": 1,
              },
            },
            "name": "f",
            "start": 23,
            "type": "Identifier",
          },
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 23,
              "line": 1,
            },
          },
          "start": 23,
          "type": "CallExpression",
        },
      ],
      "customGenerator": Object {
        "ArrayExpression": [Function],
        "ArrayPattern": [Function],
        "ArrowFunctionExpression": [Function],
        "AssignmentExpression": [Function],
        "AssignmentPattern": [Function],
        "AwaitExpression": [Function],
        "BinaryExpression": [Function],
        "BlockStatement": [Function],
        "BreakStatement": [Function],
        "CallExpression": [Function],
        "ClassBody": [Function],
        "ClassDeclaration": [Function],
        "ClassExpression": [Function],
        "ConditionalExpression": [Function],
        "ContinueStatement": [Function],
        "DebuggerStatement": [Function],
        "DoWhileStatement": [Function],
        "EmptyStatement": [Function],
        "ExportAllDeclaration": [Function],
        "ExportDefaultDeclaration": [Function],
        "ExportNamedDeclaration": [Function],
        "ExpressionStatement": [Function],
        "ForInStatement": [Function],
        "ForOfStatement": [Function],
        "ForStatement": [Function],
        "FunctionDeclaration": [Function],
        "FunctionExpression": [Function],
        "Identifier": [Function],
        "IfStatement": [Function],
        "ImportDeclaration": [Function],
        "LabeledStatement": [Function],
        "Literal": [Function],
        "LogicalExpression": [Function],
        "MemberExpression": [Function],
        "MetaProperty": [Function],
        "MethodDefinition": [Function],
        "NewExpression": [Function],
        "ObjectExpression": [Function],
        "ObjectPattern": [Function],
        "Program": [Function],
        "Property": [Function],
        "RegExpLiteral": [Function],
        "RestElement": [Function],
        "ReturnStatement": [Function],
        "SequenceExpression": [Function],
        "SpreadElement": [Function],
        "Super": [Function],
        "SwitchStatement": [Function],
        "TaggedTemplateExpression": [Function],
        "TemplateLiteral": [Function],
        "ThisExpression": [Function],
        "ThrowStatement": [Function],
        "TryStatement": [Function],
        "UnaryExpression": [Function],
        "UpdateExpression": [Function],
        "VariableDeclaration": [Function],
        "VariableDeclarator": [Function],
        "WhileStatement": [Function],
        "WithStatement": [Function],
        "YieldExpression": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 1,
        },
        "start": Position {
          "column": 23,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Builtins hide their implementation when stringify: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "stringify(pair);",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "function pair(left, right) {
	[implementation hidden]
}",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Builtins hide their implementation when toString: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "\\"\\"+pair;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "function pair(left, right) {
	[implementation hidden]
}",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Can overwrite lets when assignment is allowed: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test() {
  let variable = false;
  variable = true;
  return variable;
}
test();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Cannot overwrite consts even when assignment is allowed: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "function test(){
  const constant = 3;
  constant = 4;
  return constant;
}
test();",
  "displayResult": undefined,
  "errors": Array [
    ConstAssignment {
      "location": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 3,
        },
        "start": Position {
          "column": 2,
          "line": 3,
        },
      },
      "name": "constant",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Deep object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "const o = {};
o.a = {};
o.a.b = {};
o.a.b.c = \\"string\\";
o.a.b.c;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "string",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Empty code returns undefined: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": undefined,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Factorial arrow function: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "const fac = (i) => i === 1 ? 1 : i * fac(i-1);
fac(5);",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 120,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Function infinite recursion with list args represents CallExpression well: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "function f(xs) { return append(f(xs), list()); }
f(list(1, 2));",
  "displayResult": undefined,
  "errors": Array [
    MaximumStackLimitExceeded {
      "calls": Array [
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 32,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 1,
              },
              "start": Position {
                "column": 31,
                "line": 1,
              },
            },
            "name": "f",
            "start": 31,
            "type": "Identifier",
          },
          "end": 36,
          "loc": SourceLocation {
            "end": Position {
              "column": 36,
              "line": 1,
            },
            "start": Position {
              "column": 31,
              "line": 1,
            },
          },
          "start": 31,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 32,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 1,
              },
              "start": Position {
                "column": 31,
                "line": 1,
              },
            },
            "name": "f",
            "start": 31,
            "type": "Identifier",
          },
          "end": 36,
          "loc": SourceLocation {
            "end": Position {
              "column": 36,
              "line": 1,
            },
            "start": Position {
              "column": 31,
              "line": 1,
            },
          },
          "start": 31,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
              "type": "Literal",
              "value": Array [
                1,
                Array [
                  2,
                  null,
                ],
              ],
            },
          ],
          "callee": Node {
            "end": 32,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 1,
              },
              "start": Position {
                "column": 31,
                "line": 1,
              },
            },
            "name": "f",
            "start": 31,
            "type": "Identifier",
          },
          "end": 36,
          "loc": SourceLocation {
            "end": Position {
              "column": 36,
              "line": 1,
            },
            "start": Position {
              "column": 31,
              "line": 1,
            },
          },
          "start": 31,
          "type": "CallExpression",
        },
      ],
      "customGenerator": Object {
        "ArrayExpression": [Function],
        "ArrayPattern": [Function],
        "ArrowFunctionExpression": [Function],
        "AssignmentExpression": [Function],
        "AssignmentPattern": [Function],
        "AwaitExpression": [Function],
        "BinaryExpression": [Function],
        "BlockStatement": [Function],
        "BreakStatement": [Function],
        "CallExpression": [Function],
        "ClassBody": [Function],
        "ClassDeclaration": [Function],
        "ClassExpression": [Function],
        "ConditionalExpression": [Function],
        "ContinueStatement": [Function],
        "DebuggerStatement": [Function],
        "DoWhileStatement": [Function],
        "EmptyStatement": [Function],
        "ExportAllDeclaration": [Function],
        "ExportDefaultDeclaration": [Function],
        "ExportNamedDeclaration": [Function],
        "ExpressionStatement": [Function],
        "ForInStatement": [Function],
        "ForOfStatement": [Function],
        "ForStatement": [Function],
        "FunctionDeclaration": [Function],
        "FunctionExpression": [Function],
        "Identifier": [Function],
        "IfStatement": [Function],
        "ImportDeclaration": [Function],
        "LabeledStatement": [Function],
        "Literal": [Function],
        "LogicalExpression": [Function],
        "MemberExpression": [Function],
        "MetaProperty": [Function],
        "MethodDefinition": [Function],
        "NewExpression": [Function],
        "ObjectExpression": [Function],
        "ObjectPattern": [Function],
        "Program": [Function],
        "Property": [Function],
        "RegExpLiteral": [Function],
        "RestElement": [Function],
        "ReturnStatement": [Function],
        "SequenceExpression": [Function],
        "SpreadElement": [Function],
        "Super": [Function],
        "SwitchStatement": [Function],
        "TaggedTemplateExpression": [Function],
        "TemplateLiteral": [Function],
        "ThisExpression": [Function],
        "ThrowStatement": [Function],
        "TryStatement": [Function],
        "UnaryExpression": [Function],
        "UpdateExpression": [Function],
        "VariableDeclaration": [Function],
        "VariableDeclarator": [Function],
        "WhileStatement": [Function],
        "WithStatement": [Function],
        "YieldExpression": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 36,
          "line": 1,
        },
        "start": Position {
          "column": 31,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Functions passed into non-source functions remain equal: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "function t(x, y, z) {
  return x + y + z;
}
identity(t) === t && t(1, 2, 3) === 6;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Objects toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "\\"\\" + ({a: 1});",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "[object Object]",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Simple arrow function infinite recursion represents CallExpression well: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "(x => x(x)(x))(x => x(x)(x));",
  "displayResult": undefined,
  "errors": Array [
    MaximumStackLimitExceeded {
      "calls": Array [
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "name": "x",
            "start": 20,
            "type": "Identifier",
          },
          "end": 24,
          "loc": SourceLocation {
            "end": Position {
              "column": 24,
              "line": 1,
            },
            "start": Position {
              "column": 20,
              "line": 1,
            },
          },
          "start": 20,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "name": "x",
            "start": 20,
            "type": "Identifier",
          },
          "end": 24,
          "loc": SourceLocation {
            "end": Position {
              "column": 24,
              "line": 1,
            },
            "start": Position {
              "column": 20,
              "line": 1,
            },
          },
          "start": 20,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "name": "x",
            "start": 20,
            "type": "Identifier",
          },
          "end": 24,
          "loc": SourceLocation {
            "end": Position {
              "column": 24,
              "line": 1,
            },
            "start": Position {
              "column": 20,
              "line": 1,
            },
          },
          "start": 20,
          "type": "CallExpression",
        },
      ],
      "customGenerator": Object {
        "ArrayExpression": [Function],
        "ArrayPattern": [Function],
        "ArrowFunctionExpression": [Function],
        "AssignmentExpression": [Function],
        "AssignmentPattern": [Function],
        "AwaitExpression": [Function],
        "BinaryExpression": [Function],
        "BlockStatement": [Function],
        "BreakStatement": [Function],
        "CallExpression": [Function],
        "ClassBody": [Function],
        "ClassDeclaration": [Function],
        "ClassExpression": [Function],
        "ConditionalExpression": [Function],
        "ContinueStatement": [Function],
        "DebuggerStatement": [Function],
        "DoWhileStatement": [Function],
        "EmptyStatement": [Function],
        "ExportAllDeclaration": [Function],
        "ExportDefaultDeclaration": [Function],
        "ExportNamedDeclaration": [Function],
        "ExpressionStatement": [Function],
        "ForInStatement": [Function],
        "ForOfStatement": [Function],
        "ForStatement": [Function],
        "FunctionDeclaration": [Function],
        "FunctionExpression": [Function],
        "Identifier": [Function],
        "IfStatement": [Function],
        "ImportDeclaration": [Function],
        "LabeledStatement": [Function],
        "Literal": [Function],
        "LogicalExpression": [Function],
        "MemberExpression": [Function],
        "MetaProperty": [Function],
        "MethodDefinition": [Function],
        "NewExpression": [Function],
        "ObjectExpression": [Function],
        "ObjectPattern": [Function],
        "Program": [Function],
        "Property": [Function],
        "RegExpLiteral": [Function],
        "RestElement": [Function],
        "ReturnStatement": [Function],
        "SequenceExpression": [Function],
        "SpreadElement": [Function],
        "Super": [Function],
        "SwitchStatement": [Function],
        "TaggedTemplateExpression": [Function],
        "TemplateLiteral": [Function],
        "ThisExpression": [Function],
        "ThrowStatement": [Function],
        "TryStatement": [Function],
        "UnaryExpression": [Function],
        "UpdateExpression": [Function],
        "VariableDeclaration": [Function],
        "VariableDeclarator": [Function],
        "WhileStatement": [Function],
        "WithStatement": [Function],
        "YieldExpression": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 24,
          "line": 1,
        },
        "start": Position {
          "column": 20,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Simple function infinite recursion represents CallExpression well: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "function f(x) {return x(x)(x);} f(f);",
  "displayResult": undefined,
  "errors": Array [
    MaximumStackLimitExceeded {
      "calls": Array [
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 23,
                "line": 1,
              },
              "start": Position {
                "column": 22,
                "line": 1,
              },
            },
            "name": "x",
            "start": 22,
            "type": "Identifier",
          },
          "end": 26,
          "loc": SourceLocation {
            "end": Position {
              "column": 26,
              "line": 1,
            },
            "start": Position {
              "column": 22,
              "line": 1,
            },
          },
          "start": 22,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 23,
                "line": 1,
              },
              "start": Position {
                "column": 22,
                "line": 1,
              },
            },
            "name": "x",
            "start": 22,
            "type": "Identifier",
          },
          "end": 26,
          "loc": SourceLocation {
            "end": Position {
              "column": 26,
              "line": 1,
            },
            "start": Position {
              "column": 22,
              "line": 1,
            },
          },
          "start": 22,
          "type": "CallExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "raw": [Function],
              "type": "Literal",
              "value": [Function],
            },
          ],
          "callee": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 23,
                "line": 1,
              },
              "start": Position {
                "column": 22,
                "line": 1,
              },
            },
            "name": "x",
            "start": 22,
            "type": "Identifier",
          },
          "end": 26,
          "loc": SourceLocation {
            "end": Position {
              "column": 26,
              "line": 1,
            },
            "start": Position {
              "column": 22,
              "line": 1,
            },
          },
          "start": 22,
          "type": "CallExpression",
        },
      ],
      "customGenerator": Object {
        "ArrayExpression": [Function],
        "ArrayPattern": [Function],
        "ArrowFunctionExpression": [Function],
        "AssignmentExpression": [Function],
        "AssignmentPattern": [Function],
        "AwaitExpression": [Function],
        "BinaryExpression": [Function],
        "BlockStatement": [Function],
        "BreakStatement": [Function],
        "CallExpression": [Function],
        "ClassBody": [Function],
        "ClassDeclaration": [Function],
        "ClassExpression": [Function],
        "ConditionalExpression": [Function],
        "ContinueStatement": [Function],
        "DebuggerStatement": [Function],
        "DoWhileStatement": [Function],
        "EmptyStatement": [Function],
        "ExportAllDeclaration": [Function],
        "ExportDefaultDeclaration": [Function],
        "ExportNamedDeclaration": [Function],
        "ExpressionStatement": [Function],
        "ForInStatement": [Function],
        "ForOfStatement": [Function],
        "ForStatement": [Function],
        "FunctionDeclaration": [Function],
        "FunctionExpression": [Function],
        "Identifier": [Function],
        "IfStatement": [Function],
        "ImportDeclaration": [Function],
        "LabeledStatement": [Function],
        "Literal": [Function],
        "LogicalExpression": [Function],
        "MemberExpression": [Function],
        "MetaProperty": [Function],
        "MethodDefinition": [Function],
        "NewExpression": [Function],
        "ObjectExpression": [Function],
        "ObjectPattern": [Function],
        "Program": [Function],
        "Property": [Function],
        "RegExpLiteral": [Function],
        "RestElement": [Function],
        "ReturnStatement": [Function],
        "SequenceExpression": [Function],
        "SpreadElement": [Function],
        "Super": [Function],
        "SwitchStatement": [Function],
        "TaggedTemplateExpression": [Function],
        "TemplateLiteral": [Function],
        "ThisExpression": [Function],
        "ThrowStatement": [Function],
        "TryStatement": [Function],
        "UnaryExpression": [Function],
        "UpdateExpression": [Function],
        "VariableDeclaration": [Function],
        "VariableDeclarator": [Function],
        "WhileStatement": [Function],
        "WithStatement": [Function],
        "YieldExpression": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 1,
        },
        "start": Position {
          "column": 22,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Simple object assignment and retrieval: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "const o = {};
o.a = 1;
o.a;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 1,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Single boolean self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "true;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Single number self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "42;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 42,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Single string self-evaluates to itself: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "'42';",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "42",
  },
  "visualiseListResult": undefined,
}
`;

exports[`Test apply_in_underlying_javascript: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "apply_in_underlying_javascript((a, b, c) => a * b * c, list(2, 5, 6));",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 60,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Test equal for different lists: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "!equal(list(1, 2), pair(1, 2)) && !equal(list(1, 2, 3), list(1, list(2, 3)));",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Test equal for lists: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "equal(list(1, 2), pair(1, pair(2, null))) && equal(list(1, 2, 3, 4), list(1, 2, 3, 4));",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`Test equal for primitives: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "equal(1, 1) && equal(\\"str\\", \\"str\\") && equal(null, null) && !equal(1, 2) && !equal(\\"str\\", \\"\\");",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`false if with empty else works: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "if (false) {
} else {
}",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": undefined,
  },
  "visualiseListResult": undefined,
}
`;

exports[`false if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "if (false) {
} else {
  2;
}",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 2,
  },
  "visualiseListResult": undefined,
}
`;

exports[`functions toString (mostly) matches up with JS: expect to loosely match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "function f(x) {
  return 5;
}
\\"\\" + (a=>b) + f;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "a => bfunction f(x) {
  return 5;
}",
  },
  "visualiseListResult": undefined,
}
`;

exports[`parseError for missing semicolon: expectError 1`] = `
Object {
  "alertResult": undefined,
  "code": "42",
  "displayResult": undefined,
  "errors": Array [
    MissingSemicolonError {
      "location": Object {
        "end": Object {
          "column": 3,
          "line": 1,
        },
        "start": Position {
          "column": 2,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Syntax",
    },
  ],
  "result": Object {
    "status": "error",
  },
  "visualiseListResult": undefined,
}
`;

exports[`primitives toString matches up with JS: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "\\"\\" + true + false + 1 + 1.5 + null + undefined + NaN;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": "truefalse11.5nullundefinedNaN",
  },
  "visualiseListResult": undefined,
}
`;

exports[`test && shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false && 1();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test || shortcircuiting: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true || 1();",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test false && false: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false && false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test false && true: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false && true;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test false || false: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false || false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test false || true: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false || true;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test false conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "false ? true : false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test true && false: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true && false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": false,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test true && true: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true && true;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test true || false: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true || false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test true || true: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true || true;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`test true conditional expression: expect to match JS 1`] = `
Object {
  "alertResult": undefined,
  "code": "true ? true : false;",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": true,
  },
  "visualiseListResult": undefined,
}
`;

exports[`true if with empty if works: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "if (true) {
} else {
}",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": undefined,
  },
  "visualiseListResult": undefined,
}
`;

exports[`true if with nonempty if works: expectResult 1`] = `
Object {
  "alertResult": undefined,
  "code": "if (true) {
  1;
} else {
}",
  "displayResult": undefined,
  "errors": Array [],
  "result": Object {
    "status": "finished",
    "value": 1,
  },
  "visualiseListResult": undefined,
}
`;
