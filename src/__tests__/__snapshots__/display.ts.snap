// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`display can be used to display (escaped) strings: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(\\"Tom's assisstant said: \\\\\\"tuna.\\\\\\"\\");",
  "displayResult": Array [
    "\\"Tom's assisstant said: \\\\\\"tuna.\\\\\\"\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "Tom's assisstant said: \\"tuna.\\"",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 0, \\\\\\"Tom's assisstant said: \\\\\\\\\\\\\\"tuna.\\\\\\\\\\\\\\"\\\\\\");\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display arrays: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display([1, 2, [4, 5]]);",
  "displayResult": Array [
    "[1, 2, [4, 5]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    2,
    Array [
      4,
      5,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 0, [1, 2, [4, 5]]);\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display functions: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(x => x); display((x, y) => x + y);",
  "displayResult": Array [
    "x => x",
    "(x, y) => x + y",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": [Function],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display funny numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(1e38); display(NaN); display(Infinity);",
  "displayResult": Array [
    "1e+38",
    "NaN",
    "Infinity",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": Infinity,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display, 1, 0, 1e38);
    callIfFuncAndRightArgs(display, 1, 15, NaN);
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 29, Infinity);\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display lists: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(list(1, 2));",
  "displayResult": Array [
    "[1, [2, null]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    Array [
      2,
      null,
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 0, callIfFuncAndRightArgs(list, 1, 8, 1, 2));\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(0);",
  "displayResult": Array [
    "0",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 0, 0);\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display can be used to display objects: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display({a: 1, b: 2, c: {d: 3}});",
  "displayResult": Array [
    "{\\"a\\": 1, \\"b\\": 2, \\"c\\": {\\"d\\": 3}}",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": Object {
    "a": 1,
    "b": 2,
    "c": Object {
      "d": 3,
    },
  },
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display second argument can be a string: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(31072020, \\"my_first_String\\");",
  "displayResult": Array [
    "my_first_String 31072020",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 31072020,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(display, 1, 0, 31072020, \\\\\\"my_first_String\\\\\\");\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;

exports[`display throw error if second argument is non-string when used: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(31072020, 0xDEADC0DE);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [TypeError: display expects the second argument to be a string],
      "location": SourceLocation {
        "end": Position {
          "column": 29,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: TypeError: display expects the second argument to be a string",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`raw_display can be used to display (unescaped) strings directly: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "raw_display(\\"Tom's assisstant said: \\\\\\"tuna.\\\\\\"\\");",
  "displayResult": Array [
    "Tom's assisstant said: \\"tuna.\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "Tom's assisstant said: \\"tuna.\\"",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(raw_display, 1, 0, \\\\\\"Tom's assisstant said: \\\\\\\\\\\\\\"tuna.\\\\\\\\\\\\\\"\\\\\\");\\");
  }
}
forceIt(lastStatementResult);
",
  "visualiseListResult": Array [],
}
`;
