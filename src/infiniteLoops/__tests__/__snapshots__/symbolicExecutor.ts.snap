// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`nested conditional return 1`] = `
Object {
  "symbols": Array [
    Object {
      "alternate": Object {
        "args": Array [
          Object {
            "type": "LiteralValueSymbol",
            "value": 4,
          },
        ],
        "name": "f",
        "type": "FunctionSymbol",
      },
      "consequent": Object {
        "alternate": Object {
          "alternate": Object {
            "type": "TerminateSymbol",
          },
          "consequent": Object {
            "args": Array [
              Object {
                "type": "LiteralValueSymbol",
                "value": 2,
              },
            ],
            "name": "g",
            "type": "FunctionSymbol",
          },
          "test": Object {
            "constant": 2,
            "direction": -1,
            "name": "x",
            "type": "InequalitySymbol",
          },
          "type": "BranchSymbol",
        },
        "consequent": Object {
          "type": "TerminateSymbol",
        },
        "test": Object {
          "constant": 5,
          "direction": 1,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "type": "BranchSymbol",
      },
      "test": Object {
        "constant": 0,
        "direction": 0,
        "name": "x",
        "type": "InequalitySymbol",
      },
      "type": "BranchSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`sym tree for fib function 1`] = `
Object {
  "symbols": Array [
    Object {
      "alternate": Object {
        "symbols": Array [
          Object {
            "symbols": Array [
              Object {
                "args": Array [
                  Object {
                    "constant": -1,
                    "isPositive": true,
                    "name": "x",
                    "type": "NumberSymbol",
                  },
                ],
                "name": "fib",
                "type": "FunctionSymbol",
              },
              Object {
                "args": Array [
                  Object {
                    "constant": -2,
                    "isPositive": true,
                    "name": "x",
                    "type": "NumberSymbol",
                  },
                ],
                "name": "fib",
                "type": "FunctionSymbol",
              },
            ],
            "type": "SequenceSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "consequent": Object {
        "symbols": Array [
          Object {
            "type": "TerminateSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "test": Object {
        "conjunction": false,
        "left": Object {
          "constant": 0,
          "direction": 0,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "right": Object {
          "constant": 1,
          "direction": 0,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "type": "LogicalSymbol",
      },
      "type": "BranchSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`sym tree with conditional expr 1`] = `
Object {
  "symbols": Array [
    Object {
      "alternate": Object {
        "args": Array [
          Object {
            "constant": -1,
            "isPositive": true,
            "name": "x",
            "type": "NumberSymbol",
          },
        ],
        "name": "f",
        "type": "FunctionSymbol",
      },
      "consequent": Object {
        "type": "TerminateSymbol",
      },
      "test": Object {
        "constant": 1,
        "direction": 0,
        "name": "x",
        "type": "InequalitySymbol",
      },
      "type": "BranchSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`test function with no return or other calls 1`] = `
Object {
  "symbols": Array [
    Object {
      "type": "LiteralValueSymbol",
      "value": 2,
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`test function with skip symbols 1`] = `
Object {
  "symbols": Array [
    Object {
      "alternate": Object {
        "symbols": Array [
          Object {
            "type": "SkipSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "consequent": Object {
        "symbols": Array [
          Object {
            "type": "TerminateSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "test": Object {
        "args": Array [
          Object {
            "constant": 0,
            "isPositive": true,
            "name": "x",
            "type": "NumberSymbol",
          },
        ],
        "name": "g",
        "type": "FunctionSymbol",
      },
      "type": "BranchSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`test variable declaration and global consts 1`] = `
Object {
  "symbols": Array [
    Object {
      "type": "UnusedSymbol",
    },
    Object {
      "alternate": Object {
        "symbols": Array [
          Object {
            "args": Array [
              Object {
                "type": "SkipSymbol",
              },
            ],
            "name": "f",
            "type": "FunctionSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "consequent": Object {
        "symbols": Array [
          Object {
            "type": "TerminateSymbol",
          },
        ],
        "type": "SequenceSymbol",
      },
      "test": Object {
        "type": "SkipSymbol",
      },
      "type": "BranchSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`testing arithmetic 1`] = `
Object {
  "symbols": Array [
    Object {
      "constant": -0,
      "isPositive": true,
      "name": "x",
      "type": "NumberSymbol",
    },
    Object {
      "type": "LiteralValueSymbol",
      "value": -1,
    },
    Object {
      "constant": 1,
      "isPositive": true,
      "name": "x",
      "type": "NumberSymbol",
    },
    Object {
      "constant": 1,
      "isPositive": true,
      "name": "x",
      "type": "NumberSymbol",
    },
    Object {
      "constant": 1,
      "isPositive": true,
      "name": "x",
      "type": "NumberSymbol",
    },
    Object {
      "constant": -1,
      "isPositive": true,
      "name": "x",
      "type": "NumberSymbol",
    },
    Object {
      "type": "UnusedSymbol",
    },
    Object {
      "type": "SkipSymbol",
    },
    Object {
      "args": Array [
        Object {
          "constant": 0,
          "isPositive": true,
          "name": "x",
          "type": "NumberSymbol",
        },
      ],
      "name": "f",
      "type": "FunctionSymbol",
    },
    Object {
      "args": Array [
        Object {
          "constant": 0,
          "isPositive": true,
          "name": "x",
          "type": "NumberSymbol",
        },
      ],
      "name": "f",
      "type": "FunctionSymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;

exports[`testing inequalities 1`] = `
Object {
  "symbols": Array [
    Object {
      "constant": 1,
      "direction": -1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 1,
      "direction": 1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 2,
      "direction": -1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 2,
      "direction": 1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 1,
      "direction": 1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 1,
      "direction": -1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 0,
      "direction": 1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "constant": 0,
      "direction": -1,
      "name": "x",
      "type": "InequalitySymbol",
    },
    Object {
      "conjunction": true,
      "left": Object {
        "conjunction": false,
        "left": Object {
          "constant": 1,
          "direction": 1,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "right": Object {
          "constant": 1,
          "direction": -1,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "type": "LogicalSymbol",
      },
      "right": Object {
        "conjunction": false,
        "left": Object {
          "constant": 1,
          "direction": 1,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "right": Object {
          "constant": 1,
          "direction": -1,
          "name": "x",
          "type": "InequalitySymbol",
        },
        "type": "LogicalSymbol",
      },
      "type": "LogicalSymbol",
    },
    Object {
      "conjunction": false,
      "left": Object {
        "constant": 1,
        "direction": 0,
        "name": "x",
        "type": "InequalitySymbol",
      },
      "right": Object {
        "constant": 1,
        "direction": 0,
        "name": "x",
        "type": "InequalitySymbol",
      },
      "type": "LogicalSymbol",
    },
    Object {
      "constant": 1,
      "direction": 1,
      "name": "x",
      "type": "InequalitySymbol",
    },
  ],
  "type": "SequenceSymbol",
}
`;
