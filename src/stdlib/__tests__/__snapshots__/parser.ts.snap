// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parses arrow function assignments properly 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"const y = x => x + 1;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null ] ],
[ [ \\"function_definition\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    null ],
  [ [ \\"return_statement\\",
    [ [ \\"application\\",
      [ [ \\"name\\",
        [ \\"+\\",
        null ] ],
      [ [ [ \\"name\\",
          [ \\"x\\",
          null ] ],
        [ 1,
        null ] ],
      null ] ] ],
    null ] ],
  null ] ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"const y = x => x + 1;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses arrow function expressions properly 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"x => x + 1;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"function_definition\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null ] ],
  null ],
[ [ \\"return_statement\\",
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"+\\",
      null ] ],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null ] ],
      [ 1,
      null ] ],
    null ] ] ],
  null ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"x => x + 1;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses assignment statements 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"x = 5; x = x; if (true) { x = 5; } else {}\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    [ 5,
    null ] ] ],
  [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    null ] ] ],
  [ [ \\"conditional_statement\\",
    [ true,
    [ [ \\"block\\",
      [ [ \\"assignment\\",
        [ [ \\"name\\",
          [ \\"x\\",
          null ] ],
        [ 5,
        null ] ] ],
      null ] ],
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ null,
        null ] ],
      null ] ],
    null ] ] ] ],
  null ] ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"x = 5; x = x; if (true) { x = 5; } else {}\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses declaration statements 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"const x = 5; let y = x;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"constant_declaration\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    [ 5,
    null ] ] ],
  [ [ \\"variable_declaration\\",
    [ [ \\"name\\",
      [ \\"y\\",
      null ] ],
    [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    null ] ] ],
  null ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"const x = 5; let y = x;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses empty program 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ null,
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses fibonacci 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"constant_declaration\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null ] ],
    [ [ \\"function_definition\\",
      [ [ [ \\"name\\",
          [ \\"x\\",
          null ] ],
        null ],
      [ [ \\"return_statement\\",
        [ [ \\"conditional_expression\\",
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"<=\\",
              null ] ],
            [ [ [ \\"name\\",
                [ \\"x\\",
                null ] ],
              [ 1,
              null ] ],
            null ] ] ],
          [ [ \\"name\\",
            [ \\"x\\",
            null ] ],
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"+\\",
              null ] ],
            [ [ [ \\"application\\",
                [ [ \\"name\\",
                  [ \\"fib\\",
                  null ] ],
                [ [ [ \\"application\\",
                    [ [ \\"name\\",
                      [ \\"-\\",
                      null ] ],
                    [ [ [ \\"name\\",
                        [ \\"x\\",
                        null ] ],
                      [ 1,
                      null ] ],
                    null ] ] ],
                  null ],
                null ] ] ],
              [ [ \\"application\\",
                [ [ \\"name\\",
                  [ \\"fib\\",
                  null ] ],
                [ [ [ \\"application\\",
                    [ [ \\"name\\",
                      [ \\"-\\",
                      null ] ],
                    [ [ [ \\"name\\",
                        [ \\"x\\",
                        null ] ],
                      [ 2,
                      null ] ],
                    null ] ] ],
                  null ],
                null ] ] ],
              null ] ],
            null ] ] ],
          null ] ] ] ],
        null ] ],
      null ] ] ],
    null ] ] ],
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null ] ],
    [ [ 4,
      null ],
    null ] ] ],
  null ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses function calls 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"f(x); thrice(thrice)(plus_one)(0);\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"f\\",
      null ] ],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null ] ],
      null ],
    null ] ] ],
  [ [ \\"application\\",
    [ [ \\"application\\",
      [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"thrice\\",
          null ] ],
        [ [ [ \\"name\\",
            [ \\"thrice\\",
            null ] ],
          null ],
        null ] ] ],
      [ [ [ \\"name\\",
          [ \\"plus_one\\",
          null ] ],
        null ],
      null ] ] ],
    [ [ 0,
      null ],
    null ] ] ],
  null ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"f(x); thrice(thrice)(plus_one)(0);\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses if statements 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"if (true) { hi; } else { haha; } if (false) {} else {}\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"conditional_statement\\",
    [ true,
    [ [ \\"block\\",
      [ [ \\"name\\",
        [ \\"hi\\",
        null ] ],
      null ] ],
    [ [ \\"block\\",
      [ [ \\"name\\",
        [ \\"haha\\",
        null ] ],
      null ] ],
    null ] ] ] ],
  [ [ \\"conditional_statement\\",
    [ false,
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ null,
        null ] ],
      null ] ],
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ null,
        null ] ],
      null ] ],
    null ] ] ] ],
  null ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"if (true) { hi; } else { haha; } if (false) {} else {}\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses infix expressions 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"3 + 5 === 8 || !true && false;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"boolean_operation\\",
[ [ \\"name\\",
  [ \\"||\\",
  null ] ],
[ [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"===\\",
      null ] ],
    [ [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"+\\",
          null ] ],
        [ [ 3,
          [ 5,
          null ] ],
        null ] ] ],
      [ 8,
      null ] ],
    null ] ] ],
  [ [ \\"boolean_operation\\",
    [ [ \\"name\\",
      [ \\"&&\\",
      null ] ],
    [ [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"!\\",
          null ] ],
        [ [ true,
          null ],
        null ] ] ],
      [ false,
      null ] ],
    null ] ] ],
  null ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"3 + 5 === 8 || !true && false;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses literals 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"3; true; false; ''; \\\\\\"\\\\\\"; 'bob'; 1; 20;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ 3,
  [ true,
  [ false,
  [ \\"\\",
  [ \\"\\",
  [ \\"bob\\",
  [ 1,
  [ 20,
  null ] ] ] ] ] ] ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"3; true; false; ''; \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"; 'bob'; 1; 20;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses loops 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse( \\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"while_loop\\",
    [ true,
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ [ [ \\"continue_statement\\",
            null ],
          [ [ \\"break_statement\\",
            null ],
          null ] ],
        null ] ],
      null ] ],
    null ] ] ],
  [ [ \\"for_loop\\",
    [ [ \\"variable_declaration\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null ] ],
      [ 0,
      null ] ] ],
    [ [ \\"application\\",
      [ [ \\"name\\",
        [ \\"<\\",
        null ] ],
      [ [ [ \\"name\\",
          [ \\"i\\",
          null ] ],
        [ 1,
        null ] ],
      null ] ] ],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null ] ],
      [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"+\\",
          null ] ],
        [ [ [ \\"name\\",
            [ \\"i\\",
            null ] ],
          [ 1,
          null ] ],
        null ] ] ],
      null ] ] ],
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ [ [ \\"continue_statement\\",
            null ],
          [ [ \\"break_statement\\",
            null ],
          null ] ],
        null ] ],
      null ] ],
    null ] ] ] ] ],
  [ [ \\"for_loop\\",
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null ] ],
      [ 0,
      null ] ] ],
    [ [ \\"application\\",
      [ [ \\"name\\",
        [ \\"<\\",
        null ] ],
      [ [ [ \\"name\\",
          [ \\"i\\",
          null ] ],
        [ 1,
        null ] ],
      null ] ] ],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null ] ],
      [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"+\\",
          null ] ],
        [ [ [ \\"name\\",
            [ \\"i\\",
            null ] ],
          [ 1,
          null ] ],
        null ] ] ],
      null ] ] ],
    [ [ \\"block\\",
      [ [ \\"sequence\\",
        [ [ [ \\"continue_statement\\",
            null ],
          [ [ \\"break_statement\\",
            null ],
          null ] ],
        null ] ],
      null ] ],
    null ] ] ] ] ],
  null ] ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses multi-argument arrow function assignments properly 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"const y = (x, y) => x + 1;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null ] ],
[ [ \\"function_definition\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null ] ],
    [ [ \\"name\\",
      [ \\"y\\",
      null ] ],
    null ] ],
  [ [ \\"return_statement\\",
    [ [ \\"application\\",
      [ [ \\"name\\",
        [ \\"+\\",
        null ] ],
      [ [ [ \\"name\\",
          [ \\"x\\",
          null ] ],
        [ 1,
        null ] ],
      null ] ] ],
    null ] ],
  null ] ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"const y = (x, y) => x + 1;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses multi-argument arrow function expressions properly 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"function_definition\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null ] ],
  [ [ \\"name\\",
    [ \\"y\\",
    null ] ],
  null ] ],
[ [ \\"return_statement\\",
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"+\\",
      null ] ],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null ] ],
      [ 1,
      null ] ],
    null ] ] ],
  null ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"(x, y) => x + 1;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses multi-argument arrow function expressions properly 2`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"function_definition\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null ] ],
  [ [ \\"name\\",
    [ \\"y\\",
    null ] ],
  null ] ],
[ [ \\"return_statement\\",
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"+\\",
      null ] ],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null ] ],
      [ 1,
      null ] ],
    null ] ] ],
  null ] ],
null ] ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"(x, y) => x + 1;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses name expression 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"x;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"name\\",
[ \\"x\\",
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"x;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses name expressions 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"x; moreNames; undefined;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null ] ],
  [ [ \\"name\\",
    [ \\"moreNames\\",
    null ] ],
  [ [ \\"name\\",
    [ \\"undefined\\",
    null ] ],
  null ] ] ],
null ] ]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stringify, 1, 0, callIfFuncAndRightArgs(parse, 1, 10, \\\\\\"x; moreNames; undefined;\\\\\\"), undefined, 2);\\");
      }
    }
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`Parses object notation 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"let x = {a: 5, b: 10, 'key': value};\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"variable_declaration\\",
[ [ \\"name\\",
  [ \\"x\\",
  null ] ],
[ [ \\"object_expression\\",
  [ [ [ [ \\"property\\",
        [ \\"a\\",
        null ] ],
      5 ],
    [ [ [ \\"property\\",
        [ \\"b\\",
        null ] ],
      10 ],
    [ [ \\"key\\",
      [ \\"name\\",
      [ \\"value\\",
      null ] ] ],
    null ] ] ],
  null ] ],
null ] ] ]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Parses property access 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"a[b]; a.b; a[5]; a['b'];\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null ] ],
    [ [ \\"property\\",
      [ \\"b\\",
      null ] ],
    null ] ] ],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null ] ],
    [ [ \\"property\\",
      [ \\"b\\",
      null ] ],
    null ] ] ],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null ] ],
    [ 5,
    null ] ] ],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null ] ],
    [ \\"b\\",
    null ] ] ],
  null ] ] ] ],
null ] ]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Parses property assignment 1`] = `
Object {
  "alertResult": Array [],
  "code": "stringify(parse(\\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\\"), undefined, 2);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[ \\"sequence\\",
[ [ [ \\"array_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null ] ],
      [ [ \\"property\\",
        [ \\"b\\",
        null ] ],
      null ] ] ],
    [ 5,
    null ] ] ],
  [ [ \\"array_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null ] ],
      [ [ \\"property\\",
        [ \\"b\\",
        null ] ],
      null ] ] ],
    [ [ \\"name\\",
      [ \\"value\\",
      null ] ],
    null ] ] ],
  [ [ \\"array_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null ] ],
      [ 5,
      null ] ] ],
    [ \\"value\\",
    null ] ] ],
  [ [ \\"array_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null ] ],
      [ \\"b\\",
      null ] ] ],
    [ 42,
    null ] ] ],
  null ] ] ] ],
null ] ]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
