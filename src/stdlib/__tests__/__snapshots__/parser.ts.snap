// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parses arrow function assignments properly 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 56,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 39,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 39,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"const y = x => x + 1;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "const y = x => x + 1;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 40,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 40,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 51,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 51,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 42,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 42,
                  "type": "Identifier",
                },
                Node {
                  "end": 54,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 54,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 53,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 53,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 55,
              "loc": SourceLocation {
                "end": Position {
                  "column": 55,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 56,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 56,
        "loc": SourceLocation {
          "end": Position {
            "column": 56,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"const y = x => x + 1;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 56,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 39,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 39,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"const y = x => x + 1;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "const y = x => x + 1;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 40,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 40,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 51,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 51,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 42,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 42,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 54,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 54,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 53,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 53,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 55,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 55,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 56,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 56,
          "loc": SourceLocation {
            "end": Position {
              "column": 56,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"const y = x => x + 1;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null]],
[ [ \\"lambda_expression\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"+\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    null]],
  null]]],
null]]]",
  },
}
`;

exports[`Parses arrow function expressions properly 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 46,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 29,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 29,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"x => x + 1;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "x => x + 1;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 30,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 30,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 41,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 41,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 32,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 32,
                  "type": "Identifier",
                },
                Node {
                  "end": 44,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 44,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 43,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 43,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 45,
              "loc": SourceLocation {
                "end": Position {
                  "column": 45,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 46,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 46,
        "loc": SourceLocation {
          "end": Position {
            "column": 46,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"x => x + 1;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 46,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 29,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 29,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"x => x + 1;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "x => x + 1;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 30,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 30,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 41,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 41,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 32,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 32,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 44,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 44,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 43,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 43,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 45,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 45,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 46,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 46,
          "loc": SourceLocation {
            "end": Position {
              "column": 46,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"x => x + 1;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"lambda_expression\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  null],
[ [ \\"return_statement\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 1,
      null]],
    null]]]],
  null]],
null]]]",
  },
}
`;

exports[`Parses assignment expressions 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 45,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 28,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 28,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"x = y = x;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "x = y = x;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 29,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 29,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 40,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 40,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 31,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 31,
                  "type": "Identifier",
                },
                Node {
                  "end": 43,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 43,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 42,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 42,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 44,
              "loc": SourceLocation {
                "end": Position {
                  "column": 44,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 45,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 45,
        "loc": SourceLocation {
          "end": Position {
            "column": 45,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"x = y = x;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 45,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 28,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 28,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"x = y = x;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "x = y = x;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 29,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 29,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 40,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 40,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 31,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 31,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 43,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 43,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 42,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 42,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 44,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 44,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 45,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 45,
          "loc": SourceLocation {
            "end": Position {
              "column": 45,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"x = y = x;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"assignment\\",
[ [ \\"name\\",
  [ \\"x\\",
  null]],
[ [ \\"assignment\\",
  [ [ \\"name\\",
    [ \\"y\\",
    null]],
  [ [ \\"name\\",
    [ \\"x\\",
    null]],
  null]]],
null]]]",
  },
}
`;

exports[`Parses assignment statements 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 77,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 60,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 60,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"x = 5; x = x; if (true) { x = 5; } else {}\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "x = 5; x = x; if (true) { x = 5; } else {}",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 61,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 61,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 72,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 72,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 63,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 63,
                  "type": "Identifier",
                },
                Node {
                  "end": 75,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 75,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 74,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 74,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 76,
              "loc": SourceLocation {
                "end": Position {
                  "column": 76,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 77,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 77,
        "loc": SourceLocation {
          "end": Position {
            "column": 77,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"x = 5; x = x; if (true) { x = 5; } else {}\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 77,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 60,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 60,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"x = 5; x = x; if (true) { x = 5; } else {}\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "x = 5; x = x; if (true) { x = 5; } else {}",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 61,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 61,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 72,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 72,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 63,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 63,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 75,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 75,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 74,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 74,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 76,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 76,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 77,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 77,
          "loc": SourceLocation {
            "end": Position {
              "column": 77,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"x = 5; x = x; if (true) { x = 5; } else {}\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null]]],
  [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    null]]]],
  null]]],
null]]",
  },
}
`;

exports[`Parses declaration statements 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 58,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 41,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 41,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"const x = 5; let y = x;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "const x = 5; let y = x;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 42,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 42,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 53,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 53,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 44,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 44,
                  "type": "Identifier",
                },
                Node {
                  "end": 56,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 56,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 55,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 55,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 57,
              "loc": SourceLocation {
                "end": Position {
                  "column": 57,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 58,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 58,
        "loc": SourceLocation {
          "end": Position {
            "column": 58,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"const x = 5; let y = x;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 58,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 41,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 41,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"const x = 5; let y = x;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "const x = 5; let y = x;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 42,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 42,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 53,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 53,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 44,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 44,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 56,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 56,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 55,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 55,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 57,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 57,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 58,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 58,
          "loc": SourceLocation {
            "end": Position {
              "column": 58,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"const x = 5; let y = x;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"constant_declaration\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"variable_declaration\\",
    [ [ \\"name\\",
      [ \\"y\\",
      null]],
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null]]],
  null]],
null]]",
  },
}
`;

exports[`Parses default export declarations 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 74,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 57,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 57,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 17,
                          "line": 1,
                        },
                      },
                      "raw": "\\"export const x = 42; export default x;\\"",
                      "start": 17,
                      "type": "Literal",
                      "value": "export const x = 42; export default x;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 58,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 58,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 69,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 69,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 60,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 60,
                  "type": "Identifier",
                },
                Node {
                  "end": 72,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 72,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 71,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 71,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 73,
              "loc": SourceLocation {
                "end": Position {
                  "column": 73,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 74,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
          Node {
            "end": 162,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 145,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 145,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 92,
                          "line": 1,
                        },
                      },
                      "raw": "\\"export default function square(x) { return x * x; }\\"",
                      "start": 92,
                      "type": "Literal",
                      "value": "export default function square(x) { return x * x; }",
                    },
                  ],
                  "callee": Node {
                    "end": 90,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 90,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 85,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 85,
                    "type": "Identifier",
                  },
                  "end": 146,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 146,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 85,
                      "line": 1,
                    },
                  },
                  "start": 85,
                  "type": "CallExpression",
                },
                Node {
                  "end": 157,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 157,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 148,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 148,
                  "type": "Identifier",
                },
                Node {
                  "end": 160,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 160,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 159,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 159,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 84,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 84,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 75,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 75,
                "type": "Identifier",
              },
              "end": 161,
              "loc": SourceLocation {
                "end": Position {
                  "column": 161,
                  "line": 1,
                },
                "start": Position {
                  "column": 75,
                  "line": 1,
                },
              },
              "start": 75,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 162,
                "line": 1,
              },
              "start": Position {
                "column": 75,
                "line": 1,
              },
            },
            "start": 75,
            "type": "ExpressionStatement",
          },
        ],
        "end": 162,
        "loc": SourceLocation {
          "end": Position {
            "column": 162,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse( \\"export const x = 42; export default x;\\"), undefined, 2); stringify(parse( \\"export default function square(x) { return x * x; }\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 74,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 57,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 57,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 17,
                            "line": 1,
                          },
                        },
                        "raw": "\\"export const x = 42; export default x;\\"",
                        "start": 17,
                        "type": "Literal",
                        "value": "export const x = 42; export default x;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 58,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 58,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 69,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 69,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 60,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 60,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 72,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 72,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 71,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 71,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 73,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 73,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 74,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
            Node {
              "end": 162,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 145,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 145,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 92,
                            "line": 1,
                          },
                        },
                        "raw": "\\"export default function square(x) { return x * x; }\\"",
                        "start": 92,
                        "type": "Literal",
                        "value": "export default function square(x) { return x * x; }",
                      },
                    ],
                    "callee": Node {
                      "end": 90,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 90,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 85,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 85,
                      "type": "Identifier",
                    },
                    "end": 146,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 146,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 85,
                        "line": 1,
                      },
                    },
                    "start": 85,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 157,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 157,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 148,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 148,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 160,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 160,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 159,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 159,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 84,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 84,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 75,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 75,
                  "type": "Identifier",
                },
                "end": 161,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 161,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 75,
                    "line": 1,
                  },
                },
                "start": 75,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 162,
                  "line": 1,
                },
                "start": Position {
                  "column": 75,
                  "line": 1,
                },
              },
              "start": 75,
              "type": "ExpressionStatement",
            },
          ],
          "end": 162,
          "loc": SourceLocation {
            "end": Position {
              "column": 162,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse( \\"export const x = 42; export default x;\\"), undefined, 2); stringify(parse( \\"export default function square(x) { return x * x; }\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"export_default_declaration\\",
[ [ \\"function_declaration\\",
  [ [ \\"name\\",
    [ \\"square\\",
    null]],
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"*\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null]]]],
    null]],
  null]]]],
null]]",
  },
}
`;

exports[`Parses default import specifiers 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 76,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 59,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 59,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 17,
                          "line": 1,
                        },
                      },
                      "raw": "\\"import defaultExport from 'module-name';\\"",
                      "start": 17,
                      "type": "Literal",
                      "value": "import defaultExport from 'module-name';",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 60,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 60,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 71,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 71,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 62,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 62,
                  "type": "Identifier",
                },
                Node {
                  "end": 74,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 74,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 73,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 73,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 75,
              "loc": SourceLocation {
                "end": Position {
                  "column": 75,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 76,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 76,
        "loc": SourceLocation {
          "end": Position {
            "column": 76,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse( \\"import defaultExport from 'module-name';\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 76,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 59,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 59,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 17,
                            "line": 1,
                          },
                        },
                        "raw": "\\"import defaultExport from 'module-name';\\"",
                        "start": 17,
                        "type": "Literal",
                        "value": "import defaultExport from 'module-name';",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 60,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 60,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 71,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 71,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 62,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 62,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 74,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 74,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 73,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 73,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 75,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 75,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 76,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 76,
          "loc": SourceLocation {
            "end": Position {
              "column": 76,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse( \\"import defaultExport from 'module-name';\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"import_declaration\\",
[ [ [ \\"default\\",
    null],
  null],
[ \\"module-name\\",
null]]]",
  },
}
`;

exports[`Parses empty program 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 35,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 18,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 18,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 19,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 19,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 30,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 30,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 21,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 21,
                  "type": "Identifier",
                },
                Node {
                  "end": 33,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 33,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 32,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 32,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 34,
              "loc": SourceLocation {
                "end": Position {
                  "column": 34,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 35,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 35,
        "loc": SourceLocation {
          "end": Position {
            "column": 35,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 35,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 18,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 18,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 19,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 19,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 30,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 30,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 21,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 21,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 33,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 33,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 32,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 32,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 34,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 34,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 35,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 35,
          "loc": SourceLocation {
            "end": Position {
              "column": 35,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ null,
null]]",
  },
}
`;

exports[`Parses fibonacci 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 103,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 86,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 86,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 87,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 87,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 98,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 98,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 89,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 89,
                  "type": "Identifier",
                },
                Node {
                  "end": 101,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 101,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 100,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 100,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 102,
              "loc": SourceLocation {
                "end": Position {
                  "column": 102,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 103,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 103,
        "loc": SourceLocation {
          "end": Position {
            "column": 103,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 103,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 86,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 86,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 87,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 87,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 98,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 98,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 89,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 89,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 101,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 101,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 100,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 100,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 102,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 102,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 103,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 103,
          "loc": SourceLocation {
            "end": Position {
              "column": 103,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); } fib(4);\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"function_declaration\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null]],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null],
    [ [ \\"return_statement\\",
      [ [ \\"conditional_expression\\",
        [ [ \\"binary_operator_combination\\",
          [ \\"<=\\",
          [ [ \\"name\\",
            [ \\"x\\",
            null]],
          [ [ \\"literal\\",
            [ 1,
            null]],
          null]]]],
        [ [ \\"name\\",
          [ \\"x\\",
          null]],
        [ [ \\"binary_operator_combination\\",
          [ \\"+\\",
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"fib\\",
              null]],
            [ [ [ \\"binary_operator_combination\\",
                [ \\"-\\",
                [ [ \\"name\\",
                  [ \\"x\\",
                  null]],
                [ [ \\"literal\\",
                  [ 1,
                  null]],
                null]]]],
              null],
            null]]],
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"fib\\",
              null]],
            [ [ [ \\"binary_operator_combination\\",
                [ \\"-\\",
                [ [ \\"name\\",
                  [ \\"x\\",
                  null]],
                [ [ \\"literal\\",
                  [ 2,
                  null]],
                null]]]],
              null],
            null]]],
          null]]]],
        null]]]],
      null]],
    null]]]],
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null]],
    [ [ [ \\"literal\\",
        [ 4,
        null]],
      null],
    null]]],
  null]],
null]]",
  },
}
`;

exports[`Parses function calls 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 69,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 52,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 52,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"f(x); thrice(thrice)(plus_one)(0);\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "f(x); thrice(thrice)(plus_one)(0);",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 53,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 53,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 64,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 64,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 55,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 55,
                  "type": "Identifier",
                },
                Node {
                  "end": 67,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 67,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 66,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 66,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 68,
              "loc": SourceLocation {
                "end": Position {
                  "column": 68,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 69,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 69,
        "loc": SourceLocation {
          "end": Position {
            "column": 69,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"f(x); thrice(thrice)(plus_one)(0);\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 69,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 52,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 52,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"f(x); thrice(thrice)(plus_one)(0);\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "f(x); thrice(thrice)(plus_one)(0);",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 53,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 53,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 64,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 64,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 55,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 55,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 67,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 67,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 66,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 66,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 68,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 68,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 69,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 69,
          "loc": SourceLocation {
            "end": Position {
              "column": 69,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"f(x); thrice(thrice)(plus_one)(0);\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"f\\",
      null]],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null],
    null]]],
  [ [ \\"application\\",
    [ [ \\"application\\",
      [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"thrice\\",
          null]],
        [ [ [ \\"name\\",
            [ \\"thrice\\",
            null]],
          null],
        null]]],
      [ [ [ \\"name\\",
          [ \\"plus_one\\",
          null]],
        null],
      null]]],
    [ [ [ \\"literal\\",
        [ 0,
        null]],
      null],
    null]]],
  null]],
null]]",
  },
}
`;

exports[`Parses if statements 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 89,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 72,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 72,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"if (true) { hi; } else { haha; } if (false) {} else {}\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "if (true) { hi; } else { haha; } if (false) {} else {}",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 73,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 73,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 84,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 84,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 75,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 75,
                  "type": "Identifier",
                },
                Node {
                  "end": 87,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 87,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 86,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 86,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 88,
              "loc": SourceLocation {
                "end": Position {
                  "column": 88,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 89,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 89,
        "loc": SourceLocation {
          "end": Position {
            "column": 89,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"if (true) { hi; } else { haha; } if (false) {} else {}\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 89,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 72,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 72,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"if (true) { hi; } else { haha; } if (false) {} else {}\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "if (true) { hi; } else { haha; } if (false) {} else {}",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 73,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 73,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 84,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 84,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 75,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 75,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 87,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 87,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 86,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 86,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 88,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 88,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 89,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 89,
          "loc": SourceLocation {
            "end": Position {
              "column": 89,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"if (true) { hi; } else { haha; } if (false) {} else {}\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"name\\",
      [ \\"hi\\",
      null]],
    [ [ \\"name\\",
      [ \\"haha\\",
      null]],
    null]]]],
  [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ false,
      null]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    null]]]],
  null]],
null]]",
  },
}
`;

exports[`Parses infix expressions 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 65,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 48,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 48,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"3 + 5 === 8 || !true && false;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "3 + 5 === 8 || !true && false;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 49,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 49,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 60,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 60,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 51,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 51,
                  "type": "Identifier",
                },
                Node {
                  "end": 63,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 63,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 62,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 62,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 64,
              "loc": SourceLocation {
                "end": Position {
                  "column": 64,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 65,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 65,
        "loc": SourceLocation {
          "end": Position {
            "column": 65,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"3 + 5 === 8 || !true && false;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 65,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 48,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 48,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"3 + 5 === 8 || !true && false;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "3 + 5 === 8 || !true && false;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 49,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 49,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 60,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 60,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 51,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 51,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 63,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 63,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 62,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 62,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 64,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 64,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 65,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 65,
          "loc": SourceLocation {
            "end": Position {
              "column": 65,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"3 + 5 === 8 || !true && false;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"logical_composition\\",
[ \\"||\\",
[ [ \\"binary_operator_combination\\",
  [ \\"===\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"literal\\",
      [ 3,
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]]],
  [ [ \\"literal\\",
    [ 8,
    null]],
  null]]]],
[ [ \\"logical_composition\\",
  [ \\"&&\\",
  [ [ \\"unary_operator_combination\\",
    [ \\"!\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    null]]],
  [ [ \\"literal\\",
    [ false,
    null]],
  null]]]],
null]]]]",
  },
}
`;

exports[`Parses literals 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 74,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 57,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 57,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"3; true; false; ''; \\\\\\"\\\\\\"; 'bob'; 1; 20;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "3; true; false; ''; \\"\\"; 'bob'; 1; 20;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 58,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 58,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 69,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 69,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 60,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 60,
                  "type": "Identifier",
                },
                Node {
                  "end": 72,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 72,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 71,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 71,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 73,
              "loc": SourceLocation {
                "end": Position {
                  "column": 73,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 74,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 74,
        "loc": SourceLocation {
          "end": Position {
            "column": 74,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"3; true; false; ''; \\\\\\"\\\\\\"; 'bob'; 1; 20;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 74,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 57,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 57,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"3; true; false; ''; \\\\\\"\\\\\\"; 'bob'; 1; 20;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "3; true; false; ''; \\"\\"; 'bob'; 1; 20;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 58,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 58,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 69,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 69,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 60,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 60,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 72,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 72,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 71,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 71,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 73,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 73,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 74,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 74,
          "loc": SourceLocation {
            "end": Position {
              "column": 74,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"3; true; false; ''; \\\\\\"\\\\\\"; 'bob'; 1; 20;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"literal\\",
    [ 3,
    null]],
  [ [ \\"literal\\",
    [ true,
    null]],
  [ [ \\"literal\\",
    [ false,
    null]],
  [ [ \\"literal\\",
    [ \\"\\",
    null]],
  [ [ \\"literal\\",
    [ \\"\\",
    null]],
  [ [ \\"literal\\",
    [ \\"bob\\",
    null]],
  [ [ \\"literal\\",
    [ 1,
    null]],
  [ [ \\"literal\\",
    [ 20,
    null]],
  null]]]]]]]],
null]]",
  },
}
`;

exports[`Parses loops 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 175,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 158,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 158,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 17,
                          "line": 1,
                        },
                      },
                      "raw": "\\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\"",
                      "start": 17,
                      "type": "Literal",
                      "value": "while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 159,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 159,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 170,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 170,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 161,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 161,
                  "type": "Identifier",
                },
                Node {
                  "end": 173,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 173,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 172,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 172,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 174,
              "loc": SourceLocation {
                "end": Position {
                  "column": 174,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 175,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 175,
        "loc": SourceLocation {
          "end": Position {
            "column": 175,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse( \\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 175,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 158,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 158,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 17,
                            "line": 1,
                          },
                        },
                        "raw": "\\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\"",
                        "start": 17,
                        "type": "Literal",
                        "value": "while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 159,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 159,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 170,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 170,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 161,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 161,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 173,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 173,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 172,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 172,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 174,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 174,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 175,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 175,
          "loc": SourceLocation {
            "end": Position {
              "column": 175,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse( \\"while (true) { continue; break; } for (let i = 0; i < 1; i = i + 1) { continue; break; } for (i = 0; i < 1; i = i + 1) { continue; break; }\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"while_loop\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]],
  [ [ \\"for_loop\\",
    [ [ \\"variable_declaration\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 0,
        null]],
      null]]],
    [ [ \\"binary_operator_combination\\",
      [ \\"<\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"binary_operator_combination\\",
        [ \\"+\\",
        [ [ \\"name\\",
          [ \\"i\\",
          null]],
        [ [ \\"literal\\",
          [ 1,
          null]],
        null]]]],
      null]]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]]]],
  [ [ \\"for_loop\\",
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 0,
        null]],
      null]]],
    [ [ \\"binary_operator_combination\\",
      [ \\"<\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"binary_operator_combination\\",
        [ \\"+\\",
        [ [ \\"name\\",
          [ \\"i\\",
          null]],
        [ [ \\"literal\\",
          [ 1,
          null]],
        null]]]],
      null]]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]]]],
  null]]],
null]]",
  },
}
`;

exports[`Parses multi-argument arrow function assignments properly 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 61,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 44,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 44,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"const y = (x, y) => x + 1;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "const y = (x, y) => x + 1;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 45,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 45,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 56,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 56,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 47,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 47,
                  "type": "Identifier",
                },
                Node {
                  "end": 59,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 59,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 58,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 58,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 60,
              "loc": SourceLocation {
                "end": Position {
                  "column": 60,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 61,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 61,
        "loc": SourceLocation {
          "end": Position {
            "column": 61,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"const y = (x, y) => x + 1;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 61,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 44,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 44,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"const y = (x, y) => x + 1;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "const y = (x, y) => x + 1;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 45,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 45,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 56,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 56,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 47,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 47,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 59,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 59,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 58,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 58,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 60,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 60,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 61,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 61,
          "loc": SourceLocation {
            "end": Position {
              "column": 61,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"const y = (x, y) => x + 1;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null]],
[ [ \\"lambda_expression\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"name\\",
      [ \\"y\\",
      null]],
    null]],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"+\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    null]],
  null]]],
null]]]",
  },
}
`;

exports[`Parses multi-argument arrow function expressions properly 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 51,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 34,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 34,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"(x, y) => x + 1;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "(x, y) => x + 1;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 35,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 35,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 46,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 46,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 37,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 37,
                  "type": "Identifier",
                },
                Node {
                  "end": 49,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 49,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 48,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 48,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 50,
              "loc": SourceLocation {
                "end": Position {
                  "column": 50,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 51,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 51,
        "loc": SourceLocation {
          "end": Position {
            "column": 51,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 51,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 34,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 34,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"(x, y) => x + 1;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "(x, y) => x + 1;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 35,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 35,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 46,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 46,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 37,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 37,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 49,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 49,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 48,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 48,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 50,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 50,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 51,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 51,
          "loc": SourceLocation {
            "end": Position {
              "column": 51,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"lambda_expression\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  [ [ \\"name\\",
    [ \\"y\\",
    null]],
  null]],
[ [ \\"return_statement\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 1,
      null]],
    null]]]],
  null]],
null]]]",
  },
}
`;

exports[`Parses multi-argument arrow function expressions properly 2`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 51,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 34,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 34,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"(x, y) => x + 1;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "(x, y) => x + 1;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 35,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 35,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 46,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 46,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 37,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 37,
                  "type": "Identifier",
                },
                Node {
                  "end": 49,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 49,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 48,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 48,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 50,
              "loc": SourceLocation {
                "end": Position {
                  "column": 50,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 51,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 51,
        "loc": SourceLocation {
          "end": Position {
            "column": 51,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": true,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 51,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 34,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 34,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"(x, y) => x + 1;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "(x, y) => x + 1;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 35,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 35,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 46,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 46,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 37,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 37,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 49,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 49,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 48,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 48,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 50,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 50,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 51,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 51,
          "loc": SourceLocation {
            "end": Position {
              "column": 51,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": true,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"(x, y) => x + 1;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"lambda_expression\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  [ [ \\"name\\",
    [ \\"y\\",
    null]],
  null]],
[ [ \\"return_statement\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 1,
      null]],
    null]]]],
  null]],
null]]]",
  },
}
`;

exports[`Parses name expression 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 37,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 20,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 20,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"x;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "x;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 21,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 21,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 32,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 32,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 23,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 23,
                  "type": "Identifier",
                },
                Node {
                  "end": 35,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 35,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 34,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 34,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 36,
              "loc": SourceLocation {
                "end": Position {
                  "column": 36,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 37,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 37,
        "loc": SourceLocation {
          "end": Position {
            "column": 37,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"x;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 37,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 20,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 20,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"x;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "x;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 21,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 21,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 32,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 32,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 23,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 23,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 35,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 35,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 34,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 34,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 36,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 36,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 37,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 37,
          "loc": SourceLocation {
            "end": Position {
              "column": 37,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"x;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"name\\",
[ \\"x\\",
null]]",
  },
}
`;

exports[`Parses name expressions 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 4,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 59,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 42,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 42,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"x; moreNames; undefined;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "x; moreNames; undefined;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 43,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 43,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 54,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 54,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 45,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 45,
                  "type": "Identifier",
                },
                Node {
                  "end": 57,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 57,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 56,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 56,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 58,
              "loc": SourceLocation {
                "end": Position {
                  "column": 58,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 59,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 59,
        "loc": SourceLocation {
          "end": Position {
            "column": 59,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "head": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"x; moreNames; undefined;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 4,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 59,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 42,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 42,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"x; moreNames; undefined;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "x; moreNames; undefined;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 43,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 43,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 54,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 54,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 45,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 45,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 57,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 57,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 56,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 56,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 58,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 58,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 59,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 59,
          "loc": SourceLocation {
            "end": Position {
              "column": 59,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "head": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "head": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "head": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"x; moreNames; undefined;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  [ [ \\"name\\",
    [ \\"moreNames\\",
    null]],
  [ [ \\"name\\",
    [ \\"undefined\\",
    null]],
  null]]],
null]]",
  },
}
`;

exports[`Parses named export declarations 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 145,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 128,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 128,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 17,
                          "line": 1,
                        },
                      },
                      "raw": "\\"export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };\\"",
                      "start": 17,
                      "type": "Literal",
                      "value": "export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 129,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 129,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 140,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 140,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 131,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 131,
                  "type": "Identifier",
                },
                Node {
                  "end": 143,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 143,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 142,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 142,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 144,
              "loc": SourceLocation {
                "end": Position {
                  "column": 144,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 145,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 145,
        "loc": SourceLocation {
          "end": Position {
            "column": 145,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse( \\"export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 145,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 128,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 128,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 17,
                            "line": 1,
                          },
                        },
                        "raw": "\\"export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };\\"",
                        "start": 17,
                        "type": "Literal",
                        "value": "export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 129,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 129,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 140,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 140,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 131,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 131,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 143,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 143,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 142,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 142,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 144,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 144,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 145,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 145,
          "loc": SourceLocation {
            "end": Position {
              "column": 145,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse( \\"export const x = 42; export const square = x => x * x; export function id(x) { return x; } export { x as y };\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"export_named_declaration\\",
    [ [ \\"constant_declaration\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 42,
        null]],
      null]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ \\"constant_declaration\\",
      [ [ \\"name\\",
        [ \\"square\\",
        null]],
      [ [ \\"lambda_expression\\",
        [ [ [ \\"name\\",
            [ \\"x\\",
            null]],
          null],
        [ [ \\"return_statement\\",
          [ [ \\"binary_operator_combination\\",
            [ \\"*\\",
            [ [ \\"name\\",
              [ \\"x\\",
              null]],
            [ [ \\"name\\",
              [ \\"x\\",
              null]],
            null]]]],
          null]],
        null]]],
      null]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ \\"function_declaration\\",
      [ [ \\"name\\",
        [ \\"id\\",
        null]],
      [ [ [ \\"name\\",
          [ \\"x\\",
          null]],
        null],
      [ [ \\"return_statement\\",
        [ [ \\"name\\",
          [ \\"x\\",
          null]],
        null]],
      null]]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ [ \\"name\\",
        [ \\"y\\",
        null]]],
    null]],
  null]]]],
null]]",
  },
}
`;

exports[`Parses object notation 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 71,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 54,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 54,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"let x = {a: 5, b: 10, 'key': value};\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "let x = {a: 5, b: 10, 'key': value};",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 55,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 55,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 66,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 66,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 57,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 57,
                  "type": "Identifier",
                },
                Node {
                  "end": 69,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 69,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 68,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 68,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 70,
              "loc": SourceLocation {
                "end": Position {
                  "column": 70,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 71,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 71,
        "loc": SourceLocation {
          "end": Position {
            "column": 71,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"let x = {a: 5, b: 10, 'key': value};\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 71,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 54,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 54,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"let x = {a: 5, b: 10, 'key': value};\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "let x = {a: 5, b: 10, 'key': value};",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 55,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 55,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 66,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 66,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 57,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 57,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 69,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 69,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 68,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 68,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 70,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 70,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 71,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 71,
          "loc": SourceLocation {
            "end": Position {
              "column": 71,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"let x = {a: 5, b: 10, 'key': value};\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"variable_declaration\\",
[ [ \\"name\\",
  [ \\"x\\",
  null]],
[ [ \\"object_expression\\",
  [ [ [ \\"key_value_pair\\",
      [ [ \\"property\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"key_value_pair\\",
      [ [ \\"property\\",
        [ \\"b\\",
        null]],
      [ [ \\"literal\\",
        [ 10,
        null]],
      null]]],
    [ [ \\"key_value_pair\\",
      [ [ \\"literal\\",
        [ \\"key\\",
        null]],
      [ [ \\"name\\",
        [ \\"value\\",
        null]],
      null]]],
    null]]],
  null]],
null]]]",
  },
}
`;

exports[`Parses property access 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 59,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 42,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 42,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"a[b]; a.b; a[5]; a['b'];\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "a[b]; a.b; a[5]; a['b'];",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 43,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 43,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 54,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 54,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 45,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 45,
                  "type": "Identifier",
                },
                Node {
                  "end": 57,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 57,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 56,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 56,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 58,
              "loc": SourceLocation {
                "end": Position {
                  "column": 58,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 59,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 59,
        "loc": SourceLocation {
          "end": Position {
            "column": 59,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"a[b]; a.b; a[5]; a['b'];\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 59,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 42,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 42,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"a[b]; a.b; a[5]; a['b'];\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "a[b]; a.b; a[5]; a['b'];",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 43,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 43,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 54,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 54,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 45,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 45,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 57,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 57,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 56,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 56,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 58,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 58,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 59,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 59,
          "loc": SourceLocation {
            "end": Position {
              "column": 59,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"a[b]; a.b; a[5]; a['b'];\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"name\\",
      [ \\"b\\",
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"property\\",
      [ \\"b\\",
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"literal\\",
      [ \\"b\\",
      null]],
    null]]],
  null]]]],
null]]",
  },
}
`;

exports[`Parses property assignment 1`] = `
Object {
  "context": Object {
    "alertResult": Array [],
    "chapter": 100,
    "debugger": Object {
      "observers": Object {
        "callbacks": Array [],
      },
      "state": Object {
        "it": Object {},
      },
      "status": false,
    },
    "displayResult": Array [],
    "errors": Array [],
    "executionMethod": "native",
    "externalContext": undefined,
    "externalSymbols": Array [],
    "moduleContexts": Object {},
    "nativeStorage": Object {
      "builtins": Map {
        "get_time" => [Function],
        "display" => [Function],
        "raw_display" => [Function],
        "stringify" => [Function],
        "error" => [Function],
        "prompt" => [Function],
        "is_number" => [Function],
        "is_string" => [Function],
        "is_function" => [Function],
        "is_boolean" => [Function],
        "is_undefined" => [Function],
        "parse_int" => [Function],
        "char_at" => [Function],
        "arity" => [Function],
        "undefined" => undefined,
        "NaN" => NaN,
        "Infinity" => Infinity,
        "math_abs" => [Function],
        "math_acos" => [Function],
        "math_acosh" => [Function],
        "math_asin" => [Function],
        "math_asinh" => [Function],
        "math_atan" => [Function],
        "math_atanh" => [Function],
        "math_atan2" => [Function],
        "math_ceil" => [Function],
        "math_cbrt" => [Function],
        "math_expm1" => [Function],
        "math_clz32" => [Function],
        "math_cos" => [Function],
        "math_cosh" => [Function],
        "math_exp" => [Function],
        "math_floor" => [Function],
        "math_fround" => [Function],
        "math_hypot" => [Function],
        "math_imul" => [Function],
        "math_log" => [Function],
        "math_log1p" => [Function],
        "math_log2" => [Function],
        "math_log10" => [Function],
        "math_max" => [Function],
        "math_min" => [Function],
        "math_pow" => [Function],
        "math_random" => [Function],
        "math_round" => [Function],
        "math_sign" => [Function],
        "math_sin" => [Function],
        "math_sinh" => [Function],
        "math_sqrt" => [Function],
        "math_tan" => [Function],
        "math_tanh" => [Function],
        "math_trunc" => [Function],
        "math_E" => 2.718281828459045,
        "math_LN10" => 2.302585092994046,
        "math_LN2" => 0.6931471805599453,
        "math_LOG10E" => 0.4342944819032518,
        "math_LOG2E" => 1.4426950408889634,
        "math_PI" => 3.141592653589793,
        "math_SQRT1_2" => 0.7071067811865476,
        "math_SQRT2" => 1.4142135623730951,
        "pair" => [Function],
        "is_pair" => [Function],
        "head" => [Function],
        "tail" => [Function],
        "is_null" => [Function],
        "list" => [Function],
        "draw_data" => [Function],
        "display_list" => [Function],
        "is_list" => [Function],
        "set_head" => [Function],
        "set_tail" => [Function],
        "array_length" => [Function],
        "is_array" => [Function],
        "stream" => [Function],
        "parse" => [Function],
        "tokenize" => [Function],
        "apply_in_underlying_javascript" => [Function],
        "call_cc" => [Function],
        "is_object" => [Function],
        "is_NaN" => [Function],
        "has_own_property" => [Function],
        "alert" => [Function],
        "timed" => [Function],
      },
      "evaller": [Function],
      "loadedModuleTypes": Object {},
      "loadedModules": Object {},
      "maxExecTime": 1000,
      "operators": Map {
        "throwIfTimeout" => [Function],
        "callIfFuncAndRightArgs" => [Function],
        "boolOrErr" => [Function],
        "unaryOp" => [Function],
        "evaluateUnaryExpression" => [Function],
        "binaryOp" => [Function],
        "evaluateBinaryExpression" => [Function],
        "callIteratively" => [Function],
        "wrap" => [Function],
        "setProp" => [Function],
        "getProp" => [Function],
      },
      "previousProgramsIdentifiers": Set {
        "equal",
        "$length",
        "length",
        "$map",
        "map",
        "$build_list",
        "build_list",
        "for_each",
        "$list_to_string",
        "list_to_string",
        "$reverse",
        "reverse",
        "$append",
        "append",
        "member",
        "$remove",
        "remove",
        "$remove_all",
        "remove_all",
        "$filter",
        "filter",
        "$enum_list",
        "enum_list",
        "list_ref",
        "$accumulate",
        "accumulate",
        "__access_named_export__",
        "__access_export__",
        "stream_tail",
        "is_stream",
        "list_to_stream",
        "stream_to_list",
        "stream_length",
        "stream_map",
        "build_stream",
        "stream_for_each",
        "stream_reverse",
        "stream_append",
        "stream_member",
        "stream_remove",
        "stream_remove_all",
        "stream_filter",
        "enum_stream",
        "integers_from",
        "eval_stream",
        "stream_ref",
      },
    },
    "numberOfOuterEnvironments": 1,
    "prelude": null,
    "previousPrograms": Array [
      Object {
        "body": Array [
          Node {
            "end": 86,
            "expression": Node {
              "arguments": Array [
                Node {
                  "arguments": Array [
                    Node {
                      "end": 69,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 69,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 16,
                          "line": 1,
                        },
                      },
                      "raw": "\\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\\"",
                      "start": 16,
                      "type": "Literal",
                      "value": "a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;",
                    },
                  ],
                  "callee": Node {
                    "end": 15,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "name": "parse",
                    "start": 10,
                    "type": "Identifier",
                  },
                  "end": 70,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 70,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 1,
                    },
                  },
                  "start": 10,
                  "type": "CallExpression",
                },
                Node {
                  "end": 81,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 81,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 72,
                      "line": 1,
                    },
                  },
                  "name": "undefined",
                  "start": 72,
                  "type": "Identifier",
                },
                Node {
                  "end": 84,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 84,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 83,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 83,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "callee": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "name": "stringify",
                "start": 0,
                "type": "Identifier",
              },
              "end": 85,
              "loc": SourceLocation {
                "end": Position {
                  "column": 85,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "CallExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 86,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ExpressionStatement",
          },
        ],
        "end": 86,
        "loc": SourceLocation {
          "end": Position {
            "column": 86,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "sourceType": "module",
        "start": 0,
        "type": "Program",
      },
    ],
    "promptResult": Array [],
    "runtime": Object {
      "break": false,
      "breakpointSteps": Array [],
      "changepointSteps": Array [],
      "control": null,
      "debuggerOn": true,
      "envSteps": -1,
      "envStepsTotal": 0,
      "environmentTree": EnvTree {
        "_root": EnvTreeNode {
          "_children": Array [],
          "environment": Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
          "parent": null,
        },
        "map": Map {
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          } => EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
        },
      },
      "environments": Array [
        Object {
          "head": Object {
            "Infinity": Infinity,
            "NaN": NaN,
            "alert": [Function],
            "apply_in_underlying_javascript": [Function],
            "arity": [Function],
            "array_length": [Function],
            "call_cc": [Function],
            "char_at": [Function],
            "display": [Function],
            "display_list": [Function],
            "draw_data": [Function],
            "error": [Function],
            "get_time": [Function],
            "has_own_property": [Function],
            "head": [Function],
            "is_NaN": [Function],
            "is_array": [Function],
            "is_boolean": [Function],
            "is_function": [Function],
            "is_list": [Function],
            "is_null": [Function],
            "is_number": [Function],
            "is_object": [Function],
            "is_pair": [Function],
            "is_string": [Function],
            "is_undefined": [Function],
            "list": [Function],
            "math_E": 2.718281828459045,
            "math_LN10": 2.302585092994046,
            "math_LN2": 0.6931471805599453,
            "math_LOG10E": 0.4342944819032518,
            "math_LOG2E": 1.4426950408889634,
            "math_PI": 3.141592653589793,
            "math_SQRT1_2": 0.7071067811865476,
            "math_SQRT2": 1.4142135623730951,
            "math_abs": [Function],
            "math_acos": [Function],
            "math_acosh": [Function],
            "math_asin": [Function],
            "math_asinh": [Function],
            "math_atan": [Function],
            "math_atan2": [Function],
            "math_atanh": [Function],
            "math_cbrt": [Function],
            "math_ceil": [Function],
            "math_clz32": [Function],
            "math_cos": [Function],
            "math_cosh": [Function],
            "math_exp": [Function],
            "math_expm1": [Function],
            "math_floor": [Function],
            "math_fround": [Function],
            "math_hypot": [Function],
            "math_imul": [Function],
            "math_log": [Function],
            "math_log10": [Function],
            "math_log1p": [Function],
            "math_log2": [Function],
            "math_max": [Function],
            "math_min": [Function],
            "math_pow": [Function],
            "math_random": [Function],
            "math_round": [Function],
            "math_sign": [Function],
            "math_sin": [Function],
            "math_sinh": [Function],
            "math_sqrt": [Function],
            "math_tan": [Function],
            "math_tanh": [Function],
            "math_trunc": [Function],
            "pair": [Function],
            "parse": [Function],
            "parse_int": [Function],
            "prompt": [Function],
            "raw_display": [Function],
            "set_head": [Function],
            "set_tail": [Function],
            "stream": [Function],
            "stringify": [Function],
            "tail": [Function],
            "timed": [Function],
            "tokenize": [Function],
            "undefined": undefined,
          },
          "heap": Heap {
            "storage": null,
          },
          "id": "-1",
          "name": "global",
          "tail": null,
        },
      ],
      "isRunning": false,
      "nodes": Array [],
      "objectCount": 0,
      "stash": null,
      "transformers": Transformers {
        "items": Map {},
        "parent": null,
      },
      "value": undefined,
    },
    "shouldIncreaseEvaluationTimeout": false,
    "typeEnvironment": Array [
      Object {
        "declKindMap": Map {
          "Infinity" => "const",
          "NaN" => "const",
          "undefined" => "const",
          "math_E" => "const",
          "math_LN2" => "const",
          "math_LN10" => "const",
          "math_LOG2E" => "const",
          "math_LOG10E" => "const",
          "math_PI" => "const",
          "math_SQRT1_2" => "const",
          "math_SQRT2" => "const",
          "is_boolean" => "const",
          "is_number" => "const",
          "is_string" => "const",
          "is_undefined" => "const",
          "is_function" => "const",
          "math_abs" => "const",
          "math_acos" => "const",
          "math_acosh" => "const",
          "math_asin" => "const",
          "math_asinh" => "const",
          "math_atan" => "const",
          "math_atan2" => "const",
          "math_atanh" => "const",
          "math_cbrt" => "const",
          "math_ceil" => "const",
          "math_clz32" => "const",
          "math_cos" => "const",
          "math_cosh" => "const",
          "math_exp" => "const",
          "math_expm1" => "const",
          "math_floor" => "const",
          "math_fround" => "const",
          "math_hypot" => "const",
          "math_imul" => "const",
          "math_log" => "const",
          "math_log1p" => "const",
          "math_log2" => "const",
          "math_log10" => "const",
          "math_max" => "const",
          "math_min" => "const",
          "math_pow" => "const",
          "math_random" => "const",
          "math_round" => "const",
          "math_sign" => "const",
          "math_sin" => "const",
          "math_sinh" => "const",
          "math_sqrt" => "const",
          "math_tan" => "const",
          "math_tanh" => "const",
          "math_trunc" => "const",
          "parse_int" => "const",
          "prompt" => "const",
          "get_time" => "const",
          "stringify" => "const",
          "display" => "const",
          "error" => "const",
          "-_1" => "const",
          "!" => "const",
          "&&" => "const",
          "||" => "const",
          "<" => "const",
          "<=" => "const",
          ">" => "const",
          ">=" => "const",
          "+" => "const",
          "%" => "const",
          "-" => "const",
          "*" => "const",
          "/" => "const",
          "pair" => "const",
          "head" => "const",
          "tail" => "const",
          "is_pair" => "const",
          "is_null" => "const",
          "is_list" => "const",
          "list" => "const",
          "===" => "const",
          "!==" => "const",
          "set_head" => "const",
          "set_tail" => "const",
          "is_array" => "const",
          "array_length" => "const",
          "raw_display" => "const",
          "char_at" => "const",
          "arity" => "const",
          "draw_data" => "const",
          "display_list" => "const",
          "stream" => "const",
          "parse" => "const",
          "tokenize" => "const",
          "apply_in_underlying_javascript" => "const",
          "call_cc" => "const",
          "is_object" => "const",
          "is_NaN" => "const",
          "has_own_property" => "const",
          "alert" => "const",
          "timed" => "const",
        },
        "typeAliasMap": Map {
          "Pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "headType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              "kind": "pair",
              "tailType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            ],
          },
          "List" => Object {
            "kind": "forall",
            "polyType": Object {
              "elementType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "kind": "list",
              "typeAsPair": undefined,
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
          "Stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "Stream",
                  "typeArgs": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                },
              },
            },
            "typeParams": Array [
              Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            ],
          },
        },
        "typeMap": Map {
          "Infinity" => Object {
            "kind": "primitive",
            "name": "number",
            "value": Infinity,
          },
          "NaN" => Object {
            "kind": "primitive",
            "name": "number",
            "value": NaN,
          },
          "undefined" => Object {
            "kind": "primitive",
            "name": "undefined",
            "value": undefined,
          },
          "math_E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.718281828459045,
          },
          "math_LN2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.6931471805599453,
          },
          "math_LN10" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 2.302585092994046,
          },
          "math_LOG2E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4426950408889634,
          },
          "math_LOG10E" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.4342944819032518,
          },
          "math_PI" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 3.141592653589793,
          },
          "math_SQRT1_2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 0.7071067811865476,
          },
          "math_SQRT2" => Object {
            "kind": "primitive",
            "name": "number",
            "value": 1.4142135623730951,
          },
          "is_boolean" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_number" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_string" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_undefined" => Object {
            "ifTrueType": Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "kind": "predicate",
          },
          "is_function" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "U",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "math_abs" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_acosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_asinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atan2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_atanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cbrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_ceil" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_clz32" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cos" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_cosh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_exp" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_expm1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_floor" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_fround" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_hypot" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_imul" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log1p" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log2" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_log10" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_max" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_min" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "math_pow" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_random" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_round" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sign" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sin" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sinh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_sqrt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tan" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_tanh" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "math_trunc" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "parse_int" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "prompt" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "string",
              "value": undefined,
            },
          },
          "get_time" => Object {
            "kind": "function",
            "parameterTypes": Array [],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "stringify" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "error" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "-_1" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "!" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "boolean",
              "value": undefined,
            },
          },
          "&&" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "||" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "<=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          ">=" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "+" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
                Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              ],
              "returnType": Object {
                "constraint": "addable",
                "kind": "variable",
                "name": "A",
              },
            },
            "typeParams": undefined,
          },
          "%" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "-" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "*" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "/" => Object {
            "kind": "function",
            "parameterTypes": Array [
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            ],
            "returnType": Object {
              "kind": "primitive",
              "name": "number",
              "value": undefined,
            },
          },
          "pair" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
            },
            "typeParams": undefined,
          },
          "head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "headType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              ],
              "returnType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "tailType",
                "typeArgs": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_pair" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_null" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "is_list" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "===" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "!==" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T1",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T2",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_head" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "set_tail" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "is_array" => Object {
            "ifTrueType": Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "array",
              },
              "typeParams": undefined,
            },
            "kind": "predicate",
          },
          "array_length" => Object {
            "kind": "forall",
            "polyType": Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "typeParams": undefined,
          },
          "raw_display" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "char_at" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "arity" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "draw_data" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "display_list" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "stream" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "parse" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "tokenize" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "apply_in_underlying_javascript" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "call_cc" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_object" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "is_NaN" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "has_own_property" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "alert" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
          "timed" => Object {
            "kind": "forall",
            "polyType": Object {
              "constraint": "none",
              "kind": "variable",
              "name": "T1",
              "typeArgs": undefined,
            },
            "typeParams": undefined,
          },
        },
      },
    ],
    "unTypecheckedCode": Array [
      "stringify(parse(\\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\\"), undefined, 2);",
      "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
    ],
    "variant": "default",
    "visualiseListResult": Array [],
  },
  "result": Object {
    "context": Object {
      "alertResult": Array [],
      "chapter": 100,
      "debugger": Object {
        "observers": Object {
          "callbacks": Array [],
        },
        "state": Object {
          "it": Object {},
        },
        "status": false,
      },
      "displayResult": Array [],
      "errors": Array [],
      "executionMethod": "native",
      "externalContext": undefined,
      "externalSymbols": Array [],
      "moduleContexts": Object {},
      "nativeStorage": Object {
        "builtins": Map {
          "get_time" => [Function],
          "display" => [Function],
          "raw_display" => [Function],
          "stringify" => [Function],
          "error" => [Function],
          "prompt" => [Function],
          "is_number" => [Function],
          "is_string" => [Function],
          "is_function" => [Function],
          "is_boolean" => [Function],
          "is_undefined" => [Function],
          "parse_int" => [Function],
          "char_at" => [Function],
          "arity" => [Function],
          "undefined" => undefined,
          "NaN" => NaN,
          "Infinity" => Infinity,
          "math_abs" => [Function],
          "math_acos" => [Function],
          "math_acosh" => [Function],
          "math_asin" => [Function],
          "math_asinh" => [Function],
          "math_atan" => [Function],
          "math_atanh" => [Function],
          "math_atan2" => [Function],
          "math_ceil" => [Function],
          "math_cbrt" => [Function],
          "math_expm1" => [Function],
          "math_clz32" => [Function],
          "math_cos" => [Function],
          "math_cosh" => [Function],
          "math_exp" => [Function],
          "math_floor" => [Function],
          "math_fround" => [Function],
          "math_hypot" => [Function],
          "math_imul" => [Function],
          "math_log" => [Function],
          "math_log1p" => [Function],
          "math_log2" => [Function],
          "math_log10" => [Function],
          "math_max" => [Function],
          "math_min" => [Function],
          "math_pow" => [Function],
          "math_random" => [Function],
          "math_round" => [Function],
          "math_sign" => [Function],
          "math_sin" => [Function],
          "math_sinh" => [Function],
          "math_sqrt" => [Function],
          "math_tan" => [Function],
          "math_tanh" => [Function],
          "math_trunc" => [Function],
          "math_E" => 2.718281828459045,
          "math_LN10" => 2.302585092994046,
          "math_LN2" => 0.6931471805599453,
          "math_LOG10E" => 0.4342944819032518,
          "math_LOG2E" => 1.4426950408889634,
          "math_PI" => 3.141592653589793,
          "math_SQRT1_2" => 0.7071067811865476,
          "math_SQRT2" => 1.4142135623730951,
          "pair" => [Function],
          "is_pair" => [Function],
          "head" => [Function],
          "tail" => [Function],
          "is_null" => [Function],
          "list" => [Function],
          "draw_data" => [Function],
          "display_list" => [Function],
          "is_list" => [Function],
          "set_head" => [Function],
          "set_tail" => [Function],
          "array_length" => [Function],
          "is_array" => [Function],
          "stream" => [Function],
          "parse" => [Function],
          "tokenize" => [Function],
          "apply_in_underlying_javascript" => [Function],
          "call_cc" => [Function],
          "is_object" => [Function],
          "is_NaN" => [Function],
          "has_own_property" => [Function],
          "alert" => [Function],
          "timed" => [Function],
        },
        "evaller": [Function],
        "loadedModuleTypes": Object {},
        "loadedModules": Object {},
        "maxExecTime": 1000,
        "operators": Map {
          "throwIfTimeout" => [Function],
          "callIfFuncAndRightArgs" => [Function],
          "boolOrErr" => [Function],
          "unaryOp" => [Function],
          "evaluateUnaryExpression" => [Function],
          "binaryOp" => [Function],
          "evaluateBinaryExpression" => [Function],
          "callIteratively" => [Function],
          "wrap" => [Function],
          "setProp" => [Function],
          "getProp" => [Function],
        },
        "previousProgramsIdentifiers": Set {
          "equal",
          "$length",
          "length",
          "$map",
          "map",
          "$build_list",
          "build_list",
          "for_each",
          "$list_to_string",
          "list_to_string",
          "$reverse",
          "reverse",
          "$append",
          "append",
          "member",
          "$remove",
          "remove",
          "$remove_all",
          "remove_all",
          "$filter",
          "filter",
          "$enum_list",
          "enum_list",
          "list_ref",
          "$accumulate",
          "accumulate",
          "__access_named_export__",
          "__access_export__",
          "stream_tail",
          "is_stream",
          "list_to_stream",
          "stream_to_list",
          "stream_length",
          "stream_map",
          "build_stream",
          "stream_for_each",
          "stream_reverse",
          "stream_append",
          "stream_member",
          "stream_remove",
          "stream_remove_all",
          "stream_filter",
          "enum_stream",
          "integers_from",
          "eval_stream",
          "stream_ref",
        },
      },
      "numberOfOuterEnvironments": 1,
      "prelude": null,
      "previousPrograms": Array [
        Object {
          "body": Array [
            Node {
              "end": 86,
              "expression": Node {
                "arguments": Array [
                  Node {
                    "arguments": Array [
                      Node {
                        "end": 69,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 69,
                            "line": 1,
                          },
                          "start": Position {
                            "column": 16,
                            "line": 1,
                          },
                        },
                        "raw": "\\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\\"",
                        "start": 16,
                        "type": "Literal",
                        "value": "a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;",
                      },
                    ],
                    "callee": Node {
                      "end": 15,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 15,
                          "line": 1,
                        },
                        "start": Position {
                          "column": 10,
                          "line": 1,
                        },
                      },
                      "name": "parse",
                      "start": 10,
                      "type": "Identifier",
                    },
                    "end": 70,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 70,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 10,
                        "line": 1,
                      },
                    },
                    "start": 10,
                    "type": "CallExpression",
                  },
                  Node {
                    "end": 81,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 81,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 72,
                        "line": 1,
                      },
                    },
                    "name": "undefined",
                    "start": 72,
                    "type": "Identifier",
                  },
                  Node {
                    "end": 84,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 84,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 83,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 83,
                    "type": "Literal",
                    "value": 2,
                  },
                ],
                "callee": Node {
                  "end": 9,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "name": "stringify",
                  "start": 0,
                  "type": "Identifier",
                },
                "end": 85,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 85,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "start": 0,
                "type": "CallExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 86,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "start": 0,
              "type": "ExpressionStatement",
            },
          ],
          "end": 86,
          "loc": SourceLocation {
            "end": Position {
              "column": 86,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "sourceType": "module",
          "start": 0,
          "type": "Program",
        },
      ],
      "promptResult": Array [],
      "runtime": Object {
        "break": false,
        "breakpointSteps": Array [],
        "changepointSteps": Array [],
        "control": null,
        "debuggerOn": true,
        "envSteps": -1,
        "envStepsTotal": 0,
        "environmentTree": EnvTree {
          "_root": EnvTreeNode {
            "_children": Array [],
            "environment": Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            },
            "parent": null,
          },
          "map": Map {
            Object {
              "head": Object {
                "Infinity": Infinity,
                "NaN": NaN,
                "alert": [Function],
                "apply_in_underlying_javascript": [Function],
                "arity": [Function],
                "array_length": [Function],
                "call_cc": [Function],
                "char_at": [Function],
                "display": [Function],
                "display_list": [Function],
                "draw_data": [Function],
                "error": [Function],
                "get_time": [Function],
                "has_own_property": [Function],
                "head": [Function],
                "is_NaN": [Function],
                "is_array": [Function],
                "is_boolean": [Function],
                "is_function": [Function],
                "is_list": [Function],
                "is_null": [Function],
                "is_number": [Function],
                "is_object": [Function],
                "is_pair": [Function],
                "is_string": [Function],
                "is_undefined": [Function],
                "list": [Function],
                "math_E": 2.718281828459045,
                "math_LN10": 2.302585092994046,
                "math_LN2": 0.6931471805599453,
                "math_LOG10E": 0.4342944819032518,
                "math_LOG2E": 1.4426950408889634,
                "math_PI": 3.141592653589793,
                "math_SQRT1_2": 0.7071067811865476,
                "math_SQRT2": 1.4142135623730951,
                "math_abs": [Function],
                "math_acos": [Function],
                "math_acosh": [Function],
                "math_asin": [Function],
                "math_asinh": [Function],
                "math_atan": [Function],
                "math_atan2": [Function],
                "math_atanh": [Function],
                "math_cbrt": [Function],
                "math_ceil": [Function],
                "math_clz32": [Function],
                "math_cos": [Function],
                "math_cosh": [Function],
                "math_exp": [Function],
                "math_expm1": [Function],
                "math_floor": [Function],
                "math_fround": [Function],
                "math_hypot": [Function],
                "math_imul": [Function],
                "math_log": [Function],
                "math_log10": [Function],
                "math_log1p": [Function],
                "math_log2": [Function],
                "math_max": [Function],
                "math_min": [Function],
                "math_pow": [Function],
                "math_random": [Function],
                "math_round": [Function],
                "math_sign": [Function],
                "math_sin": [Function],
                "math_sinh": [Function],
                "math_sqrt": [Function],
                "math_tan": [Function],
                "math_tanh": [Function],
                "math_trunc": [Function],
                "pair": [Function],
                "parse": [Function],
                "parse_int": [Function],
                "prompt": [Function],
                "raw_display": [Function],
                "set_head": [Function],
                "set_tail": [Function],
                "stream": [Function],
                "stringify": [Function],
                "tail": [Function],
                "timed": [Function],
                "tokenize": [Function],
                "undefined": undefined,
              },
              "heap": Heap {
                "storage": null,
              },
              "id": "-1",
              "name": "global",
              "tail": null,
            } => EnvTreeNode {
              "_children": Array [],
              "environment": Object {
                "head": Object {
                  "Infinity": Infinity,
                  "NaN": NaN,
                  "alert": [Function],
                  "apply_in_underlying_javascript": [Function],
                  "arity": [Function],
                  "array_length": [Function],
                  "call_cc": [Function],
                  "char_at": [Function],
                  "display": [Function],
                  "display_list": [Function],
                  "draw_data": [Function],
                  "error": [Function],
                  "get_time": [Function],
                  "has_own_property": [Function],
                  "head": [Function],
                  "is_NaN": [Function],
                  "is_array": [Function],
                  "is_boolean": [Function],
                  "is_function": [Function],
                  "is_list": [Function],
                  "is_null": [Function],
                  "is_number": [Function],
                  "is_object": [Function],
                  "is_pair": [Function],
                  "is_string": [Function],
                  "is_undefined": [Function],
                  "list": [Function],
                  "math_E": 2.718281828459045,
                  "math_LN10": 2.302585092994046,
                  "math_LN2": 0.6931471805599453,
                  "math_LOG10E": 0.4342944819032518,
                  "math_LOG2E": 1.4426950408889634,
                  "math_PI": 3.141592653589793,
                  "math_SQRT1_2": 0.7071067811865476,
                  "math_SQRT2": 1.4142135623730951,
                  "math_abs": [Function],
                  "math_acos": [Function],
                  "math_acosh": [Function],
                  "math_asin": [Function],
                  "math_asinh": [Function],
                  "math_atan": [Function],
                  "math_atan2": [Function],
                  "math_atanh": [Function],
                  "math_cbrt": [Function],
                  "math_ceil": [Function],
                  "math_clz32": [Function],
                  "math_cos": [Function],
                  "math_cosh": [Function],
                  "math_exp": [Function],
                  "math_expm1": [Function],
                  "math_floor": [Function],
                  "math_fround": [Function],
                  "math_hypot": [Function],
                  "math_imul": [Function],
                  "math_log": [Function],
                  "math_log10": [Function],
                  "math_log1p": [Function],
                  "math_log2": [Function],
                  "math_max": [Function],
                  "math_min": [Function],
                  "math_pow": [Function],
                  "math_random": [Function],
                  "math_round": [Function],
                  "math_sign": [Function],
                  "math_sin": [Function],
                  "math_sinh": [Function],
                  "math_sqrt": [Function],
                  "math_tan": [Function],
                  "math_tanh": [Function],
                  "math_trunc": [Function],
                  "pair": [Function],
                  "parse": [Function],
                  "parse_int": [Function],
                  "prompt": [Function],
                  "raw_display": [Function],
                  "set_head": [Function],
                  "set_tail": [Function],
                  "stream": [Function],
                  "stringify": [Function],
                  "tail": [Function],
                  "timed": [Function],
                  "tokenize": [Function],
                  "undefined": undefined,
                },
                "heap": Heap {
                  "storage": null,
                },
                "id": "-1",
                "name": "global",
                "tail": null,
              },
              "parent": null,
            },
          },
        },
        "environments": Array [
          Object {
            "head": Object {
              "Infinity": Infinity,
              "NaN": NaN,
              "alert": [Function],
              "apply_in_underlying_javascript": [Function],
              "arity": [Function],
              "array_length": [Function],
              "call_cc": [Function],
              "char_at": [Function],
              "display": [Function],
              "display_list": [Function],
              "draw_data": [Function],
              "error": [Function],
              "get_time": [Function],
              "has_own_property": [Function],
              "head": [Function],
              "is_NaN": [Function],
              "is_array": [Function],
              "is_boolean": [Function],
              "is_function": [Function],
              "is_list": [Function],
              "is_null": [Function],
              "is_number": [Function],
              "is_object": [Function],
              "is_pair": [Function],
              "is_string": [Function],
              "is_undefined": [Function],
              "list": [Function],
              "math_E": 2.718281828459045,
              "math_LN10": 2.302585092994046,
              "math_LN2": 0.6931471805599453,
              "math_LOG10E": 0.4342944819032518,
              "math_LOG2E": 1.4426950408889634,
              "math_PI": 3.141592653589793,
              "math_SQRT1_2": 0.7071067811865476,
              "math_SQRT2": 1.4142135623730951,
              "math_abs": [Function],
              "math_acos": [Function],
              "math_acosh": [Function],
              "math_asin": [Function],
              "math_asinh": [Function],
              "math_atan": [Function],
              "math_atan2": [Function],
              "math_atanh": [Function],
              "math_cbrt": [Function],
              "math_ceil": [Function],
              "math_clz32": [Function],
              "math_cos": [Function],
              "math_cosh": [Function],
              "math_exp": [Function],
              "math_expm1": [Function],
              "math_floor": [Function],
              "math_fround": [Function],
              "math_hypot": [Function],
              "math_imul": [Function],
              "math_log": [Function],
              "math_log10": [Function],
              "math_log1p": [Function],
              "math_log2": [Function],
              "math_max": [Function],
              "math_min": [Function],
              "math_pow": [Function],
              "math_random": [Function],
              "math_round": [Function],
              "math_sign": [Function],
              "math_sin": [Function],
              "math_sinh": [Function],
              "math_sqrt": [Function],
              "math_tan": [Function],
              "math_tanh": [Function],
              "math_trunc": [Function],
              "pair": [Function],
              "parse": [Function],
              "parse_int": [Function],
              "prompt": [Function],
              "raw_display": [Function],
              "set_head": [Function],
              "set_tail": [Function],
              "stream": [Function],
              "stringify": [Function],
              "tail": [Function],
              "timed": [Function],
              "tokenize": [Function],
              "undefined": undefined,
            },
            "heap": Heap {
              "storage": null,
            },
            "id": "-1",
            "name": "global",
            "tail": null,
          },
        ],
        "isRunning": false,
        "nodes": Array [],
        "objectCount": 0,
        "stash": null,
        "transformers": Transformers {
          "items": Map {},
          "parent": null,
        },
        "value": undefined,
      },
      "shouldIncreaseEvaluationTimeout": false,
      "typeEnvironment": Array [
        Object {
          "declKindMap": Map {
            "Infinity" => "const",
            "NaN" => "const",
            "undefined" => "const",
            "math_E" => "const",
            "math_LN2" => "const",
            "math_LN10" => "const",
            "math_LOG2E" => "const",
            "math_LOG10E" => "const",
            "math_PI" => "const",
            "math_SQRT1_2" => "const",
            "math_SQRT2" => "const",
            "is_boolean" => "const",
            "is_number" => "const",
            "is_string" => "const",
            "is_undefined" => "const",
            "is_function" => "const",
            "math_abs" => "const",
            "math_acos" => "const",
            "math_acosh" => "const",
            "math_asin" => "const",
            "math_asinh" => "const",
            "math_atan" => "const",
            "math_atan2" => "const",
            "math_atanh" => "const",
            "math_cbrt" => "const",
            "math_ceil" => "const",
            "math_clz32" => "const",
            "math_cos" => "const",
            "math_cosh" => "const",
            "math_exp" => "const",
            "math_expm1" => "const",
            "math_floor" => "const",
            "math_fround" => "const",
            "math_hypot" => "const",
            "math_imul" => "const",
            "math_log" => "const",
            "math_log1p" => "const",
            "math_log2" => "const",
            "math_log10" => "const",
            "math_max" => "const",
            "math_min" => "const",
            "math_pow" => "const",
            "math_random" => "const",
            "math_round" => "const",
            "math_sign" => "const",
            "math_sin" => "const",
            "math_sinh" => "const",
            "math_sqrt" => "const",
            "math_tan" => "const",
            "math_tanh" => "const",
            "math_trunc" => "const",
            "parse_int" => "const",
            "prompt" => "const",
            "get_time" => "const",
            "stringify" => "const",
            "display" => "const",
            "error" => "const",
            "-_1" => "const",
            "!" => "const",
            "&&" => "const",
            "||" => "const",
            "<" => "const",
            "<=" => "const",
            ">" => "const",
            ">=" => "const",
            "+" => "const",
            "%" => "const",
            "-" => "const",
            "*" => "const",
            "/" => "const",
            "pair" => "const",
            "head" => "const",
            "tail" => "const",
            "is_pair" => "const",
            "is_null" => "const",
            "is_list" => "const",
            "list" => "const",
            "===" => "const",
            "!==" => "const",
            "set_head" => "const",
            "set_tail" => "const",
            "is_array" => "const",
            "array_length" => "const",
            "raw_display" => "const",
            "char_at" => "const",
            "arity" => "const",
            "draw_data" => "const",
            "display_list" => "const",
            "stream" => "const",
            "parse" => "const",
            "tokenize" => "const",
            "apply_in_underlying_javascript" => "const",
            "call_cc" => "const",
            "is_object" => "const",
            "is_NaN" => "const",
            "has_own_property" => "const",
            "alert" => "const",
            "timed" => "const",
          },
          "typeAliasMap": Map {
            "Pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "headType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                "kind": "pair",
                "tailType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              ],
            },
            "List" => Object {
              "kind": "forall",
              "polyType": Object {
                "elementType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
                "kind": "list",
                "typeAsPair": undefined,
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
            "Stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "Stream",
                    "typeArgs": Array [
                      Object {
                        "constraint": "none",
                        "kind": "variable",
                        "name": "T",
                        "typeArgs": undefined,
                      },
                    ],
                  },
                },
              },
              "typeParams": Array [
                Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              ],
            },
          },
          "typeMap": Map {
            "Infinity" => Object {
              "kind": "primitive",
              "name": "number",
              "value": Infinity,
            },
            "NaN" => Object {
              "kind": "primitive",
              "name": "number",
              "value": NaN,
            },
            "undefined" => Object {
              "kind": "primitive",
              "name": "undefined",
              "value": undefined,
            },
            "math_E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.718281828459045,
            },
            "math_LN2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.6931471805599453,
            },
            "math_LN10" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 2.302585092994046,
            },
            "math_LOG2E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4426950408889634,
            },
            "math_LOG10E" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.4342944819032518,
            },
            "math_PI" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 3.141592653589793,
            },
            "math_SQRT1_2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 0.7071067811865476,
            },
            "math_SQRT2" => Object {
              "kind": "primitive",
              "name": "number",
              "value": 1.4142135623730951,
            },
            "is_boolean" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_number" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_string" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_undefined" => Object {
              "ifTrueType": Object {
                "kind": "primitive",
                "name": "undefined",
                "value": undefined,
              },
              "kind": "predicate",
            },
            "is_function" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "kind": "function",
                  "parameterTypes": Array [
                    Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                  ],
                  "returnType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "U",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "math_abs" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_acosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_asinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atan2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_atanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cbrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_ceil" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_clz32" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cos" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_cosh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_exp" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_expm1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_floor" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_fround" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_hypot" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_imul" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log1p" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log2" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_log10" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_max" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_min" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "math_pow" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_random" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_round" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sign" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sin" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sinh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_sqrt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tan" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_tanh" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "math_trunc" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "parse_int" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "prompt" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "string",
                "value": undefined,
              },
            },
            "get_time" => Object {
              "kind": "function",
              "parameterTypes": Array [],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "stringify" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "string",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "error" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "-_1" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "!" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "boolean",
                "value": undefined,
              },
            },
            "&&" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "||" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "kind": "primitive",
                    "name": "boolean",
                    "value": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "T",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "<=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            ">=" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "+" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                  Object {
                    "constraint": "addable",
                    "kind": "variable",
                    "name": "A",
                  },
                ],
                "returnType": Object {
                  "constraint": "addable",
                  "kind": "variable",
                  "name": "A",
                },
              },
              "typeParams": undefined,
            },
            "%" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "-" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "*" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "/" => Object {
              "kind": "function",
              "parameterTypes": Array [
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
                Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              ],
              "returnType": Object {
                "kind": "primitive",
                "name": "number",
                "value": undefined,
              },
            },
            "pair" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
              },
              "typeParams": undefined,
            },
            "head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "headType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                ],
                "returnType": Object {
                  "constraint": "none",
                  "kind": "variable",
                  "name": "tailType",
                  "typeArgs": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_pair" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "headType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                  "kind": "pair",
                  "tailType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_null" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "is_list" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "list",
                  "typeAsPair": undefined,
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "===" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "!==" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T1",
                    "typeArgs": undefined,
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T2",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "boolean",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_head" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "headType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "set_tail" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "headType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "headType",
                      "typeArgs": undefined,
                    },
                    "kind": "pair",
                    "tailType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "tailType",
                      "typeArgs": undefined,
                    },
                  },
                  Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "tailType",
                    "typeArgs": undefined,
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "undefined",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "is_array" => Object {
              "ifTrueType": Object {
                "kind": "forall",
                "polyType": Object {
                  "elementType": Object {
                    "constraint": "none",
                    "kind": "variable",
                    "name": "T",
                    "typeArgs": undefined,
                  },
                  "kind": "array",
                },
                "typeParams": undefined,
              },
              "kind": "predicate",
            },
            "array_length" => Object {
              "kind": "forall",
              "polyType": Object {
                "kind": "function",
                "parameterTypes": Array [
                  Object {
                    "elementType": Object {
                      "constraint": "none",
                      "kind": "variable",
                      "name": "T",
                      "typeArgs": undefined,
                    },
                    "kind": "array",
                  },
                ],
                "returnType": Object {
                  "kind": "primitive",
                  "name": "number",
                  "value": undefined,
                },
              },
              "typeParams": undefined,
            },
            "raw_display" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "char_at" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "arity" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "draw_data" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "display_list" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "stream" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "parse" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "tokenize" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "apply_in_underlying_javascript" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "call_cc" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_object" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "is_NaN" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "has_own_property" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "alert" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
            "timed" => Object {
              "kind": "forall",
              "polyType": Object {
                "constraint": "none",
                "kind": "variable",
                "name": "T1",
                "typeArgs": undefined,
              },
              "typeParams": undefined,
            },
          },
        },
      ],
      "unTypecheckedCode": Array [
        "stringify(parse(\\"a[b] = 5; a.b = value; a[5] = 'value'; a['b'] = 42;\\"), undefined, 2);",
        "

// equal computes the structural equality
// over its arguments

function equal(xs, ys) {
  return is_pair(xs)
  ? (is_pair(ys) &&
    equal(head(xs), head(ys)) &&
    equal(tail(xs), tail(ys)))
  : is_null(xs)
  ? is_null(ys)
  : is_number(xs)
  ? (is_number(ys) && xs === ys)
  : is_boolean(xs)
  ? (is_boolean(ys) && ((xs && ys) || (!xs && !ys)))
  : is_string(xs)
  ? (is_string(ys) && xs === ys)
  : is_undefined(xs)
  ? is_undefined(ys)
  : is_function(xs)
    // we know now that xs is a function,
    // but we use an if check anyway to make use of the type predicate
  ? (is_function(ys) && xs === ys)
  : false;
}


// returns the length of a given argument list
// assumes that the argument is a list

function $length(xs, acc) {
    return is_null(xs) ? acc : $length(tail(xs), acc + 1);
}
function length(xs) {
  return $length(xs, 0);
}

// map applies first arg f, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// f is applied element-by-element:
// map(f, list(1, 2)) results in list(f(1), f(2))

function $map(f, xs, acc) {
    return is_null(xs)
           ? reverse(acc)
           : $map(f, tail(xs), pair(f(head(xs)), acc));
}
function map(f, xs) {
    return $map(f, xs, null);
}

// build_list takes a a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_list returns a list of n elements, that results from
// applying fun to the numbers from 0 to n-1.

function $build_list(i, fun, already_built) {
    return i < 0 ? already_built : $build_list(i - 1, fun, pair(fun(i), already_built));
}

function build_list(fun, n) {
  return $build_list(n - 1, fun, null);
}

// for_each applies first arg fun, assumed to be a unary function,
// to the elements of the second argument, assumed to be a list.
// fun is applied element-by-element:
// for_each(fun, list(1, 2)) results in the calls fun(1) and fun(2).
// for_each returns true.

function for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return for_each(fun, tail(xs));
  }
}

// list_to_string returns a string that represents the argument list.
// It applies itself recursively on the elements of the given list.
// When it encounters a non-list, it applies to_string to it.

function $list_to_string(xs, cont) {
    return is_null(xs)
        ? cont(\\"null\\")
        : is_pair(xs)
        ? $list_to_string(
              head(xs),
              x => $list_to_string(
                       tail(xs),
                       y => cont(\\"[\\" + x + \\",\\" + y + \\"]\\")))
        : cont(stringify(xs));
}

function list_to_string(xs) {
    return $list_to_string(xs, x => x);
}

// reverse reverses the argument, assumed to be a list

function $reverse(original, reversed) {
    return is_null(original)
           ? reversed
           : $reverse(tail(original), pair(head(original), reversed));
}

function reverse(xs) {
    return $reverse(xs, null);
}

// append first argument, assumed to be a list, to the second argument.
// In the result null at the end of the first argument list
// is replaced by the second argument, regardless what the second
// argument consists of.

function $append(xs, ys, cont) {
    return is_null(xs)
           ? cont(ys)
           : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)));
}

function append(xs, ys) {
    return $append(xs, ys, xs => xs);
}

// member looks for a given first-argument element in the
// second argument, assumed to be a list. It returns the first
// postfix sublist that starts with the given element. It returns null if the
// element does not occur in the list

function member(v, xs) {
  return is_null(xs)
         ? null
	 : v === head(xs)
	 ? xs
	 : member(v, tail(xs));
}

// removes the first occurrence of a given first-argument element
// in second-argument, assmed to be a list. Returns the original
// list if there is no occurrence.

function $remove(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? app(rev(acc), tail(xs))
         : $remove(v, tail(xs), pair(head(xs), acc));
}

function remove(v, xs) {
    return $remove(v, xs, null);
}

// Similar to remove, but removes all instances of v
// instead of just the first

function $remove_all(v, xs, acc) {
  // Ensure that typechecking of append and reverse are done independently
  const app = append;
  const rev = reverse;
  return is_null(xs)
         ? app(rev(acc), xs)
         : v === head(xs)
         ? $remove_all(v, tail(xs), acc)
         : $remove_all(v, tail(xs), pair(head(xs), acc));
}

function remove_all(v, xs) {
    return $remove_all(v, xs, null);
}

// filter returns the sublist of elements of the second argument
// (assumed to be a list), for which the given predicate function
// returns true.

function $filter(pred, xs, acc) {
  return is_null(xs)
    ? reverse(acc)
    : pred(head(xs))
    ? $filter(pred, tail(xs), pair(head(xs), acc))
    : $filter(pred, tail(xs), acc);
}

function filter(pred, xs) {
    return $filter(pred, xs, null);
}

// enumerates numbers starting from start, assumed to be a number,
// using a step size of 1, until the number exceeds end, assumed
// to be a number

function $enum_list(start, end, acc) {
  // Ensure that typechecking of reverse are done independently
  const rev = reverse;
  return start > end
         ? rev(acc)
         : $enum_list(start + 1, end, pair(start, acc));
}

function enum_list(start, end) {
    return $enum_list(start, end, null);
}

// Returns the item in xs (assumed to be a list) at index n,
// assumed to be a nonnegative integer.
// Note: the first item is at position 0

function list_ref(xs, n) {
  return n === 0
         ? head(xs)
         : list_ref(tail(xs), n - 1);
}

// accumulate applies an operation op (assumed to be a binary function)
// to elements of sequence (assumed to be a list) in a right-to-left order.
// first apply op to the last element and initial, resulting in r1, then to
// the  second-last element and r1, resulting in r2, etc, and finally
// to the first element and r_n-1, where n is the length of the
// list.
// accumulate(op, zero, list(1, 2, 3)) results in
// op(1, op(2, op(3, zero)))

function $accumulate(f, initial, xs, cont) {
    return is_null(xs)
           ? cont(initial)
           : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)));
}

function accumulate(f, initial, xs) {
  return $accumulate(f, initial, xs, x => x);
}

function __access_named_export__(named_exports, lookup_name) {
  if (is_null(named_exports)) {
    return undefined;
  } else {
    const name = head(head(named_exports));
    const identifier = tail(head(named_exports));
    if (name === lookup_name) {
      return identifier;
    } else {
      return __access_named_export__(tail(named_exports), lookup_name);
    }
  }
}

function __access_export__(exports, lookup_name) {
  if (lookup_name === \\"default\\") {
    return head(exports);
  } else {
    const named_exports = tail(exports);
    return __access_named_export__(named_exports, lookup_name);
  }
}


// Supporting streams in the Scheme style, following
// \\"stream discipline\\"

// stream_tail returns the second component of the given pair
// throws an error if the argument is not a pair

function stream_tail(xs) {
  if (is_pair(xs)) {
    const the_tail = tail(xs);
    if (is_function(the_tail)) {
      return the_tail();
    } else {
      error(the_tail,
        'stream_tail(xs) expects a function as ' +
        'the tail of the argument pair xs, ' +
        'but encountered ');
    }
  } else {
    error(xs, 'stream_tail(xs) expects a pair as ' +
      'argument xs, but encountered ');
  }
}

// is_stream recurses down the stream and checks that it ends with the
// empty list null

function is_stream(xs) {
  return is_null(xs) ||
    (is_pair(xs) &&
    is_function(tail(xs)) &&
    arity(tail(xs)) === 0 &&
    is_stream(stream_tail(xs)));
}

// A stream is either null or a pair whose tail is
// a nullary function that returns a stream.

function list_to_stream(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs),
      () => list_to_stream(tail(xs)));
}

// stream_to_list transforms a given stream to a list
// Lazy? No: stream_to_list needs to force the whole stream
function stream_to_list(xs) {
  return is_null(xs)
    ? null
    : pair(head(xs), stream_to_list(stream_tail(xs)));
}

// stream_length returns the length of a given argument stream
// throws an exception if the argument is not a stream
// Lazy? No: The function needs to explore the whole stream
function stream_length(xs) {
  return is_null(xs)
    ? 0
    : 1 + stream_length(stream_tail(xs));
}

// stream_map applies first arg f to the elements of the second
// argument, assumed to be a stream.
// f is applied element-by-element:
// stream_map(f,list_to_stream(list(1,2)) results in
// the same as list_to_stream(list(f(1),f(2)))
// stream_map throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? Yes: The argument stream is only explored as forced by
//            the result stream.
function stream_map(f, s) {
  return is_null(s)
    ? null
    : pair(f(head(s)),
      () => stream_map(f, stream_tail(s)));
}

// build_stream takes a function fun as first argument, 
// and a nonnegative integer n as second argument,
// build_stream returns a stream of n elements, that results from
// applying fun to the numbers from 0 to n-1.
// Lazy? Yes: The result stream forces the applications of fun
//            for the next element
function build_stream(fun, n) {
  function build(i) {
    return i >= n
      ? null
      : pair(fun(i),
        () => build(i + 1));
  }
  return build(0);
}

// stream_for_each applies first arg fun to the elements of the stream
// passed as second argument. fun is applied element-by-element:
// for_each(fun,list_to_stream(list(1, 2,null))) results in the calls fun(1)
// and fun(2).
// stream_for_each returns true.
// stream_for_each throws an exception if the second argument is not a
// stream, and if the second argument is a nonempty stream and the
// first argument is not a function.
// Lazy? No: stream_for_each forces the exploration of the entire stream
function stream_for_each(fun, xs) {
  if (is_null(xs)) {
    return true;
  } else {
    fun(head(xs));
    return stream_for_each(fun, stream_tail(xs));
  }
}

// stream_reverse reverses the argument stream
// stream_reverse throws an exception if the argument is not a stream.
// Lazy? No: stream_reverse forces the exploration of the entire stream
function stream_reverse(xs) {
  function rev(original, reversed) {
    return is_null(original)
      ? reversed
      : rev(stream_tail(original),
        pair(head(original), () => reversed));
  }
  return rev(xs, null);
}

// stream_append appends first argument stream and second argument stream.
// In the result, null at the end of the first argument stream
// is replaced by the second argument stream
// stream_append throws an exception if the first argument is not a
// stream.
// Lazy? Yes: the result stream forces the actual append operation
function stream_append(xs, ys) {
  return is_null(xs)
    ? ys
    : pair(head(xs),
      () => stream_append(stream_tail(xs), ys));
}

// stream_member looks for a given first-argument element in a given
// second argument stream. It returns the first postfix substream
// that starts with the given element. It returns null if the
// element does not occur in the stream
// Lazy? Sort-of: stream_member forces the stream only until the element is found.
function stream_member(x, s) {
  return is_null(s)
    ? null
    : head(s) === x
      ? s
      : stream_member(x, stream_tail(s));
}

// stream_remove removes the first occurrence of a given first-argument element
// in a given second-argument list. Returns the original list
// if there is no occurrence.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_tail(xs)
      : pair(head(xs),
        () => stream_remove(v, stream_tail(xs)));
}

// stream_remove_all removes all instances of v instead of just the first.
// Lazy? Yes: the result stream forces the construction of each next element
function stream_remove_all(v, xs) {
  return is_null(xs)
    ? null
    : v === head(xs)
      ? stream_remove_all(v, stream_tail(xs))
      : pair(head(xs), () => stream_remove_all(v, stream_tail(xs)));
}

// filter returns the substream of elements of given stream s
// for which the given predicate function p returns true.
// Lazy? Yes: The result stream forces the construction of
//            each next element. Of course, the construction
//            of the next element needs to go down the stream
//            until an element is found for which p holds.
function stream_filter(p, s) {
  return is_null(s)
    ? null
    : p(head(s))
      ? pair(head(s),
        () => stream_filter(p, stream_tail(s)))
      : stream_filter(p, stream_tail(s));
}

// enumerates numbers starting from start,
// using a step size of 1, until the number
// exceeds end.
// Lazy? Yes: The result stream forces the construction of
//            each next element
function enum_stream(start, end) {
  return start > end
    ? null
    : pair(start,
      () => enum_stream(start + 1, end));
}

// integers_from constructs an infinite stream of integers
// starting at a given number n
// Lazy? Yes: The result stream forces the construction of
//            each next element
function integers_from(n) {
  return pair(n,
    () => integers_from(n + 1));
}

// eval_stream constructs the list of the first n elements
// of a given stream s
// Lazy? Sort-of: eval_stream only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function eval_stream(s, n) {
    function es(s, n) {
        return n === 1 
               ? list(head(s))
               : pair(head(s), 
                      es(stream_tail(s), n - 1));
    }
    return n === 0 
           ? null
           : es(s, n);
}

// Returns the item in stream s at index n (the first item is at position 0)
// Lazy? Sort-of: stream_ref only forces the computation of
//                the first n elements, and leaves the rest of
//                the stream untouched.
function stream_ref(s, n) {
  return n === 0
    ? head(s)
    : stream_ref(stream_tail(s), n - 1);
}
",
      ],
      "variant": "default",
      "visualiseListResult": Array [],
    },
    "status": "finished",
    "value": "[ \\"sequence\\",
[ [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"name\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"property\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"name\\",
      [ \\"value\\",
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"literal\\",
      [ \\"value\\",
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"literal\\",
      [ 42,
      null]],
    null]]],
  null]]]],
null]]",
  },
}
`;
