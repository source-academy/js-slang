// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arity ignores the rest parameter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity(display);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with function with parameters is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity(arity);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with non-function arg f throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity('function');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: arity expects a function as argument",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`arity with nullary function is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity(math_random);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with user-made function is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(x, y) {
  return x + y;
}
arity(test);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with user-made function with rest parameter is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(...xs) {
  return xs;
}
arity(test);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with user-made lambda function is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity(x => x);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arity with user-made nullary function is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "arity(() => undefined);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`char_at with non nonnegative integer second argument errors: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "char_at('', -1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: char_at expects the second argument to be a nonnegative integer.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`char_at with non nonnegative integer second argument errors: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "char_at('', \\"\\");",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: char_at expects the second argument to be a nonnegative integer.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`char_at with non string first argument errors: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "char_at(42, 123);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: char_at expects the first argument to be a string.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`char_at with valid args (but index out of bounds) returns undefined: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "char_at(\\"123\\", 3);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`char_at with valid args is ok: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "char_at(\\"123\\", 0);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "1",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with non-integer arg radix throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int(42, 2.1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: parse_int expects two arguments a string s, and a positive integer i between 2 and 36, inclusive.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with non-string arg str throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int(42, 2);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: parse_int expects two arguments a string s, and a positive integer i between 2 and 36, inclusive.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with radix outside [2, 36] throws error, radix=1: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int('10', 1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: parse_int expects two arguments a string s, and a positive integer i between 2 and 36, inclusive.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with radix outside [2, 36] throws error, radix=37: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int('10', 37);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: parse_int expects two arguments a string s, and a positive integer i between 2 and 36, inclusive.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with string arg radix throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int(42, '2');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: parse_int expects two arguments a string s, and a positive integer i between 2 and 36, inclusive.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with valid args is ok, but invalid str for radix: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int('uu1', 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": NaN,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with valid args is ok, radix 2: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int('1100101010101', 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6485,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`parse_int with valid args is ok, radix 36: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "parse_int('uu1', 36);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 39961,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
