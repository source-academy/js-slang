// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 215: Error: head(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 216: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 216: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 214: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list(x => x, '1');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 70: Expected number on left hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 202: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 200: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 200: Expected number on right hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Expected 3 arguments, but got 2.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Expected 3 arguments, but got 2.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error append: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "append([1, 2, 3], list(1, 2, 3));",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 128: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error assoc: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "assoc(1, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Name assoc not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error filter: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "filter(x => true, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 186: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error for_each: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for_each(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 83: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error length: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "length([1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 40: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error map: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "map(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 54: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error member: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "member(1, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 143: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 155: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove_all: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove_all(1, [1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 170: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error reverse: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "reverse([1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 113: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_head([1, 2, 3], 4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: set_head(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_tail([1, 2, 3], 4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: set_tail(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`accumulate: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(append(list(123, 123), list(456, 456, 456)), list(123, 123, 456, 456, 456));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(build_list(x => x * x, 5), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list MCE fuzz test: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(parse('const twice = f => x => {const result = f(f(x)); return two;};'));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(\\"constant_declaration\\",
     list(\\"name\\", \\"twice\\"),
     list(\\"lambda_expression\\",
          list(list(\\"name\\", \\"f\\")),
          list(\\"return_statement\\",
               list(\\"lambda_expression\\",
                    list(list(\\"name\\", \\"x\\")),
                    list(\\"block\\",
                         list(\\"sequence\\",
                              list(list(\\"constant_declaration\\",
                                        list(\\"name\\", \\"result\\"),
                                        list(\\"application\\",
                                             list(\\"name\\", \\"f\\"),
                                             list(list(\\"application\\", list(\\"name\\", \\"f\\"), list(list(\\"name\\", \\"x\\")))))),
                                   list(\\"return_statement\\", list(\\"name\\", \\"two\\")))))))))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list checks prepend type: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => i, 5), true);
0; // suppress long result in snapshot",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: TypeError: display_list expects the second argument to be a string",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1, 2, 3);
set_tail(tail(tail(p)), p);
display_list(p);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[1, [2, [3, ...<circular>]]]",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list of list of infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_inf(3, i => build_list(i => build_inf(i, i=>i), i)));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[ null,
[ list([0, ...<circular>]),
[ list([0, ...<circular>], [0, [1, ...<circular>]]),
[ list([0, ...<circular>], [0, [1, ...<circular>]], [0, [1, [2, ...<circular>]]]),
...<circular>]]]]",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1);
set_tail(p, p);
display_list(p);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[1, ...<circular>]",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list list of infinite list of list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_list(i => build_inf(i, i => build_list(i => i, i)), 3));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list([null, ...<circular>],
     [null, [list(0), ...<circular>]],
     [null, [list(0), [list(0, 1), ...<circular>]]])",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list list of infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = i => {
  const t = list(i);
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(n, p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_list(build_inf, 5));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list([0, ...<circular>],
     [0, [1, ...<circular>]],
     [0, [1, [2, ...<circular>]]],
     [0, [1, [2, [3, ...<circular>]]]],
     [0, [1, [2, [3, [4, ...<circular>]]]]])",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list returns argument: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const xs = build_list(i => i, 5);
xs === display_list(xs);
// Note reference equality",
  "displayResult": Array [
    "list(0, 1, 2, 3, 4)",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list returns cyclic argument: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
const xs = build_inf(5, i=>i);
xs === display_list(xs);
// Note reference equality",
  "displayResult": Array [
    "[0, [1, [2, [3, [4, [5, ...<circular>]]]]]]",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list reusing lists 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p1 = pair(1, null);
const p2 = pair(2, p1);
const p3 = list(p1, p2);
display_list(p3);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(list(1), list(2, 1))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list reusing lists: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1);
const p2 = pair(p, p);
const p3 = list(p, p2);
display_list(p3);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(list(1), list(list(1), 1))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => build_list(j => j, i), 5));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null, list(0), list(0, 1), list(0, 1, 2), list(0, 1, 2, 3))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic multiline: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => build_list(j => j, i), 20));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list(0),
     list(0, 1),
     list(0, 1, 2),
     list(0, 1, 2, 3),
     list(0, 1, 2, 3, 4),
     list(0, 1, 2, 3, 4, 5),
     list(0, 1, 2, 3, 4, 5, 6),
     list(0, 1, 2, 3, 4, 5, 6, 7),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic with pairs 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => build_list(j => pair(build_list(k => k, j), j), i), 5));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list([null, 0]),
     list([null, 0], [list(0), 1]),
     list([null, 0], [list(0), 1], [list(0, 1), 2]),
     list([null, 0], [list(0), 1], [list(0, 1), 2], [list(0, 1, 2), 3]))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic with pairs: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => build_list(j => pair(j, j), i), 5));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list([0, 0]),
     list([0, 0], [1, 1]),
     list([0, 0], [1, 1], [2, 2]),
     list([0, 0], [1, 1], [2, 2], [3, 3]))",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => i, 5));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(0, 1, 2, 3, 4)",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`display_list supports prepend string: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(i => i, 5), \\"build_list:\\");
0; // suppress long result in snapshot",
  "displayResult": Array [
    "build_list: list(0, 1, 2, 3, 4)",
  ],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 0,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`empty list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1, 5), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`equal: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "!equal(1, x => x) && !equal(x => x, 1);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
for_each(x => {
  sum = sum + x;
}, list(1, 2, 3));
sum;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`head works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list creates list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() { return 1; }
list(1, 'a string \\"\\"', () => f, f, true, 3.14);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    Array [
      "a string \\"\\"",
      Array [
        [Function],
        Array [
          [Function],
          Array [
            true,
            Array [
              3.14,
              null,
            ],
          ],
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_to_string: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_to_string(list(1, 2, 3));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "[1,[2,[3,null]]]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  member(4, list(1, 2, 3, 4, 123, 456, 789)),
  list(4, 123, 456, 789));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "head([1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail([1, 2, 3]);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`pair creates pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, 'a string \\"\\"');",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    "a string \\"\\"",
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(2, list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(2, 3, 4)), list(2, 3, 4));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(1, 2, 3, 4, 1, 1, 1, 5, 1, 1, 6)), list(2, 3, 4, 5, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(reverse(list(\\"string\\", \\"null\\", \\"undefined\\", \\"null\\", 123)), list(123, \\"null\\", \\"undefined\\", \\"null\\", \\"string\\"));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`set_head: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_head(p, 3);
p === q && equal(p, pair(3, 2));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`set_tail: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_tail(p, 3);
p === q && equal(p, pair(1, 3));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`tail of a 1 element list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "a string \\"\\"",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
