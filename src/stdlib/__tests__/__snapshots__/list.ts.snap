// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accumulate: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((curr, acc) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", curr, acc, 1, 26) }), \\\\\\"(curr, acc) => curr + acc\\\\\\"), 0, callIfFuncAndRightArgs(list, 1, 41, 2, 3, 4, 1));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(append(list(\\"string\\", 123), list(456, null, undefined)), list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(append, 1, 6, callIfFuncAndRightArgs(list, 1, 13, \\\\\\"string\\\\\\", 123), callIfFuncAndRightArgs(list, 1, 34, 456, null, undefined)), callIfFuncAndRightArgs(list, 1, 63, \\\\\\"string\\\\\\", 123, 456, null, undefined));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`assoc not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(assoc(2, list(pair(1, 2), pair(3, 4))), false);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(assoc, 1, 6, 2, callIfFuncAndRightArgs(list, 1, 15, callIfFuncAndRightArgs(pair, 1, 20, 1, 2), callIfFuncAndRightArgs(pair, 1, 32, 3, 4))), false);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`assoc: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(assoc(3, list(pair(1, 2), pair(3, 4))), pair(3, 4));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(assoc, 1, 6, 3, callIfFuncAndRightArgs(list, 1, 15, callIfFuncAndRightArgs(pair, 1, 20, 1, 2), callIfFuncAndRightArgs(pair, 1, 32, 3, 4))), callIfFuncAndRightArgs(pair, 1, 46, 3, 4));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: list_ref(xs, n) expects a positive integer as argument n, but encountered -1],
      "location": SourceLocation {
        "end": Position {
          "column": 27,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: list_ref(xs, n) expects a positive integer as argument n, but encountered -1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: list_ref(xs, n) expects a positive integer as argument n, but encountered 1.5],
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: list_ref(xs, n) expects a positive integer as argument n, but encountered 1.5",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: list_ref(xs, n) expects a positive integer as argument n, but encountered 1],
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: list_ref(xs, n) expects a positive integer as argument n, but encountered 1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list(-1, x => x);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: build_list(n, fun) expects a positive integer as argument n, but encountered -1],
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: build_list(n, fun) expects a positive integer as argument n, but encountered -1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error build_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "build_list(1.5, x => x);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: build_list(n, fun) expects a positive integer as argument n, but encountered 1.5],
      "location": SourceLocation {
        "end": Position {
          "column": 23,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: build_list(n, fun) expects a positive integer as argument n, but encountered 1.5",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error build_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "build_list('1', x => x);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: build_list(n, fun) expects a positive integer as argument n, but encountered 1],
      "location": SourceLocation {
        "end": Position {
          "column": 23,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: build_list(n, fun) expects a positive integer as argument n, but encountered 1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: enum_list(start, end) expects a number as argument start, but encountered 1],
      "location": SourceLocation {
        "end": Position {
          "column": 19,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: enum_list(start, end) expects a number as argument start, but encountered 1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: enum_list(start, end) expects a number as argument start, but encountered 1],
      "location": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: enum_list(start, end) expects a number as argument start, but encountered 1",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: enum_list(start, end) expects a number as argument start, but encountered 5],
      "location": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: enum_list(start, end) expects a number as argument start, but encountered 5",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(build_list(5, x => x * x), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(build_list, 1, 6, 5, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", x, x, 1, 25) }), \\\\\\"x => x * x\\\\\\")), callIfFuncAndRightArgs(list, 1, 33, 0, 1, 4, 9, 16));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`empty list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(list, 1, 0);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 6, 1.5, 5), callIfFuncAndRightArgs(list, 1, 25, 1.5, 2.5, 3.5, 4.5));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1, 5), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 6, 1, 5), callIfFuncAndRightArgs(list, 1, 23, 1, 2, 3, 4, 5));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(filter, 1, 6, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"<=\\\\\\", x, 4, 1, 18) }), \\\\\\"x => x <= 4\\\\\\"), callIfFuncAndRightArgs(list, 1, 26, 2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), callIfFuncAndRightArgs(list, 1, 72, 2, 1, 3, 4, 2));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
for_each(x => {
  sum = sum + x;
}, list(1, 2, 3));
sum;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let sum = 0;
    callIfFuncAndRightArgs(for_each, 2, 0, wrap(x => {
      sum = binaryOp(\\"+\\", sum, x, 3, 8);
    }, \\"x => {\\\\n  sum = sum + x;\\\\n}\\"), callIfFuncAndRightArgs(list, 4, 3, 1, 2, 3));
    const lastStatementResult = eval(\\"sum;\\");
    native.globals.set(\\"sum\\", {
      kind: \\"let\\",
      value: sum
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`head works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(head, 1, 0, callIfFuncAndRightArgs(pair, 1, 5, 1, 'a string \\\\\\"\\\\\\"'));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`list creates list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() { return 1; }
list(1, 'a string \\"\\"', () => a, f, true, 3.14);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    Array [
      "a string \\"\\"",
      Array [
        [Function],
        Array [
          [Function],
          Array [
            true,
            Array [
              3.14,
              null,
            ],
          ],
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3, \\\\\\"4\\\\\\", 4), 4);\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`list_to_string: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_to_string(list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "[1, [2, [3, null]]]",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_to_string, 1, 0, callIfFuncAndRightArgs(list, 1, 15, 1, 2, 3));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(map, 1, 6, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", 2, x, 1, 15) }), \\\\\\"x => 2 * x\\\\\\"), callIfFuncAndRightArgs(list, 1, 22, 12, 11, 3)), callIfFuncAndRightArgs(list, 1, 40, 24, 22, 6));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  member(\\"string\\", list(1, 2, 3, \\"string\\", 123, 456, null, undefined)),
  list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(member, 2, 2, \\\\\\"string\\\\\\", callIfFuncAndRightArgs(list, 2, 19, 1, 2, 3, \\\\\\"string\\\\\\", 123, 456, null, undefined)), callIfFuncAndRightArgs(list, 3, 2, \\\\\\"string\\\\\\", 123, 456, null, undefined));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error accumulate: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered undefined],
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered undefined",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error accumulate: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered undefined],
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered undefined",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error append: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "append([1, 2, 3], list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 32,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error assoc: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "assoc(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 19,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error filter: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "filter(x => true, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error for_each: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for_each(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: for_each expects a list as argument xs, but encountered 1,2,3],
      "location": SourceLocation {
        "end": Position {
          "column": 25,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: for_each expects a list as argument xs, but encountered 1,2,3",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "head([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error length: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "length([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error map: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "map(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error member: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "member(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error remove: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error remove_all: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove_all(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 24,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error reverse: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "reverse([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: reverse(xs) expects a list as argument xs, but encountered 1,2,3],
      "location": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: reverse(xs) expects a list as argument xs, but encountered 1,2,3",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error set_head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_head([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_head(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_head(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error set_tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_tail([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_tail(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_tail(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`pair creates pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, 'a string \\"\\"');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    "a string \\"\\"",
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(pair, 1, 0, 1, 'a string \\\\\\"\\\\\\"');\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(2, list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 2, callIfFuncAndRightArgs(list, 1, 10, 1));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 1, callIfFuncAndRightArgs(list, 1, 10, 1));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(2, 3, \\"1\\")), list(2, 3, \\"1\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(remove_all, 1, 6, 1, callIfFuncAndRightArgs(list, 1, 20, 2, 3, \\\\\\"1\\\\\\")), callIfFuncAndRightArgs(list, 1, 38, 2, 3, \\\\\\"1\\\\\\"));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(1, 2, 3, 4, 1, 1, \\"1\\", 5, 1, 1, 6)), list(2, 3, 4, \\"1\\", 5, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(remove_all, 1, 6, 1, callIfFuncAndRightArgs(list, 1, 20, 1, 2, 3, 4, 1, 1, \\\\\\"1\\\\\\", 5, 1, 1, 6)), callIfFuncAndRightArgs(list, 1, 62, 2, 3, 4, \\\\\\"1\\\\\\", 5, 6));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(reverse(list(\\"string\\", null, undefined, null, 123)), list(123, null, undefined, null, \\"string\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(reverse, 1, 6, callIfFuncAndRightArgs(list, 1, 14, \\\\\\"string\\\\\\", null, undefined, null, 123)), callIfFuncAndRightArgs(list, 1, 59, 123, null, undefined, null, \\\\\\"string\\\\\\"));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`set_head: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_head(p, 3);
p === q && equal(p, pair(3, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let p = callIfFuncAndRightArgs(pair, 1, 8, 1, 2);
    const q = p;
    callIfFuncAndRightArgs(set_head, 3, 0, p, 3);
    const lastStatementResult = eval(\\"boolOrErr(binaryOp(\\\\\\"===\\\\\\", p, q, 4, 0), 4, 0) && callIfFuncAndRightArgs(equal, 4, 11, p, callIfFuncAndRightArgs(pair, 4, 20, 3, 2));\\");
    native.globals.set(\\"p\\", {
      kind: \\"let\\",
      value: p
    });
    native.globals.set(\\"q\\", {
      kind: \\"const\\",
      value: q
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`set_tail: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_tail(p, 3);
p === q && equal(p, pair(1, 3));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    let p = callIfFuncAndRightArgs(pair, 1, 8, 1, 2);
    const q = p;
    callIfFuncAndRightArgs(set_tail, 3, 0, p, 3);
    const lastStatementResult = eval(\\"boolOrErr(binaryOp(\\\\\\"===\\\\\\", p, q, 4, 0), 4, 0) && callIfFuncAndRightArgs(equal, 4, 11, p, callIfFuncAndRightArgs(pair, 4, 20, 1, 3));\\");
    native.globals.set(\\"p\\", {
      kind: \\"let\\",
      value: p
    });
    native.globals.set(\\"q\\", {
      kind: \\"const\\",
      value: q
    });
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`tail of a 1 element list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, callIfFuncAndRightArgs(list, 1, 5, 1));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "a string \\"\\"",
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const boolOrErr = native.operators.get(\\"itselfIfBooleanElseError\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFunctionAndRightArgumentsElseError\\");
const wrap = native.properTailCalls.wrap;
const unaryOp = native.operators.get(\\"evaluateUnaryExpressionIfValidElseError\\");
const binaryOp = native.operators.get(\\"evaluateBinaryExpressionIfValidElseError\\");
const throwIfTimeout = native.operators.get(\\"throwIfExceedsTimeLimit\\");
(( <globals redacted> ) => {
  return (() => {
    const lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, callIfFuncAndRightArgs(pair, 1, 5, 1, 'a string \\\\\\"\\\\\\"'));\\");
    return lastStatementResult;
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
