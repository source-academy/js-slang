// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 27,
          "line": 163,
        },
        "start": Position {
          "column": 19,
          "line": 163,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 163: Error: head(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), 3);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 47,
          "line": 163,
        },
        "start": Position {
          "column": 39,
          "line": 163,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 163: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), unaryOp(\\\\\\"-\\\\\\", 1, 1, 24));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 47,
          "line": 163,
        },
        "start": Position {
          "column": 39,
          "line": 163,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 163: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), 1.5);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 163,
        },
        "start": Position {
          "column": 9,
          "line": 163,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 163: Expected string on right hand side of operation, got number.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), '1');\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list('1', x => x);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 61,
        },
        "start": Position {
          "column": 15,
          "line": 61,
        },
      },
      "severity": "Error",
      "side": " on left hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 61: Expected number on left hand side of operation, got string.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(build_list, 1, 0, '1', wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\", native));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 61,
          "line": 155,
        },
        "start": Position {
          "column": 52,
          "line": 155,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 155: Expected string on right hand side of operation, got number.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, '1', '5');\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 155,
        },
        "start": Position {
          "column": 9,
          "line": 155,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 155: Expected string on right hand side of operation, got number.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, '1', 5);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 155,
        },
        "start": Position {
          "column": 9,
          "line": 155,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 155: Expected number on right hand side of operation, got string.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, 1, '5');\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    InvalidNumberOfArguments {
      "calleeStr": "accumulate",
      "expected": 3,
      "got": 2,
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Expected 3 arguments, but got 2.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((x, y) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", 3, x, y, 1, 21) }), \\\\\\"(x, y) => x + y\\\\\\", native), [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    InvalidNumberOfArguments {
      "calleeStr": "accumulate",
      "expected": 3,
      "got": 2,
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Expected 3 arguments, but got 2.",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((x, y) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", 3, x, y, 1, 21) }), \\\\\\"(x, y) => x + y\\\\\\", native), [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error append: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "append([1, 2, 3], list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 41,
          "line": 107,
        },
        "start": Position {
          "column": 33,
          "line": 107,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 107: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(append, 1, 0, [1, 2, 3], callIfFuncAndRightArgs(list, 1, 18, 1, 2, 3));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error assoc: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "assoc(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": "assoc",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name assoc not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error filter: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "filter(x => true, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 19,
          "line": 145,
        },
        "start": Position {
          "column": 11,
          "line": 145,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 145: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(filter, 1, 0, wrap(x => ({   isTail: false,   value: true }), \\\\\\"x => true\\\\\\", native), [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error for_each: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for_each(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 74,
        },
        "start": Position {
          "column": 8,
          "line": 74,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 74: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(for_each, 1, 0, wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\", native), [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error length: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "length([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 46,
          "line": 40,
        },
        "start": Position {
          "column": 38,
          "line": 40,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 40: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(length, 1, 0, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error map: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "map(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 45,
          "line": 49,
        },
        "start": Position {
          "column": 37,
          "line": 49,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 49: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(map, 1, 0, wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\", native), [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error member: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "member(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 44,
          "line": 116,
        },
        "start": Position {
          "column": 36,
          "line": 116,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 116: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(member, 1, 0, 1, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 44,
          "line": 124,
        },
        "start": Position {
          "column": 36,
          "line": 124,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 124: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 1, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove_all: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove_all(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 133,
        },
        "start": Position {
          "column": 12,
          "line": 133,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 133: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove_all, 1, 0, 1, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error reverse: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "reverse([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 60,
          "line": 96,
        },
        "start": Position {
          "column": 46,
          "line": 96,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 96: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(reverse, 1, 0, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_head([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_head(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_head(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(set_head, 1, 0, [1, 2, 3], 4);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_tail([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_tail(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_tail(xs,x) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(set_tail, 1, 0, [1, 2, 3], 4);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`accumulate: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 10,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((curr, acc) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", 2, curr, acc, 1, 26) }), \\\\\\"(curr, acc) => curr + acc\\\\\\", native), 0, callIfFuncAndRightArgs(list, 1, 41, 2, 3, 4, 1));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(append(list(123, 123), list(456, 456, 456)), list(123, 123, 456, 456, 456));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(append, 1, 6, callIfFuncAndRightArgs(list, 1, 13, 123, 123), callIfFuncAndRightArgs(list, 1, 29, 456, 456, 456)), callIfFuncAndRightArgs(list, 1, 51, 123, 123, 456, 456, 456));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(build_list(5, x => x * x), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(build_list, 1, 6, 5, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", 2, x, x, 1, 25) }), \\\\\\"x => x * x\\\\\\", native)), callIfFuncAndRightArgs(list, 1, 33, 0, 1, 4, 9, 16));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list MCE fuzz test: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(parse('const twice = f => x => {const result = f(f(x)); return two;};'));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(\\"constant_declaration\\",
     list(\\"name\\", \\"twice\\"),
     list(\\"lambda_expression\\",
          list(list(\\"name\\", \\"f\\")),
          list(\\"return_statement\\",
               list(\\"lambda_expression\\",
                    list(list(\\"name\\", \\"x\\")),
                    list(\\"block\\",
                         list(\\"sequence\\",
                              list(list(\\"constant_declaration\\",
                                        list(\\"name\\", \\"result\\"),
                                        list(\\"application\\",
                                             list(\\"name\\", \\"f\\"),
                                             list(list(\\"application\\", list(\\"name\\", \\"f\\"), list(list(\\"name\\", \\"x\\")))))),
                                   list(\\"return_statement\\", list(\\"name\\", \\"two\\")))))))))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(parse, 1, 13, 'const twice = f => x => {const result = f(f(x)); return two;};'));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list checks prepend type: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>i), true);
0; // suppress long result in snapshot",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [TypeError: display_list expects the second argument to be a string],
      "location": SourceLocation {
        "end": Position {
          "column": 39,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: TypeError: display_list expects the second argument to be a string",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: false,
      value: i
    }), \\"i => i\\", native)), true);
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1, 2, 3);
set_tail(tail(tail(p)), p);
display_list(p);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[1, [2, [3, ...<circular>]]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const p = callIfFuncAndRightArgs(list, 1, 10, 1, 2, 3);
    callIfFuncAndRightArgs(set_tail, 2, 0, callIfFuncAndRightArgs(tail, 2, 9, callIfFuncAndRightArgs(tail, 2, 14, p)), p);
    callIfFuncAndRightArgs(display_list, 3, 0, p);
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"p\\", {
      kind: \\"const\\",
      getValue: () => {
        return p;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list of list of infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_inf(3, i => build_list(i, i => build_inf(i, i=>i))));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[ null,
[ list([0, ...<circular>]),
[ list([0, ...<circular>], [0, [1, ...<circular>]]),
[ list([0, ...<circular>], [0, [1, ...<circular>]], [0, [1, [2, ...<circular>]]]),
...<circular>]]]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const build_inf = wrap((i, f) => {
      const t = callIfFuncAndRightArgs(list, 2, 12, callIfFuncAndRightArgs(f, 2, 17, i));
      let p = t;
      const startTime = get_time();
      for (let n = binaryOp(\\"-\\", 3, i, 1, 4, 15); boolOrErr(binaryOp(\\">=\\", 3, n, 0, 4, 22), 4, 2); n = binaryOp(\\"-\\", 3, n, 1, 4, 34)) {
        throwIfTimeout(native, startTime, get_time(), 4, 2);
        p = callIfFuncAndRightArgs(pair, 5, 8, callIfFuncAndRightArgs(f, 5, 13, n), p);
      }
      callIfFuncAndRightArgs(set_tail, 7, 2, t, p);
      return {
        isTail: false,
        value: p
      };
    }, \\"(i, f) => {\\\\n  const t = list(f(i));\\\\n  let p = t;\\\\n  for (let n = i - 1; n >= 0; n = n - 1) {\\\\n    p = pair(f(n), p);\\\\n  }\\\\n  set_tail(t, p);\\\\n  return p;\\\\n}\\", native);
    callIfFuncAndRightArgs(display_list, 10, 0, callIfFuncAndRightArgs(build_inf, 10, 13, 3, wrap(i => ({
      isTail: true,
      function: build_list,
      functionName: \\"build_list\\",
      arguments: [i, wrap(i => ({
        isTail: true,
        function: build_inf,
        functionName: \\"build_inf\\",
        arguments: [i, wrap(i => ({
          isTail: false,
          value: i
        }), \\"i => i\\", native)],
        line: 10,
        column: 50
      }), \\"i => build_inf(i, i => i)\\", native)],
      line: 10,
      column: 31
    }), \\"i => build_list(i, i => build_inf(i, i => i))\\", native)));
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"build_inf\\", {
      kind: \\"const\\",
      getValue: () => {
        return build_inf;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1);
set_tail(p, p);
display_list(p);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "[1, ...<circular>]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const p = callIfFuncAndRightArgs(list, 1, 10, 1);
    callIfFuncAndRightArgs(set_tail, 2, 0, p, p);
    callIfFuncAndRightArgs(display_list, 3, 0, p);
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"p\\", {
      kind: \\"const\\",
      getValue: () => {
        return p;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list list of infinite list of list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_list(3, i => build_inf(i, i => build_list(i, i=>i))));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list([null, ...<circular>],
     [null, [list(0), ...<circular>]],
     [null, [list(0), [list(0, 1), ...<circular>]]])",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const build_inf = wrap((i, f) => {
      const t = callIfFuncAndRightArgs(list, 2, 12, callIfFuncAndRightArgs(f, 2, 17, i));
      let p = t;
      const startTime = get_time();
      for (let n = binaryOp(\\"-\\", 3, i, 1, 4, 15); boolOrErr(binaryOp(\\">=\\", 3, n, 0, 4, 22), 4, 2); n = binaryOp(\\"-\\", 3, n, 1, 4, 34)) {
        throwIfTimeout(native, startTime, get_time(), 4, 2);
        p = callIfFuncAndRightArgs(pair, 5, 8, callIfFuncAndRightArgs(f, 5, 13, n), p);
      }
      callIfFuncAndRightArgs(set_tail, 7, 2, t, p);
      return {
        isTail: false,
        value: p
      };
    }, \\"(i, f) => {\\\\n  const t = list(f(i));\\\\n  let p = t;\\\\n  for (let n = i - 1; n >= 0; n = n - 1) {\\\\n    p = pair(f(n), p);\\\\n  }\\\\n  set_tail(t, p);\\\\n  return p;\\\\n}\\", native);
    callIfFuncAndRightArgs(display_list, 10, 0, callIfFuncAndRightArgs(build_list, 10, 13, 3, wrap(i => ({
      isTail: true,
      function: build_inf,
      functionName: \\"build_inf\\",
      arguments: [i, wrap(i => ({
        isTail: true,
        function: build_list,
        functionName: \\"build_list\\",
        arguments: [i, wrap(i => ({
          isTail: false,
          value: i
        }), \\"i => i\\", native)],
        line: 10,
        column: 50
      }), \\"i => build_list(i, i => i)\\", native)],
      line: 10,
      column: 32
    }), \\"i => build_inf(i, i => build_list(i, i => i))\\", native)));
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"build_inf\\", {
      kind: \\"const\\",
      getValue: () => {
        return build_inf;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list list of infinite list: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = i => {
  const t = list(i);
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(n, p);
  }
  set_tail(t, p);
  return p;
};
display_list(build_list(5, build_inf));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list([0, ...<circular>],
     [0, [1, ...<circular>]],
     [0, [1, [2, ...<circular>]]],
     [0, [1, [2, [3, ...<circular>]]]],
     [0, [1, [2, [3, [4, ...<circular>]]]]])",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const build_inf = wrap(i => {
      const t = callIfFuncAndRightArgs(list, 2, 12, i);
      let p = t;
      const startTime = get_time();
      for (let n = binaryOp(\\"-\\", 3, i, 1, 4, 15); boolOrErr(binaryOp(\\">=\\", 3, n, 0, 4, 22), 4, 2); n = binaryOp(\\"-\\", 3, n, 1, 4, 34)) {
        throwIfTimeout(native, startTime, get_time(), 4, 2);
        p = callIfFuncAndRightArgs(pair, 5, 8, n, p);
      }
      callIfFuncAndRightArgs(set_tail, 7, 2, t, p);
      return {
        isTail: false,
        value: p
      };
    }, \\"i => {\\\\n  const t = list(i);\\\\n  let p = t;\\\\n  for (let n = i - 1; n >= 0; n = n - 1) {\\\\n    p = pair(n, p);\\\\n  }\\\\n  set_tail(t, p);\\\\n  return p;\\\\n}\\", native);
    callIfFuncAndRightArgs(display_list, 10, 0, callIfFuncAndRightArgs(build_list, 10, 13, 5, build_inf));
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"build_inf\\", {
      kind: \\"const\\",
      getValue: () => {
        return build_inf;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list returns argument: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const xs = build_list(5, i=>i);
xs === display_list(xs);
// Note reference equality",
  "displayResult": Array [
    "list(0, 1, 2, 3, 4)",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const xs = callIfFuncAndRightArgs(build_list, 1, 11, 5, wrap(i => ({
      isTail: false,
      value: i
    }), \\"i => i\\", native));
    lastStatementResult = eval(\\"binaryOp(\\\\\\"===\\\\\\", 3, xs, callIfFuncAndRightArgs(display_list, 2, 7, xs), 2, 0);\\");
    globals.variables.set(\\"xs\\", {
      kind: \\"const\\",
      getValue: () => {
        return xs;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list returns cyclic argument: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const build_inf = (i, f) => {
  const t = list(f(i));
  let p = t;
  for (let n = i - 1; n >= 0; n = n - 1) {
    p = pair(f(n), p);
  }
  set_tail(t, p);
  return p;
};
const xs = build_inf(5, i=>i);
xs === display_list(xs);
// Note reference equality",
  "displayResult": Array [
    "[0, [1, [2, [3, [4, [5, ...<circular>]]]]]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const build_inf = wrap((i, f) => {
      const t = callIfFuncAndRightArgs(list, 2, 12, callIfFuncAndRightArgs(f, 2, 17, i));
      let p = t;
      const startTime = get_time();
      for (let n = binaryOp(\\"-\\", 3, i, 1, 4, 15); boolOrErr(binaryOp(\\">=\\", 3, n, 0, 4, 22), 4, 2); n = binaryOp(\\"-\\", 3, n, 1, 4, 34)) {
        throwIfTimeout(native, startTime, get_time(), 4, 2);
        p = callIfFuncAndRightArgs(pair, 5, 8, callIfFuncAndRightArgs(f, 5, 13, n), p);
      }
      callIfFuncAndRightArgs(set_tail, 7, 2, t, p);
      return {
        isTail: false,
        value: p
      };
    }, \\"(i, f) => {\\\\n  const t = list(f(i));\\\\n  let p = t;\\\\n  for (let n = i - 1; n >= 0; n = n - 1) {\\\\n    p = pair(f(n), p);\\\\n  }\\\\n  set_tail(t, p);\\\\n  return p;\\\\n}\\", native);
    const xs = callIfFuncAndRightArgs(build_inf, 10, 11, 5, wrap(i => ({
      isTail: false,
      value: i
    }), \\"i => i\\", native));
    lastStatementResult = eval(\\"binaryOp(\\\\\\"===\\\\\\", 3, xs, callIfFuncAndRightArgs(display_list, 11, 7, xs), 11, 0);\\");
    globals.variables.set(\\"build_inf\\", {
      kind: \\"const\\",
      getValue: () => {
        return build_inf;
      }
    });
    globals.variables.set(\\"xs\\", {
      kind: \\"const\\",
      getValue: () => {
        return xs;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list reusing lists 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p1 = pair(1, null);
const p2 = pair(2, p1);
const p3 = list(p1, p2);
display_list(p3);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(list(1), list(2, 1))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const p1 = callIfFuncAndRightArgs(pair, 1, 11, 1, null);
    const p2 = callIfFuncAndRightArgs(pair, 2, 11, 2, p1);
    const p3 = callIfFuncAndRightArgs(list, 3, 11, p1, p2);
    callIfFuncAndRightArgs(display_list, 4, 0, p3);
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"p1\\", {
      kind: \\"const\\",
      getValue: () => {
        return p1;
      }
    });
    globals.variables.set(\\"p2\\", {
      kind: \\"const\\",
      getValue: () => {
        return p2;
      }
    });
    globals.variables.set(\\"p3\\", {
      kind: \\"const\\",
      getValue: () => {
        return p3;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list reusing lists: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const p = list(1);
const p2 = pair(p, p);
const p3 = list(p, p2);
display_list(p3);
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(list(1), list(list(1), 1))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const p = callIfFuncAndRightArgs(list, 1, 10, 1);
    const p2 = callIfFuncAndRightArgs(pair, 2, 11, p, p);
    const p3 = callIfFuncAndRightArgs(list, 3, 11, p, p2);
    callIfFuncAndRightArgs(display_list, 4, 0, p3);
    lastStatementResult = eval(\\"0;\\");
    globals.variables.set(\\"p\\", {
      kind: \\"const\\",
      getValue: () => {
        return p;
      }
    });
    globals.variables.set(\\"p2\\", {
      kind: \\"const\\",
      getValue: () => {
        return p2;
      }
    });
    globals.variables.set(\\"p3\\", {
      kind: \\"const\\",
      getValue: () => {
        return p3;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>build_list(i, j=>j)));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null, list(0), list(0, 1), list(0, 1, 2), list(0, 1, 2, 3))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: true,
      function: build_list,
      functionName: \\"build_list\\",
      arguments: [i, wrap(j => ({
        isTail: false,
        value: j
      }), \\"j => j\\", native)],
      line: 1,
      column: 30
    }), \\"i => build_list(i, j => j)\\", native)));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic multiline: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(20, i=>build_list(i, j=>j)));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list(0),
     list(0, 1),
     list(0, 1, 2),
     list(0, 1, 2, 3),
     list(0, 1, 2, 3, 4),
     list(0, 1, 2, 3, 4, 5),
     list(0, 1, 2, 3, 4, 5, 6),
     list(0, 1, 2, 3, 4, 5, 6, 7),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
     list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 20, wrap(i => ({
      isTail: true,
      function: build_list,
      functionName: \\"build_list\\",
      arguments: [i, wrap(j => ({
        isTail: false,
        value: j
      }), \\"j => j\\", native)],
      line: 1,
      column: 31
    }), \\"i => build_list(i, j => j)\\", native)));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic with pairs 2: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>build_list(i, j=>pair(build_list(j, k=>k), j))));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list([null, 0]),
     list([null, 0], [list(0), 1]),
     list([null, 0], [list(0), 1], [list(0, 1), 2]),
     list([null, 0], [list(0), 1], [list(0, 1), 2], [list(0, 1, 2), 3]))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: true,
      function: build_list,
      functionName: \\"build_list\\",
      arguments: [i, wrap(j => ({
        isTail: true,
        function: pair,
        functionName: \\"pair\\",
        arguments: [callIfFuncAndRightArgs(build_list, 1, 52, j, wrap(k => ({
          isTail: false,
          value: k
        }), \\"k => k\\", native)), j],
        line: 1,
        column: 47
      }), \\"j => pair(build_list(j, k => k), j)\\", native)],
      line: 1,
      column: 30
    }), \\"i => build_list(i, j => pair(build_list(j, k => k), j))\\", native)));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic with pairs: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>build_list(i, j=>pair(j, j))));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(null,
     list([0, 0]),
     list([0, 0], [1, 1]),
     list([0, 0], [1, 1], [2, 2]),
     list([0, 0], [1, 1], [2, 2], [3, 3]))",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: true,
      function: build_list,
      functionName: \\"build_list\\",
      arguments: [i, wrap(j => ({
        isTail: true,
        function: pair,
        functionName: \\"pair\\",
        arguments: [j, j],
        line: 1,
        column: 47
      }), \\"j => pair(j, j)\\", native)],
      line: 1,
      column: 30
    }), \\"i => build_list(i, j => pair(j, j))\\", native)));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list standard acyclic: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>i));
0; // suppress long result in snapshot",
  "displayResult": Array [
    "list(0, 1, 2, 3, 4)",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: false,
      value: i
    }), \\"i => i\\", native)));
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`display_list supports prepend string: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display_list(build_list(5, i=>i), \\"build_list:\\");
0; // suppress long result in snapshot",
  "displayResult": Array [
    "build_list: list(0, 1, 2, 3, 4)",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 0,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    callIfFuncAndRightArgs(display_list, 1, 0, callIfFuncAndRightArgs(build_list, 1, 13, 5, wrap(i => ({
      isTail: false,
      value: i
    }), \\"i => i\\", native)), \\"build_list:\\");
    lastStatementResult = eval(\\"0;\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`empty list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list, 1, 0);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 6, 1.5, 5), callIfFuncAndRightArgs(list, 1, 25, 1.5, 2.5, 3.5, 4.5));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1, 5), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(enum_list, 1, 6, 1, 5), callIfFuncAndRightArgs(list, 1, 23, 1, 2, 3, 4, 5));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`equal: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "!equal(1, x => x) && !equal(x => x, 1);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(filter, 1, 6, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"<=\\\\\\", 2, x, 4, 1, 18) }), \\\\\\"x => x <= 4\\\\\\", native), callIfFuncAndRightArgs(list, 1, 26, 2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), callIfFuncAndRightArgs(list, 1, 72, 2, 1, 3, 4, 2));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
for_each(x => {
  sum = sum + x;
}, list(1, 2, 3));
sum;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 6,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    let sum = 0;
    callIfFuncAndRightArgs(for_each, 2, 0, wrap(x => {
      sum = binaryOp(\\"+\\", 3, sum, x, 3, 8);
    }, \\"x => {\\\\n  sum = sum + x;\\\\n}\\", native), callIfFuncAndRightArgs(list, 4, 3, 1, 2, 3));
    lastStatementResult = eval(\\"sum;\\");
    globals.variables.set(\\"sum\\", {
      kind: \\"let\\",
      getValue: () => {
        return sum;
      },
      assignNewValue: function (unique) {
        return sum = unique;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`head works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(head, 1, 0, callIfFuncAndRightArgs(pair, 1, 5, 1, 'a string \\\\\\"\\\\\\"'));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list creates list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() { return 1; }
list(1, 'a string \\"\\"', () => f, f, true, 3.14);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": Array [
    1,
    Array [
      "a string \\"\\"",
      Array [
        [Function],
        Array [
          [Function],
          Array [
            true,
            Array [
              3.14,
              null,
            ],
          ],
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const f = wrap(() => {
      return {
        isTail: false,
        value: 1
      };
    }, \\"function f() {\\\\n  return 1;\\\\n}\\", native);
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list, 2, 0, 1, 'a string \\\\\\"\\\\\\"', wrap(() => ({   isTail: false,   value: f }), \\\\\\"() => f\\\\\\", native), f, true, 3.14);\\");
    globals.variables.set(\\"f\\", {
      kind: \\"const\\",
      getValue: () => {
        return f;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3, \\\\\\"4\\\\\\", 4), 4);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list_to_string: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_to_string(list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": "[1,[2,[3,null]]]",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_to_string, 1, 0, callIfFuncAndRightArgs(list, 1, 15, 1, 2, 3));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(map, 1, 6, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", 2, 2, x, 1, 15) }), \\\\\\"x => 2 * x\\\\\\", native), callIfFuncAndRightArgs(list, 1, 22, 12, 11, 3)), callIfFuncAndRightArgs(list, 1, 40, 24, 22, 6));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  member(4, list(1, 2, 3, 4, 123, 456, 789)),
  list(4, 123, 456, 789));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(member, 2, 2, 4, callIfFuncAndRightArgs(list, 2, 12, 1, 2, 3, 4, 123, 456, 789)), callIfFuncAndRightArgs(list, 3, 2, 4, 123, 456, 789));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "head([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(head, 1, 0, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]],
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: tail(xs) expects a pair as argument xs, but encountered [1, 2, 3]",
  "pretranspiled": "",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, [1, 2, 3]);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`pair creates pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "pair(1, 'a string \\"\\"');",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": Array [
    1,
    "a string \\"\\"",
  ],
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(pair, 1, 0, 1, 'a string \\\\\\"\\\\\\"');\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(2, list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 2, callIfFuncAndRightArgs(list, 1, 10, 1));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 1, callIfFuncAndRightArgs(list, 1, 10, 1));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(2, 3, 4)), list(2, 3, 4));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(remove_all, 1, 6, 1, callIfFuncAndRightArgs(list, 1, 20, 2, 3, 4)), callIfFuncAndRightArgs(list, 1, 36, 2, 3, 4));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(1, 2, 3, 4, 1, 1, 1, 5, 1, 1, 6)), list(2, 3, 4, 5, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(remove_all, 1, 6, 1, callIfFuncAndRightArgs(list, 1, 20, 1, 2, 3, 4, 1, 1, 1, 5, 1, 1, 6)), callIfFuncAndRightArgs(list, 1, 60, 2, 3, 4, 5, 6));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(reverse(list(\\"string\\", \\"null\\", \\"undefined\\", \\"null\\", 123)), list(123, \\"null\\", \\"undefined\\", \\"null\\", \\"string\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(reverse, 1, 6, callIfFuncAndRightArgs(list, 1, 14, \\\\\\"string\\\\\\", \\\\\\"null\\\\\\", \\\\\\"undefined\\\\\\", \\\\\\"null\\\\\\", 123)), callIfFuncAndRightArgs(list, 1, 65, 123, \\\\\\"null\\\\\\", \\\\\\"undefined\\\\\\", \\\\\\"null\\\\\\", \\\\\\"string\\\\\\"));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`set_head: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_head(p, 3);
p === q && equal(p, pair(3, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    let p = callIfFuncAndRightArgs(pair, 1, 8, 1, 2);
    const q = p;
    callIfFuncAndRightArgs(set_head, 3, 0, p, 3);
    lastStatementResult = eval(\\"boolOrErr(binaryOp(\\\\\\"===\\\\\\", 3, p, q, 4, 0), 4, 0) && callIfFuncAndRightArgs(equal, 4, 11, p, callIfFuncAndRightArgs(pair, 4, 20, 3, 2));\\");
    globals.variables.set(\\"p\\", {
      kind: \\"let\\",
      getValue: () => {
        return p;
      },
      assignNewValue: function (unique) {
        return p = unique;
      }
    });
    globals.variables.set(\\"q\\", {
      kind: \\"const\\",
      getValue: () => {
        return q;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`set_tail: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let p = pair(1, 2);
const q = p;
set_tail(p, 3);
p === q && equal(p, pair(1, 3));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    let p = callIfFuncAndRightArgs(pair, 1, 8, 1, 2);
    const q = p;
    callIfFuncAndRightArgs(set_tail, 3, 0, p, 3);
    lastStatementResult = eval(\\"boolOrErr(binaryOp(\\\\\\"===\\\\\\", 3, p, q, 4, 0), 4, 0) && callIfFuncAndRightArgs(equal, 4, 11, p, callIfFuncAndRightArgs(pair, 4, 20, 1, 3));\\");
    globals.variables.set(\\"p\\", {
      kind: \\"let\\",
      getValue: () => {
        return p;
      },
      assignNewValue: function (unique) {
        return p = unique;
      }
    });
    globals.variables.set(\\"q\\", {
      kind: \\"const\\",
      getValue: () => {
        return q;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`tail of a 1 element list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, callIfFuncAndRightArgs(list, 1, 5, 1));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "",
  "result": "a string \\"\\"",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, callIfFuncAndRightArgs(pair, 1, 5, 1, 'a string \\\\\\"\\\\\\"'));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;
