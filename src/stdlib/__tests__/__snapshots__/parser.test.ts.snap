// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parses arrow function assignments properly: arrow function assignments properly 1`] = `
"[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null]],
[ [ \\"lambda_expression\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"+\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    null]],
  null]]],
null]]]"
`;

exports[`Parses arrow function expressions properly: arrow function expressions properly 1`] = `
"[ \\"lambda_expression\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  null],
[ [ \\"return_statement\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 1,
      null]],
    null]]]],
  null]],
null]]]"
`;

exports[`Parses assignment expressions: assignment expressions 1`] = `
"[ \\"assignment\\",
[ [ \\"name\\",
  [ \\"x\\",
  null]],
[ [ \\"assignment\\",
  [ [ \\"name\\",
    [ \\"y\\",
    null]],
  [ [ \\"name\\",
    [ \\"x\\",
    null]],
  null]]],
null]]]"
`;

exports[`Parses assignment statements: assignment statements 1`] = `
"[ \\"sequence\\",
[ [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"assignment\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null]]],
  [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    null]]]],
  null]]],
null]]"
`;

exports[`Parses declaration statements: declaration statements 1`] = `
"[ \\"sequence\\",
[ [ [ \\"constant_declaration\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"variable_declaration\\",
    [ [ \\"name\\",
      [ \\"y\\",
      null]],
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null]]],
  null]],
null]]"
`;

exports[`Parses default export declarations: default export declarations 1`] = `
"[ \\"export_default_declaration\\",
[ [ \\"function_declaration\\",
  [ [ \\"name\\",
    [ \\"square\\",
    null]],
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    null],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"*\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null]]]],
    null]],
  null]]]],
null]]"
`;

exports[`Parses default import specifiers: default import specifiers 1`] = `
"[ \\"import_declaration\\",
[ [ [ \\"default\\",
    null],
  null],
[ \\"module-name\\",
null]]]"
`;

exports[`Parses empty program: empty program 1`] = `
"[ \\"sequence\\",
[ null,
null]]"
`;

exports[`Parses fibonacci: fibonacci 1`] = `
"[ \\"sequence\\",
[ [ [ \\"function_declaration\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null]],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null],
    [ [ \\"return_statement\\",
      [ [ \\"conditional_expression\\",
        [ [ \\"binary_operator_combination\\",
          [ \\"<=\\",
          [ [ \\"name\\",
            [ \\"x\\",
            null]],
          [ [ \\"literal\\",
            [ 1,
            null]],
          null]]]],
        [ [ \\"name\\",
          [ \\"x\\",
          null]],
        [ [ \\"binary_operator_combination\\",
          [ \\"+\\",
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"fib\\",
              null]],
            [ [ [ \\"binary_operator_combination\\",
                [ \\"-\\",
                [ [ \\"name\\",
                  [ \\"x\\",
                  null]],
                [ [ \\"literal\\",
                  [ 1,
                  null]],
                null]]]],
              null],
            null]]],
          [ [ \\"application\\",
            [ [ \\"name\\",
              [ \\"fib\\",
              null]],
            [ [ [ \\"binary_operator_combination\\",
                [ \\"-\\",
                [ [ \\"name\\",
                  [ \\"x\\",
                  null]],
                [ [ \\"literal\\",
                  [ 2,
                  null]],
                null]]]],
              null],
            null]]],
          null]]]],
        null]]]],
      null]],
    null]]]],
  [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"fib\\",
      null]],
    [ [ [ \\"literal\\",
        [ 4,
        null]],
      null],
    null]]],
  null]],
null]]"
`;

exports[`Parses function calls: function calls 1`] = `
"[ \\"sequence\\",
[ [ [ \\"application\\",
    [ [ \\"name\\",
      [ \\"f\\",
      null]],
    [ [ [ \\"name\\",
        [ \\"x\\",
        null]],
      null],
    null]]],
  [ [ \\"application\\",
    [ [ \\"application\\",
      [ [ \\"application\\",
        [ [ \\"name\\",
          [ \\"thrice\\",
          null]],
        [ [ [ \\"name\\",
            [ \\"thrice\\",
            null]],
          null],
        null]]],
      [ [ [ \\"name\\",
          [ \\"plus_one\\",
          null]],
        null],
      null]]],
    [ [ [ \\"literal\\",
        [ 0,
        null]],
      null],
    null]]],
  null]],
null]]"
`;

exports[`Parses if statements: if statements 1`] = `
"[ \\"sequence\\",
[ [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"name\\",
      [ \\"hi\\",
      null]],
    [ [ \\"name\\",
      [ \\"haha\\",
      null]],
    null]]]],
  [ [ \\"conditional_statement\\",
    [ [ \\"literal\\",
      [ false,
      null]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    [ [ \\"sequence\\",
      [ null,
      null]],
    null]]]],
  null]],
null]]"
`;

exports[`Parses infix expressions: infix expressions 1`] = `
"[ \\"logical_composition\\",
[ \\"||\\",
[ [ \\"binary_operator_combination\\",
  [ \\"===\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"literal\\",
      [ 3,
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]]],
  [ [ \\"literal\\",
    [ 8,
    null]],
  null]]]],
[ [ \\"logical_composition\\",
  [ \\"&&\\",
  [ [ \\"unary_operator_combination\\",
    [ \\"!\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    null]]],
  [ [ \\"literal\\",
    [ false,
    null]],
  null]]]],
null]]]]"
`;

exports[`Parses literals: literals 1`] = `
"[ \\"sequence\\",
[ [ [ \\"literal\\",
    [ 3,
    null]],
  [ [ \\"literal\\",
    [ true,
    null]],
  [ [ \\"literal\\",
    [ false,
    null]],
  [ [ \\"literal\\",
    [ \\"\\",
    null]],
  [ [ \\"literal\\",
    [ \\"\\",
    null]],
  [ [ \\"literal\\",
    [ \\"bob\\",
    null]],
  [ [ \\"literal\\",
    [ 1,
    null]],
  [ [ \\"literal\\",
    [ 20,
    null]],
  null]]]]]]]],
null]]"
`;

exports[`Parses loops: loops 1`] = `
"[ \\"sequence\\",
[ [ [ \\"while_loop\\",
    [ [ \\"literal\\",
      [ true,
      null]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]],
  [ [ \\"for_loop\\",
    [ [ \\"variable_declaration\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 0,
        null]],
      null]]],
    [ [ \\"binary_operator_combination\\",
      [ \\"<\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"binary_operator_combination\\",
        [ \\"+\\",
        [ [ \\"name\\",
          [ \\"i\\",
          null]],
        [ [ \\"literal\\",
          [ 1,
          null]],
        null]]]],
      null]]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]]]],
  [ [ \\"for_loop\\",
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 0,
        null]],
      null]]],
    [ [ \\"binary_operator_combination\\",
      [ \\"<\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    [ [ \\"assignment\\",
      [ [ \\"name\\",
        [ \\"i\\",
        null]],
      [ [ \\"binary_operator_combination\\",
        [ \\"+\\",
        [ [ \\"name\\",
          [ \\"i\\",
          null]],
        [ [ \\"literal\\",
          [ 1,
          null]],
        null]]]],
      null]]],
    [ [ \\"sequence\\",
      [ [ [ \\"continue_statement\\",
          null],
        [ [ \\"break_statement\\",
          null],
        null]],
      null]],
    null]]]]],
  null]]],
null]]"
`;

exports[`Parses multi-argument arrow function assignments properly: multi-argument arrow function assignments properly 1`] = `
"[ \\"constant_declaration\\",
[ [ \\"name\\",
  [ \\"y\\",
  null]],
[ [ \\"lambda_expression\\",
  [ [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"name\\",
      [ \\"y\\",
      null]],
    null]],
  [ [ \\"return_statement\\",
    [ [ \\"binary_operator_combination\\",
      [ \\"+\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 1,
        null]],
      null]]]],
    null]],
  null]]],
null]]]"
`;

exports[`Parses multi-argument arrow function expressions properly: multi-argument arrow function expressions properly 1`] = `
"[ \\"lambda_expression\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  [ [ \\"name\\",
    [ \\"y\\",
    null]],
  null]],
[ [ \\"return_statement\\",
  [ [ \\"binary_operator_combination\\",
    [ \\"+\\",
    [ [ \\"name\\",
      [ \\"x\\",
      null]],
    [ [ \\"literal\\",
      [ 1,
      null]],
    null]]]],
  null]],
null]]]"
`;

exports[`Parses name expression: name expression 1`] = `
"[ \\"name\\",
[ \\"x\\",
null]]"
`;

exports[`Parses name expressions: name expressions 1`] = `
"[ \\"sequence\\",
[ [ [ \\"name\\",
    [ \\"x\\",
    null]],
  [ [ \\"name\\",
    [ \\"moreNames\\",
    null]],
  [ [ \\"name\\",
    [ \\"undefined\\",
    null]],
  null]]],
null]]"
`;

exports[`Parses named export declarations: named export declarations 1`] = `
"[ \\"sequence\\",
[ [ [ \\"export_named_declaration\\",
    [ [ \\"constant_declaration\\",
      [ [ \\"name\\",
        [ \\"x\\",
        null]],
      [ [ \\"literal\\",
        [ 42,
        null]],
      null]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ \\"constant_declaration\\",
      [ [ \\"name\\",
        [ \\"square\\",
        null]],
      [ [ \\"lambda_expression\\",
        [ [ [ \\"name\\",
            [ \\"x\\",
            null]],
          null],
        [ [ \\"return_statement\\",
          [ [ \\"binary_operator_combination\\",
            [ \\"*\\",
            [ [ \\"name\\",
              [ \\"x\\",
              null]],
            [ [ \\"name\\",
              [ \\"x\\",
              null]],
            null]]]],
          null]],
        null]]],
      null]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ \\"function_declaration\\",
      [ [ \\"name\\",
        [ \\"id\\",
        null]],
      [ [ [ \\"name\\",
          [ \\"x\\",
          null]],
        null],
      [ [ \\"return_statement\\",
        [ [ \\"name\\",
          [ \\"x\\",
          null]],
        null]],
      null]]]],
    null]],
  [ [ \\"export_named_declaration\\",
    [ [ [ \\"name\\",
        [ \\"y\\",
        null]]],
    null]],
  null]]]],
null]]"
`;

exports[`Parses object notation: object notation 1`] = `
"[ \\"variable_declaration\\",
[ [ \\"name\\",
  [ \\"x\\",
  null]],
[ [ \\"object_expression\\",
  [ [ [ \\"key_value_pair\\",
      [ [ \\"property\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"key_value_pair\\",
      [ [ \\"property\\",
        [ \\"b\\",
        null]],
      [ [ \\"literal\\",
        [ 10,
        null]],
      null]]],
    [ [ \\"key_value_pair\\",
      [ [ \\"literal\\",
        [ \\"key\\",
        null]],
      [ [ \\"name\\",
        [ \\"value\\",
        null]],
      null]]],
    null]]],
  null]],
null]]]"
`;

exports[`Parses property access: property access 1`] = `
"[ \\"sequence\\",
[ [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"name\\",
      [ \\"b\\",
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"property\\",
      [ \\"b\\",
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"object_access\\",
    [ [ \\"name\\",
      [ \\"a\\",
      null]],
    [ [ \\"literal\\",
      [ \\"b\\",
      null]],
    null]]],
  null]]]],
null]]"
`;

exports[`Parses property assignment: property assignment 1`] = `
"[ \\"sequence\\",
[ [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"name\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"literal\\",
      [ 5,
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"property\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"name\\",
      [ \\"value\\",
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ 5,
        null]],
      null]]],
    [ [ \\"literal\\",
      [ \\"value\\",
      null]],
    null]]],
  [ [ \\"object_assignment\\",
    [ [ \\"object_access\\",
      [ [ \\"name\\",
        [ \\"a\\",
        null]],
      [ [ \\"literal\\",
        [ \\"b\\",
        null]],
      null]]],
    [ [ \\"literal\\",
      [ 42,
      null]],
    null]]],
  null]]]],
null]]"
`;
