// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_append(stream(\\"string\\", 123), stream(456, null, undefined)))
  , list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(build_stream(x => x * x, 5)), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(enum_stream(1.5, 5)), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(enum_stream(1, 5)), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  stream_to_list(
    stream_filter(x => x <= 4, stream(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000))
  )
, list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
stream_for_each(x => {
  sum = sum + x;
}, stream(1, 2, 3));
sum;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_ref(stream(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_map(x => 2 * x, stream(12, 11, 3))), list(24, 22, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  stream_to_list(stream_member(\\"string\\", stream(1, 2, 3, \\"string\\", 123, 456, null, undefined))),
  list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions empty stream is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream is properly created: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const s = stream(true, false, undefined, 1, x=>x, null, -123, head);
const result = [];
stream_for_each(item => {result[array_length(result)] = item;}, s);
stream_ref(s,4)(22) === 22 && stream_ref(s,7)(pair('', '1')) === '1' && result;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_tail is lazy: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_tail(integers_from(0));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    [Function],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(stream_tail(stream(1, 2)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_to_list works for null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(null);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_to_list works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(stream(1, true, 3, 4.4, [1, 2]));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    Array [
      true,
      Array [
        3,
        Array [
          4.4,
          Array [
            Array [
              1,
              2,
            ],
            null,
          ],
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(stream_remove(2, stream(1)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_remove(1, stream(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_remove_all(1, stream(2, 3, \\"1\\"))), list(2, 3, \\"1\\"));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_remove_all(1, stream(1, 2, 3, 4, 1, 1, \\"1\\", 5, 1, 1, 6))),
  list(2, 3, 4, \\"1\\", 5, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(
  stream_reverse(
    stream(\\"string\\", null, undefined, null, 123))),
list(123, null, undefined, null, \\"string\\"));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
