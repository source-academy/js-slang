// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_append(stream(\\"string\\", 123), stream(456, null, undefined)))
  , list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(stream_append, 1, 21, callIfFuncAndRightArgs(stream, 1, 35, \\\\\\"string\\\\\\", 123), callIfFuncAndRightArgs(stream, 1, 58, 456, null, undefined))), callIfFuncAndRightArgs(list, 2, 4, \\\\\\"string\\\\\\", 123, 456, null, undefined));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(build_stream(5, x => x * x)), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(build_stream, 1, 21, 5, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", x, x, 1, 42) }), \\\\\\"x => x * x\\\\\\"))), callIfFuncAndRightArgs(list, 1, 51, 0, 1, 4, 9, 16));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(enum_stream(1.5, 5)), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(enum_stream, 1, 21, 1.5, 5)), callIfFuncAndRightArgs(list, 1, 43, 1.5, 2.5, 3.5, 4.5));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(enum_stream(1, 5)), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(enum_stream, 1, 21, 1, 5)), callIfFuncAndRightArgs(list, 1, 41, 1, 2, 3, 4, 5));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  stream_to_list(
    stream_filter(x => x <= 4, stream(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000))
  )
, list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 2, 2, callIfFuncAndRightArgs(stream_filter, 3, 4, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"<=\\\\\\", x, 4, 3, 23) }), \\\\\\"x => x <= 4\\\\\\"), callIfFuncAndRightArgs(stream, 3, 31, 2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000))), callIfFuncAndRightArgs(list, 5, 2, 2, 1, 3, 4, 2));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
stream_for_each(x => {
  sum = sum + x;
}, stream(1, 2, 3));
sum;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        let sum = 0;
        callIfFuncAndRightArgs(stream_for_each, 2, 0, wrap(x => {
          sum = binaryOp(\\"+\\", sum, x, 3, 8);
        }, \\"x => {\\\\n  sum = sum + x;\\\\n}\\"), callIfFuncAndRightArgs(stream, 4, 3, 1, 2, 3));
        lastStatementResult = eval(\\"sum;\\");
        globals.variables.set(\\"sum\\", {
          kind: \\"let\\",
          getValue: () => {
            return sum;
          },
          assignNewValue: function (unique) {
            return sum = unique;
          }
        });
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_ref(stream(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_ref, 1, 0, callIfFuncAndRightArgs(stream, 1, 11, 1, 2, 3, \\\\\\"4\\\\\\", 4), 4);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_map(x => 2 * x, stream(12, 11, 3))), list(24, 22, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(stream_map, 1, 21, wrap(x => ({   isTail: false,   value: binaryOp(\\\\\\"*\\\\\\", 2, x, 1, 37) }), \\\\\\"x => 2 * x\\\\\\"), callIfFuncAndRightArgs(stream, 1, 44, 12, 11, 3))), callIfFuncAndRightArgs(list, 1, 65, 24, 22, 6));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  stream_to_list(stream_member(\\"string\\", stream(1, 2, 3, \\"string\\", 123, 456, null, undefined))),
  list(\\"string\\", 123, 456, null, undefined));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 2, 2, callIfFuncAndRightArgs(stream_member, 2, 17, \\\\\\"string\\\\\\", callIfFuncAndRightArgs(stream, 2, 41, 1, 2, 3, \\\\\\"string\\\\\\", 123, 456, null, undefined))), callIfFuncAndRightArgs(list, 3, 2, \\\\\\"string\\\\\\", 123, 456, null, undefined));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions empty stream is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream, 1, 0);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream is properly created: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const s = stream(true, false, undefined, 1, x=>x, null, -123, head);
const result = [];
stream_for_each(item => {result[array_length(result)] = item;}, s);
stream_ref(s,4)(22) === 22 && stream_ref(s,7)(pair('', '1')) === '1' && result;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        const s = callIfFuncAndRightArgs(stream, 1, 10, true, false, undefined, 1, wrap(x => ({
          isTail: false,
          value: x
        }), \\"x => x\\"), null, unaryOp(\\"-\\", 123, 1, 56), head);
        const result = [];
        callIfFuncAndRightArgs(stream_for_each, 3, 0, wrap(item => {
          setProp(result, callIfFuncAndRightArgs(array_length, 3, 32, result), item, 3, 25);
        }, \\"item => {\\\\n  result[array_length(result)] = item;\\\\n}\\"), s);
        lastStatementResult = eval(\\"boolOrErr(boolOrErr(binaryOp(\\\\\\"===\\\\\\", callIfFuncAndRightArgs(callIfFuncAndRightArgs(stream_ref, 4, 0, s, 4), 4, 0, 22), 22, 4, 0), 4, 0) && binaryOp(\\\\\\"===\\\\\\", callIfFuncAndRightArgs(callIfFuncAndRightArgs(stream_ref, 4, 30, s, 7), 4, 30, callIfFuncAndRightArgs(pair, 4, 46, '', '1')), '1', 4, 30), 4, 0) && result;\\");
        globals.variables.set(\\"s\\", {
          kind: \\"const\\",
          getValue: () => {
            return s;
          }
        });
        globals.variables.set(\\"result\\", {
          kind: \\"const\\",
          getValue: () => {
            return result;
          }
        });
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_tail is lazy: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_tail(integers_from(0));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    [Function],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_tail, 1, 0, callIfFuncAndRightArgs(integers_from, 1, 12, 0));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(stream_tail(stream(1, 2)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(head, 1, 0, callIfFuncAndRightArgs(stream_tail, 1, 5, callIfFuncAndRightArgs(stream, 1, 17, 1, 2)));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_to_list works for null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(null);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_to_list, 1, 0, null);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`primitive stream functions stream_to_list works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(stream(1, true, 3, 4.4, [1, 2]));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    Array [
      true,
      Array [
        3,
        Array [
          4.4,
          Array [
            Array [
              1,
              2,
            ],
            null,
          ],
        ],
      ],
    ],
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_to_list, 1, 0, callIfFuncAndRightArgs(stream, 1, 15, 1, true, 3, 4.4, [1, 2]));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_to_list(stream_remove(2, stream(1)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    1,
    null,
  ],
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_to_list, 1, 0, callIfFuncAndRightArgs(stream_remove, 1, 15, 2, callIfFuncAndRightArgs(stream, 1, 32, 1)));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_remove(1, stream(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(stream_remove, 1, 0, 1, callIfFuncAndRightArgs(stream, 1, 17, 1));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_remove_all(1, stream(2, 3, \\"1\\"))), list(2, 3, \\"1\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(stream_remove_all, 1, 21, 1, callIfFuncAndRightArgs(stream, 1, 42, 2, 3, \\\\\\"1\\\\\\"))), callIfFuncAndRightArgs(list, 1, 63, 2, 3, \\\\\\"1\\\\\\"));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(stream_remove_all(1, stream(1, 2, 3, 4, 1, 1, \\"1\\", 5, 1, 1, 6))),
  list(2, 3, 4, \\"1\\", 5, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(stream_remove_all, 1, 21, 1, callIfFuncAndRightArgs(stream, 1, 42, 1, 2, 3, 4, 1, 1, \\\\\\"1\\\\\\", 5, 1, 1, 6))), callIfFuncAndRightArgs(list, 2, 2, 2, 3, 4, \\\\\\"1\\\\\\", 5, 6));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(stream_to_list(
  stream_reverse(
    stream(\\"string\\", null, undefined, null, 123))),
list(123, null, undefined, null, \\"string\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(equal, 1, 0, callIfFuncAndRightArgs(stream_to_list, 1, 6, callIfFuncAndRightArgs(stream_reverse, 2, 2, callIfFuncAndRightArgs(stream, 3, 4, \\\\\\"string\\\\\\", null, undefined, null, 123))), callIfFuncAndRightArgs(list, 4, 0, 123, null, undefined, null, \\\\\\"string\\\\\\"));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
