// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accumulate: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(accumulate)(delayIt(() => (curr, acc) => forceIt(curr) + forceIt(acc)), delayIt(() => 0), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 1))));
",
  "result": 10,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, accumulate), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 11, wrap(() => ({   isTail: false,   value: wrap((curr, acc) => ({     isTail: false,     value: binaryOp(\\\\\\"+\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 1, 26, curr), callIfFuncAndRightArgs(forceIt, 1, 33, acc), 1, 26)   }), \\\\\\"(curr, acc) => forceIt(curr) + forceIt(acc)\\\\\\", native) }), \\\\\\"() => (curr, acc) => forceIt(curr) + forceIt(acc)\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 38, wrap(() => ({   isTail: false,   value: 0 }), \\\\\\"() => 0\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 41, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 41, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 46, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 49, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 52, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 55, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native))],   line: 1,   column: 41 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 1))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`append left list is infinite: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = append(a, list(3,4));
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
const b = wrapLazyCallee(append)(delayIt(() => a), delayIt(() => wrapLazyCallee(list)(delayIt(() => 3), delayIt(() => 4))));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, append), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)), callIfFuncAndRightArgs(delayIt, 2, 20, wrap(() => ({
      isTail: true,
      function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 20, list),
      functionName: \\"<anonymous>\\",
      arguments: [callIfFuncAndRightArgs(delayIt, 2, 25, wrap(() => ({
        isTail: false,
        value: 3
      }), \\"() => 3\\", native)), callIfFuncAndRightArgs(delayIt, 2, 27, wrap(() => ({
        isTail: false,
        value: 4
      }), \\"() => 4\\", native))],
      line: 2,
      column: 20
    }), \\"() => wrapLazyCallee(list)(delayIt(() => 3), delayIt(() => 4))\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`append right list is infinite: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = append(list(3,4),a);
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
const b = wrapLazyCallee(append)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 3), delayIt(() => 4))), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, append), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 17, wrap(() => ({
      isTail: true,
      function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 17, list),
      functionName: \\"<anonymous>\\",
      arguments: [callIfFuncAndRightArgs(delayIt, 2, 22, wrap(() => ({
        isTail: false,
        value: 3
      }), \\"() => 3\\", native)), callIfFuncAndRightArgs(delayIt, 2, 24, wrap(() => ({
        isTail: false,
        value: 4
      }), \\"() => 4\\", native))],
      line: 2,
      column: 17
    }), \\"() => wrapLazyCallee(list)(delayIt(() => 3), delayIt(() => 4))\\", native)), callIfFuncAndRightArgs(delayIt, 2, 27, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(append(list(123, 123), list(456, 456, 456)), list(123, 123, 456, 456, 456));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(append)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => 123))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 456), delayIt(() => 456), delayIt(() => 456))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => 123), delayIt(() => 456), delayIt(() => 456), delayIt(() => 456))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, append),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 13, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 13, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 18, wrap(() => ({       isTail: false,       value: 123     }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 23, wrap(() => ({       isTail: false,       value: 123     }), \\\\\\"() => 123\\\\\\", native))],     line: 1,     column: 13   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => 123))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 29, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 29, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 34, wrap(() => ({       isTail: false,       value: 456     }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 39, wrap(() => ({       isTail: false,       value: 456     }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 44, wrap(() => ({       isTail: false,       value: 456     }), \\\\\\"() => 456\\\\\\", native))],     line: 1,     column: 29   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 456), delayIt(() => 456), delayIt(() => 456))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(append)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => 123))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 456), delayIt(() => 456), delayIt(() => 456))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 51, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 51, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 56, wrap(() => ({     isTail: false,     value: 123   }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 61, wrap(() => ({     isTail: false,     value: 123   }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 66, wrap(() => ({     isTail: false,     value: 456   }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 71, wrap(() => ({     isTail: false,     value: 456   }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 76, wrap(() => ({     isTail: false,     value: 456   }), \\\\\\"() => 456\\\\\\", native))],   line: 1,   column: 51 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => 123), delayIt(() => 456), delayIt(() => 456), delayIt(() => 456))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`arguments are not evaluated for list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(list(1,head(null)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => wrapLazyCallee(head)(delayIt(() => null))))));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, head), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 5, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 5, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 12, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 12, head),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({       isTail: false,       value: null     }), \\\\\\"() => null\\\\\\", native))],     line: 1,     column: 12   }), \\\\\\"() => wrapLazyCallee(head)(delayIt(() => null))\\\\\\", native))],   line: 1,   column: 5 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => wrapLazyCallee(head)(delayIt(() => null))))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`arguments are not evaluated for pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1,head(null)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => wrapLazyCallee(head)(delayIt(() => null))))));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, head), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 5, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 5, pair),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 12, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 12, head),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({       isTail: false,       value: null     }), \\\\\\"() => null\\\\\\", native))],     line: 1,     column: 12   }), \\\\\\"() => wrapLazyCallee(head)(delayIt(() => null))\\\\\\", native))],   line: 1,   column: 5 }), \\\\\\"() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => wrapLazyCallee(head)(delayIt(() => null))))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 23,
          "line": 158,
        },
        "start": Position {
          "column": 15,
          "line": 158,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "wrapLazyCallee(list_ref)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))), delayIt(() => 3));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_ref), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({   isTail: false,   value: 3 }), \\\\\\"() => 3\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 23,
          "line": 158,
        },
        "start": Position {
          "column": 15,
          "line": 158,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "wrapLazyCallee(list_ref)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))), delayIt(() => -forceIt(1)));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_ref), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({   isTail: false,   value: unaryOp(\\\\\\"-\\\\\\", callIfFuncAndRightArgs(forceIt, 1, 25, 1), 1, 24) }), \\\\\\"() => -forceIt(1)\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered null],
      "location": SourceLocation {
        "end": Position {
          "column": 23,
          "line": 158,
        },
        "start": Position {
          "column": 15,
          "line": 158,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "pretranspiled": "wrapLazyCallee(list_ref)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))), delayIt(() => 1.5));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_ref), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({   isTail: false,   value: 1.5 }), \\\\\\"() => 1.5\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 159,
        },
        "start": Position {
          "column": 9,
          "line": 159,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 159: Expected string on right hand side of operation, got number.",
  "pretranspiled": "wrapLazyCallee(list_ref)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))), delayIt(() => '1'));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_ref), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({   isTail: false,   value: '1' }), \\\\\\"() => '1'\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list('1', x => x);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 55,
        },
        "start": Position {
          "column": 15,
          "line": 55,
        },
      },
      "severity": "Error",
      "side": " on left hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 55: Expected number on left hand side of operation, got string.",
  "pretranspiled": "wrapLazyCallee(build_list)(delayIt(() => '1'), delayIt(() => x => x));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, build_list), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 11, wrap(() => ({   isTail: false,   value: '1' }), \\\\\\"() => '1'\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({   isTail: false,   value: wrap(x => ({     isTail: false,     value: x   }), \\\\\\"x => x\\\\\\", native) }), \\\\\\"() => x => x\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 149,
        },
        "start": Position {
          "column": 19,
          "line": 149,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 149: Expected string on right hand side of operation, got number.",
  "pretranspiled": "wrapLazyCallee(enum_list)(delayIt(() => '1'), delayIt(() => '5'));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, enum_list), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({   isTail: false,   value: '1' }), \\\\\\"() => '1'\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({   isTail: false,   value: '5' }), \\\\\\"() => '5'\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 149,
        },
        "start": Position {
          "column": 19,
          "line": 149,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 149: Expected string on right hand side of operation, got number.",
  "pretranspiled": "wrapLazyCallee(enum_list)(delayIt(() => '1'), delayIt(() => 5));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, enum_list), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({   isTail: false,   value: '1' }), \\\\\\"() => '1'\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({   isTail: false,   value: 5 }), \\\\\\"() => 5\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 150,
        },
        "start": Position {
          "column": 9,
          "line": 150,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 150: Expected number on right hand side of operation, got string.",
  "pretranspiled": "wrapLazyCallee(enum_list)(delayIt(() => 1), delayIt(() => '5'));
",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, enum_list), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({   isTail: false,   value: 1 }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 13, wrap(() => ({   isTail: false,   value: '5' }), \\\\\\"() => '5'\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(build_list(5, x => x * x), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(build_list)(delayIt(() => 5), delayIt(() => x => forceIt(x) * forceIt(x)))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 0), delayIt(() => 1), delayIt(() => 4), delayIt(() => 9), delayIt(() => 16))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, build_list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 5   }), \\\\\\"() => 5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: wrap(x => ({       isTail: false,       value: binaryOp(\\\\\\"*\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 1, 25, x), callIfFuncAndRightArgs(forceIt, 1, 29, x), 1, 25)     }), \\\\\\"x => forceIt(x) * forceIt(x)\\\\\\", native)   }), \\\\\\"() => x => forceIt(x) * forceIt(x)\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(build_list)(delayIt(() => 5), delayIt(() => x => forceIt(x) * forceIt(x)))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 33, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 33, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 38, wrap(() => ({     isTail: false,     value: 0   }), \\\\\\"() => 0\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 41, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 44, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 47, wrap(() => ({     isTail: false,     value: 9   }), \\\\\\"() => 9\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 50, wrap(() => ({     isTail: false,     value: 16   }), \\\\\\"() => 16\\\\\\", native))],   line: 1,   column: 33 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 0), delayIt(() => 1), delayIt(() => 4), delayIt(() => 9), delayIt(() => 16))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`empty list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(list)();
",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list), 1, 0);\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(enum_list)(delayIt(() => 1.5), delayIt(() => 5))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1.5), delayIt(() => 2.5), delayIt(() => 3.5), delayIt(() => 4.5))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, enum_list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({     isTail: false,     value: 1.5   }), \\\\\\"() => 1.5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 21, wrap(() => ({     isTail: false,     value: 5   }), \\\\\\"() => 5\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(enum_list)(delayIt(() => 1.5), delayIt(() => 5))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 25, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 25, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 30, wrap(() => ({     isTail: false,     value: 1.5   }), \\\\\\"() => 1.5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 35, wrap(() => ({     isTail: false,     value: 2.5   }), \\\\\\"() => 2.5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 40, wrap(() => ({     isTail: false,     value: 3.5   }), \\\\\\"() => 3.5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 45, wrap(() => ({     isTail: false,     value: 4.5   }), \\\\\\"() => 4.5\\\\\\", native))],   line: 1,   column: 25 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1.5), delayIt(() => 2.5), delayIt(() => 3.5), delayIt(() => 4.5))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1, 5), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(enum_list)(delayIt(() => 1), delayIt(() => 5))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 5))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, enum_list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 19, wrap(() => ({     isTail: false,     value: 5   }), \\\\\\"() => 5\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(enum_list)(delayIt(() => 1), delayIt(() => 5))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 23, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 23, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 28, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 34, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 37, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 40, wrap(() => ({     isTail: false,     value: 5   }), \\\\\\"() => 5\\\\\\", native))],   line: 1,   column: 23 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 5))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`filter on infinite lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,pair(2,a));
const b = filter(x => x % 2 === 0,a);
list_ref(b,1);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => wrapLazyCallee(pair)(delayIt(() => 2), delayIt(() => a))));
const b = wrapLazyCallee(filter)(delayIt(() => x => forceIt(forceIt(x) % forceIt(2)) === forceIt(0)), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 1));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: true,
      function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 17, pair),
      functionName: \\"<anonymous>\\",
      arguments: [callIfFuncAndRightArgs(delayIt, 1, 22, wrap(() => ({
        isTail: false,
        value: 2
      }), \\"() => 2\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({
        isTail: false,
        value: a
      }), \\"() => a\\", native))],
      line: 1,
      column: 17
    }), \\"() => wrapLazyCallee(pair)(delayIt(() => 2), delayIt(() => a))\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, filter), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 17, wrap(() => ({
      isTail: false,
      value: wrap(x => ({
        isTail: false,
        value: binaryOp(\\"===\\", 2, callIfFuncAndRightArgs(forceIt, 2, 22, binaryOp(\\"%\\", 2, callIfFuncAndRightArgs(forceIt, 2, 22, x), callIfFuncAndRightArgs(forceIt, 2, 26, 2), 2, 22)), callIfFuncAndRightArgs(forceIt, 2, 32, 0), 2, 22)
      }), \\"x => forceIt(forceIt(x) % forceIt(2)) === forceIt(0)\\", native)
    }), \\"() => x => forceIt(forceIt(x) % forceIt(2)) === forceIt(0)\\", native)), callIfFuncAndRightArgs(delayIt, 2, 34, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 1 }), \\\\\\"() => 1\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(filter)(delayIt(() => x => forceIt(x) <= forceIt(4)), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 10), delayIt(() => 1000), delayIt(() => 1), delayIt(() => 3), delayIt(() => 100), delayIt(() => 4), delayIt(() => 5), delayIt(() => 2), delayIt(() => 1000))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 1), delayIt(() => 3), delayIt(() => 4), delayIt(() => 2))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, filter),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 13, wrap(() => ({     isTail: false,     value: wrap(x => ({       isTail: false,       value: binaryOp(\\\\\\"<=\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 1, 18, x), callIfFuncAndRightArgs(forceIt, 1, 23, 4), 1, 18)     }), \\\\\\"x => forceIt(x) <= forceIt(4)\\\\\\", native)   }), \\\\\\"() => x => forceIt(x) <= forceIt(4)\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 26, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 26, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({       isTail: false,       value: 2     }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 34, wrap(() => ({       isTail: false,       value: 10     }), \\\\\\"() => 10\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 38, wrap(() => ({       isTail: false,       value: 1000     }), \\\\\\"() => 1000\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 44, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 47, wrap(() => ({       isTail: false,       value: 3     }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 50, wrap(() => ({       isTail: false,       value: 100     }), \\\\\\"() => 100\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 55, wrap(() => ({       isTail: false,       value: 4     }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 58, wrap(() => ({       isTail: false,       value: 5     }), \\\\\\"() => 5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 61, wrap(() => ({       isTail: false,       value: 2     }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 64, wrap(() => ({       isTail: false,       value: 1000     }), \\\\\\"() => 1000\\\\\\", native))],     line: 1,     column: 26   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 10), delayIt(() => 1000), delayIt(() => 1), delayIt(() => 3), delayIt(() => 100), delayIt(() => 4), delayIt(() => 5), delayIt(() => 2), delayIt(() => 1000))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(filter)(delayIt(() => x => forceIt(x) <= forceIt(4)), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 10), delayIt(() => 1000), delayIt(() => 1), delayIt(() => 3), delayIt(() => 100), delayIt(() => 4), delayIt(() => 5), delayIt(() => 2), delayIt(() => 1000))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 72, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 72, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 77, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 80, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 83, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 86, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 89, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native))],   line: 1,   column: 72 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 1), delayIt(() => 3), delayIt(() => 4), delayIt(() => 2))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
for_each(x => {
  sum = sum + x;
}, list(1, 2, 3));
sum;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "let sum = 0;
wrapLazyCallee(for_each)(delayIt(() => x => {
  sum = forceIt(sum) + forceIt(x);
}), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))));
sum;
",
  "result": 6,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    let sum = 0;
    callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, for_each), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 9, wrap(() => ({
      isTail: false,
      value: wrap(x => {
        sum = binaryOp(\\"+\\", 3, callIfFuncAndRightArgs(forceIt, 3, 8, sum), callIfFuncAndRightArgs(forceIt, 3, 14, x), 3, 8);
      }, \\"x => {\\\\n  sum = forceIt(sum) + forceIt(x);\\\\n}\\", native)
    }), \\"() => x => {\\\\n  sum = forceIt(sum) + forceIt(x);\\\\n}\\", native)), callIfFuncAndRightArgs(delayIt, 4, 3, wrap(() => ({
      isTail: true,
      function: callIfFuncAndRightArgs(wrapLazyCallee, 4, 3, list),
      functionName: \\"<anonymous>\\",
      arguments: [callIfFuncAndRightArgs(delayIt, 4, 8, wrap(() => ({
        isTail: false,
        value: 1
      }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 4, 11, wrap(() => ({
        isTail: false,
        value: 2
      }), \\"() => 2\\", native)), callIfFuncAndRightArgs(delayIt, 4, 14, wrap(() => ({
        isTail: false,
        value: 3
      }), \\"() => 3\\", native))],
      line: 4,
      column: 3
    }), \\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\", native)));
    lastStatementResult = eval(\\"sum;\\");
    globals.variables.set(\\"sum\\", {
      kind: \\"let\\",
      getValue: () => {
        return sum;
      },
      assignNewValue: function (unique) {
        return sum = unique;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`head works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\"\\"'))));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, head), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 5, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 5, pair),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 13, wrap(() => ({     isTail: false,     value: 'a string \\\\\\"\\\\\\"'   }), \\\\\\"() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'\\\\\\", native))],   line: 1,   column: 5 }), \\\\\\"() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`is_list on infinite lists works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = list(1,a);
is_list(a);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => a));
wrapLazyCallee(is_list)(delayIt(() => a));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, list), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, is_list), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 8, wrap(() => ({   isTail: false,   value: a }), \\\\\\"() => a\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref on infinite lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
list_ref(a,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => a), delayIt(() => 200));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, list_ref), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 9, wrap(() => ({   isTail: false,   value: a }), \\\\\\"() => a\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(list_ref)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => \\"4\\"), delayIt(() => 4))), delayIt(() => 4));
",
  "result": 4,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_ref), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 23, wrap(() => ({     isTail: false,     value: \\\\\\"4\\\\\\"   }), \\\\\\"() => \\\\\\\\\\\\\\"4\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 28, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => \\\\\\\\\\\\\\"4\\\\\\\\\\\\\\"), delayIt(() => 4))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 32, wrap(() => ({   isTail: false,   value: 4 }), \\\\\\"() => 4\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`list_to_string: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_to_string(list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(list_to_string)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))));
",
  "result": "[1,[2,[3,null]]]",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, list_to_string), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 15, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 23, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 26, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native))],   line: 1,   column: 15 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`map on infinite lists works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = map(x => 2 * x, a);
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
const b = wrapLazyCallee(map)(delayIt(() => x => forceIt(2) * forceIt(x)), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, map), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 14, wrap(() => ({
      isTail: false,
      value: wrap(x => ({
        isTail: false,
        value: binaryOp(\\"*\\", 2, callIfFuncAndRightArgs(forceIt, 2, 19, 2), callIfFuncAndRightArgs(forceIt, 2, 23, x), 2, 19)
      }), \\"x => forceIt(2) * forceIt(x)\\", native)
    }), \\"() => x => forceIt(2) * forceIt(x)\\", native)), callIfFuncAndRightArgs(delayIt, 2, 26, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`map on infinite lists works: expectResult 2`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = map(x => 2 * x, a);
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
const b = wrapLazyCallee(map)(delayIt(() => x => forceIt(2) * forceIt(x)), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, map), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 14, wrap(() => ({
      isTail: false,
      value: wrap(x => ({
        isTail: false,
        value: binaryOp(\\"*\\", 2, callIfFuncAndRightArgs(forceIt, 2, 19, 2), callIfFuncAndRightArgs(forceIt, 2, 23, x), 2, 19)
      }), \\"x => forceIt(2) * forceIt(x)\\", native)
    }), \\"() => x => forceIt(2) * forceIt(x)\\", native)), callIfFuncAndRightArgs(delayIt, 2, 26, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(map)(delayIt(() => x => forceIt(2) * forceIt(x)), delayIt(() => wrapLazyCallee(list)(delayIt(() => 12), delayIt(() => 11), delayIt(() => 3))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 24), delayIt(() => 22), delayIt(() => 6))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, map),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: wrap(x => ({       isTail: false,       value: binaryOp(\\\\\\"*\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 1, 15, 2), callIfFuncAndRightArgs(forceIt, 1, 19, x), 1, 15)     }), \\\\\\"x => forceIt(2) * forceIt(x)\\\\\\", native)   }), \\\\\\"() => x => forceIt(2) * forceIt(x)\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 22, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 22, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 27, wrap(() => ({       isTail: false,       value: 12     }), \\\\\\"() => 12\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({       isTail: false,       value: 11     }), \\\\\\"() => 11\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 35, wrap(() => ({       isTail: false,       value: 3     }), \\\\\\"() => 3\\\\\\", native))],     line: 1,     column: 22   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 12), delayIt(() => 11), delayIt(() => 3))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(map)(delayIt(() => x => forceIt(2) * forceIt(x)), delayIt(() => wrapLazyCallee(list)(delayIt(() => 12), delayIt(() => 11), delayIt(() => 3))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 40, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 40, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 45, wrap(() => ({     isTail: false,     value: 24   }), \\\\\\"() => 24\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 49, wrap(() => ({     isTail: false,     value: 22   }), \\\\\\"() => 22\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 53, wrap(() => ({     isTail: false,     value: 6   }), \\\\\\"() => 6\\\\\\", native))],   line: 1,   column: 40 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 24), delayIt(() => 22), delayIt(() => 6))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  member(4, list(1, 2, 3, 4, 123, 456, 789)),
  list(4, 123, 456, 789));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(member)(delayIt(() => 4), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 123), delayIt(() => 456), delayIt(() => 789))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 4), delayIt(() => 123), delayIt(() => 456), delayIt(() => 789))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 2, 2, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 2, member),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 2, 9, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 12, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 12, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 2, 17, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 20, wrap(() => ({       isTail: false,       value: 2     }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 23, wrap(() => ({       isTail: false,       value: 3     }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 26, wrap(() => ({       isTail: false,       value: 4     }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 29, wrap(() => ({       isTail: false,       value: 123     }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 34, wrap(() => ({       isTail: false,       value: 456     }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 2, 39, wrap(() => ({       isTail: false,       value: 789     }), \\\\\\"() => 789\\\\\\", native))],     line: 2,     column: 12   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 123), delayIt(() => 456), delayIt(() => 789))\\\\\\", native))],   line: 2,   column: 2 }), \\\\\\"() => wrapLazyCallee(member)(delayIt(() => 4), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 123), delayIt(() => 456), delayIt(() => 789))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 2, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 3, 2, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 3, 7, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 10, wrap(() => ({     isTail: false,     value: 123   }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 15, wrap(() => ({     isTail: false,     value: 456   }), \\\\\\"() => 456\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 20, wrap(() => ({     isTail: false,     value: 789   }), \\\\\\"() => 789\\\\\\", native))],   line: 3,   column: 2 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 4), delayIt(() => 123), delayIt(() => 456), delayIt(() => 789))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`pair creates pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_pair (pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(is_pair)(delayIt(() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\"\\"'))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, is_pair), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 9, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 9, pair),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 'a string \\\\\\"\\\\\\"'   }), \\\\\\"() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'\\\\\\", native))],   line: 1,   column: 9 }), \\\\\\"() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`recursive list definitions are possible (head): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = list (1,a);
head(a) + head(head(tail(a)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => a));
forceIt(wrapLazyCallee(head)(delayIt(() => a))) + forceIt(wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(tail)(delayIt(() => a)))))));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, list), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 18, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"binaryOp(\\\\\\"+\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 2, 0, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, head), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 5, wrap(() => ({   isTail: false,   value: a }), \\\\\\"() => a\\\\\\", native)))), callIfFuncAndRightArgs(forceIt, 2, 10, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, head), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 15, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 15, head),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 2, 20, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 20, tail),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 2, 25, wrap(() => ({       isTail: false,       value: a     }), \\\\\\"() => a\\\\\\", native))],     line: 2,     column: 20   }), \\\\\\"() => wrapLazyCallee(tail)(delayIt(() => a))\\\\\\", native))],   line: 2,   column: 15 }), \\\\\\"() => wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(tail)(delayIt(() => a))))\\\\\\", native)))), 2, 0);\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`recursive pair definitions are possible (head): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair (a,1);
tail(a) + tail(head(a));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => a), delayIt(() => 1));
forceIt(wrapLazyCallee(tail)(delayIt(() => a))) + forceIt(wrapLazyCallee(tail)(delayIt(() => wrapLazyCallee(head)(delayIt(() => a)))));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)), callIfFuncAndRightArgs(delayIt, 1, 18, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)));
    lastStatementResult = eval(\\"binaryOp(\\\\\\"+\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 2, 0, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, tail), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 5, wrap(() => ({   isTail: false,   value: a }), \\\\\\"() => a\\\\\\", native)))), callIfFuncAndRightArgs(forceIt, 2, 10, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, tail), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 15, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 15, head),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 2, 20, wrap(() => ({     isTail: false,     value: a   }), \\\\\\"() => a\\\\\\", native))],   line: 2,   column: 15 }), \\\\\\"() => wrapLazyCallee(head)(delayIt(() => a))\\\\\\", native)))), 2, 0);\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`recursive pair definitions are possible (tail): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair (1,a);
head(a) + head(tail(a));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
forceIt(wrapLazyCallee(head)(delayIt(() => a))) + forceIt(wrapLazyCallee(head)(delayIt(() => wrapLazyCallee(tail)(delayIt(() => a)))));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 16, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 18, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"binaryOp(\\\\\\"+\\\\\\", 2, callIfFuncAndRightArgs(forceIt, 2, 0, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 0, head), 2, 0, callIfFuncAndRightArgs(delayIt, 2, 5, wrap(() => ({   isTail: false,   value: a }), \\\\\\"() => a\\\\\\", native)))), callIfFuncAndRightArgs(forceIt, 2, 10, callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, head), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 15, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 2, 15, tail),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 2, 20, wrap(() => ({     isTail: false,     value: a   }), \\\\\\"() => a\\\\\\", native))],   line: 2,   column: 15 }), \\\\\\"() => wrapLazyCallee(tail)(delayIt(() => a))\\\\\\", native)))), 2, 0);\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove all ones on infinite list of ones and twos: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,pair(2,a));
const b = remove_all(1,a);
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => wrapLazyCallee(pair)(delayIt(() => 2), delayIt(() => a))));
const b = wrapLazyCallee(remove_all)(delayIt(() => 1), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 2,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: true,
      function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 17, pair),
      functionName: \\"<anonymous>\\",
      arguments: [callIfFuncAndRightArgs(delayIt, 1, 22, wrap(() => ({
        isTail: false,
        value: 2
      }), \\"() => 2\\", native)), callIfFuncAndRightArgs(delayIt, 1, 24, wrap(() => ({
        isTail: false,
        value: a
      }), \\"() => a\\", native))],
      line: 1,
      column: 17
    }), \\"() => wrapLazyCallee(pair)(delayIt(() => 2), delayIt(() => a))\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, remove_all), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 21, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 2, 23, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal (remove(2, list(1)),list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(remove)(delayIt(() => 2), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 7, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 7, remove),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 17, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 22, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native))],     line: 1,     column: 17   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1))\\\\\\", native))],   line: 1,   column: 7 }), \\\\\\"() => wrapLazyCallee(remove)(delayIt(() => 2), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 26, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 26, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native))],   line: 1,   column: 26 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove on infinite list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = remove(1,a);
list_ref(b,200);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "const a = wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => a));
const b = wrapLazyCallee(remove)(delayIt(() => 1), delayIt(() => a));
wrapLazyCallee(list_ref)(delayIt(() => b), delayIt(() => 200));
",
  "result": 1,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    const a = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, pair), 1, 10, callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    const b = callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 2, 10, remove), 2, 10, callIfFuncAndRightArgs(delayIt, 2, 17, wrap(() => ({
      isTail: false,
      value: 1
    }), \\"() => 1\\", native)), callIfFuncAndRightArgs(delayIt, 2, 19, wrap(() => ({
      isTail: false,
      value: a
    }), \\"() => a\\", native)));
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 3, 0, list_ref), 3, 0, callIfFuncAndRightArgs(delayIt, 3, 9, wrap(() => ({   isTail: false,   value: b }), \\\\\\"() => b\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 3, 11, wrap(() => ({   isTail: false,   value: 200 }), \\\\\\"() => 200\\\\\\", native)));\\");
    globals.variables.set(\\"a\\", {
      kind: \\"const\\",
      getValue: () => {
        return a;
      }
    });
    globals.variables.set(\\"b\\", {
      kind: \\"const\\",
      getValue: () => {
        return b;
      }
    });
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(remove)(delayIt(() => 1), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1))));
",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, remove), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 7, wrap(() => ({   isTail: false,   value: 1 }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 10, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 15, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native))],   line: 1,   column: 10 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(2, 3, 4)), list(2, 3, 4));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(remove_all)(delayIt(() => 1), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, remove_all),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 20, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 25, wrap(() => ({       isTail: false,       value: 2     }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 28, wrap(() => ({       isTail: false,       value: 3     }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({       isTail: false,       value: 4     }), \\\\\\"() => 4\\\\\\", native))],     line: 1,     column: 20   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(remove_all)(delayIt(() => 1), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 36, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 36, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 41, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 44, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 47, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native))],   line: 1,   column: 36 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(1, 2, 3, 4, 1, 1, 1, 5, 1, 1, 6)), list(2, 3, 4, 5, 6));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(remove_all)(delayIt(() => 1), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 1), delayIt(() => 1), delayIt(() => 1), delayIt(() => 5), delayIt(() => 1), delayIt(() => 1), delayIt(() => 6))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 5), delayIt(() => 6))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, remove_all),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 17, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 20, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 20, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 25, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 28, wrap(() => ({       isTail: false,       value: 2     }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 31, wrap(() => ({       isTail: false,       value: 3     }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 34, wrap(() => ({       isTail: false,       value: 4     }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 37, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 40, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 43, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 46, wrap(() => ({       isTail: false,       value: 5     }), \\\\\\"() => 5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 49, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 52, wrap(() => ({       isTail: false,       value: 1     }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 55, wrap(() => ({       isTail: false,       value: 6     }), \\\\\\"() => 6\\\\\\", native))],     line: 1,     column: 20   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 1), delayIt(() => 1), delayIt(() => 1), delayIt(() => 5), delayIt(() => 1), delayIt(() => 1), delayIt(() => 6))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(remove_all)(delayIt(() => 1), delayIt(() => wrapLazyCallee(list)(delayIt(() => 1), delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 1), delayIt(() => 1), delayIt(() => 1), delayIt(() => 5), delayIt(() => 1), delayIt(() => 1), delayIt(() => 6))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 60, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 60, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 65, wrap(() => ({     isTail: false,     value: 2   }), \\\\\\"() => 2\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 68, wrap(() => ({     isTail: false,     value: 3   }), \\\\\\"() => 3\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 71, wrap(() => ({     isTail: false,     value: 4   }), \\\\\\"() => 4\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 74, wrap(() => ({     isTail: false,     value: 5   }), \\\\\\"() => 5\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 77, wrap(() => ({     isTail: false,     value: 6   }), \\\\\\"() => 6\\\\\\", native))],   line: 1,   column: 60 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 2), delayIt(() => 3), delayIt(() => 4), delayIt(() => 5), delayIt(() => 6))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(reverse(list(\\"string\\", \\"null\\", \\"undefined\\", \\"null\\", 123)), list(123, \\"null\\", \\"undefined\\", \\"null\\", \\"string\\"));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(equal)(delayIt(() => wrapLazyCallee(reverse)(delayIt(() => wrapLazyCallee(list)(delayIt(() => \\"string\\"), delayIt(() => \\"null\\"), delayIt(() => \\"undefined\\"), delayIt(() => \\"null\\"), delayIt(() => 123))))), delayIt(() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => \\"null\\"), delayIt(() => \\"undefined\\"), delayIt(() => \\"null\\"), delayIt(() => \\"string\\"))));
",
  "result": true,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, equal), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 6, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 6, reverse),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 14, wrap(() => ({     isTail: true,     function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 14, list),     functionName: \\\\\\"<anonymous>\\\\\\",     arguments: [callIfFuncAndRightArgs(delayIt, 1, 19, wrap(() => ({       isTail: false,       value: \\\\\\"string\\\\\\"     }), \\\\\\"() => \\\\\\\\\\\\\\"string\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 29, wrap(() => ({       isTail: false,       value: \\\\\\"null\\\\\\"     }), \\\\\\"() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 37, wrap(() => ({       isTail: false,       value: \\\\\\"undefined\\\\\\"     }), \\\\\\"() => \\\\\\\\\\\\\\"undefined\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 50, wrap(() => ({       isTail: false,       value: \\\\\\"null\\\\\\"     }), \\\\\\"() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 58, wrap(() => ({       isTail: false,       value: 123     }), \\\\\\"() => 123\\\\\\", native))],     line: 1,     column: 14   }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => \\\\\\\\\\\\\\"string\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"undefined\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => 123))\\\\\\", native))],   line: 1,   column: 6 }), \\\\\\"() => wrapLazyCallee(reverse)(delayIt(() => wrapLazyCallee(list)(delayIt(() => \\\\\\\\\\\\\\"string\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"undefined\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => 123))))\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 65, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 65, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 70, wrap(() => ({     isTail: false,     value: 123   }), \\\\\\"() => 123\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 75, wrap(() => ({     isTail: false,     value: \\\\\\"null\\\\\\"   }), \\\\\\"() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 83, wrap(() => ({     isTail: false,     value: \\\\\\"undefined\\\\\\"   }), \\\\\\"() => \\\\\\\\\\\\\\"undefined\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 96, wrap(() => ({     isTail: false,     value: \\\\\\"null\\\\\\"   }), \\\\\\"() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 104, wrap(() => ({     isTail: false,     value: \\\\\\"string\\\\\\"   }), \\\\\\"() => \\\\\\\\\\\\\\"string\\\\\\\\\\\\\\"\\\\\\", native))],   line: 1,   column: 65 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 123), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"undefined\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"null\\\\\\\\\\\\\\"), delayIt(() => \\\\\\\\\\\\\\"string\\\\\\\\\\\\\\"))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`tail of a 1 element list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(list(1));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(tail)(delayIt(() => wrapLazyCallee(list)(delayIt(() => 1))));
",
  "result": null,
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, tail), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 5, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 5, list),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native))],   line: 1,   column: 5 }), \\\\\\"() => wrapLazyCallee(list)(delayIt(() => 1))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;

exports[`tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "pretranspiled": "wrapLazyCallee(tail)(delayIt(() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\"\\"'))));
",
  "result": "a string \\"\\"",
  "resultStatus": "finished",
  "transpiled": "const native = nativeStorage;
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = native.globals;
{
  {
    lastStatementResult = eval(\\"callIfFuncAndRightArgs(callIfFuncAndRightArgs(wrapLazyCallee, 1, 0, tail), 1, 0, callIfFuncAndRightArgs(delayIt, 1, 5, wrap(() => ({   isTail: true,   function: callIfFuncAndRightArgs(wrapLazyCallee, 1, 5, pair),   functionName: \\\\\\"<anonymous>\\\\\\",   arguments: [callIfFuncAndRightArgs(delayIt, 1, 10, wrap(() => ({     isTail: false,     value: 1   }), \\\\\\"() => 1\\\\\\", native)), callIfFuncAndRightArgs(delayIt, 1, 13, wrap(() => ({     isTail: false,     value: 'a string \\\\\\"\\\\\\"'   }), \\\\\\"() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'\\\\\\", native))],   line: 1,   column: 5 }), \\\\\\"() => wrapLazyCallee(pair)(delayIt(() => 1), delayIt(() => 'a string \\\\\\\\\\\\\\"\\\\\\\\\\\\\\"'))\\\\\\", native)));\\");
  }
}
lastStatementResult;
",
  "visualiseListResult": Array [],
}
`;
