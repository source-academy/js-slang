// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accumulate: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((curr, acc) => curr + acc, 0, list(2, 3, 4, 1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`append left list is infinite: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = append(a, list(3,4));
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`append right list is infinite: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = append(list(3,4),a);
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`append: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(append(list(123, 123), list(456, 456, 456)), list(123, 123, 456, 456, 456));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arguments are not evaluated for list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(list(1,head(null)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`arguments are not evaluated for pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1,head(null)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 158: Error: tail(xs) expects a pair as argument xs, but encountered null",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 159: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list(x => x, '1');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 55: Expected number on left hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 149: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 149: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 150: Expected number on right hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`build_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(build_list(x => x * x, 5), list(0, 1, 4, 9, 16));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`empty list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list with floats: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1.5, 5), list(1.5, 2.5, 3.5, 4.5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`enum_list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(enum_list(1, 5), list(1, 2, 3, 4, 5));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter on infinite lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,pair(2,a));
const b = filter(x => x % 2 === 0,a);
list_ref(b,1);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(filter(x => x <= 4, list(2, 10, 1000, 1, 3, 100, 4, 5, 2, 1000)), list(2, 1, 3, 4, 2));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`for_each: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let sum = 0;
for_each(x => {
  sum = sum + x;
}, list(1, 2, 3));
sum;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 6,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`head works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is_list on infinite lists works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = list(1,a);
is_list(a);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref on infinite lists: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
list_ref(a,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3, \\"4\\", 4), 4);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_to_string: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_to_string(list(1, 2, 3));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "[1,[2,[3,null]]]",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map on infinite lists works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = map(x => 2 * x, a);
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map on infinite lists works: expectResult 2`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = map(x => 2 * x, a);
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(map(x => 2 * x, list(12, 11, 3)), list(24, 22, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`member: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(
  member(4, list(1, 2, 3, 4, 123, 456, 789)),
  list(4, 123, 456, 789));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`pair creates pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_pair (pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive list definitions are possible (head): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = list (1,a);
head(a) + head(head(tail(a)));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive pair definitions are possible (head): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair (a,1);
tail(a) + tail(head(a));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive pair definitions are possible (tail): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair (1,a);
head(a) + head(tail(a));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove all ones on infinite list of ones and twos: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,pair(2,a));
const b = remove_all(1,a);
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal (remove(2, list(1)),list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove on infinite list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1,a);
const b = remove(1,a);
list_ref(b,200);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all not found: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(2, 3, 4)), list(2, 3, 4));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(remove_all(1, list(1, 2, 3, 4, 1, 1, 1, 5, 1, 1, 6)), list(2, 3, 4, 5, 6));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`reverse: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "equal(reverse(list(\\"string\\", \\"null\\", \\"undefined\\", \\"null\\", 123)), list(123, \\"null\\", \\"undefined\\", \\"null\\", \\"string\\"));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`tail of a 1 element list is null: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(list(1));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": null,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`tail works: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(pair(1, 'a string \\"\\"'));",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "a string \\"\\"",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
