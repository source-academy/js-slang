/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,2],$V1=[1,3],$V2=[1,8],$V3=[1,25],$V4=[1,11],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,21],$V9=[1,20],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,23],$Ve=[1,22],$Vf=[1,24],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,36],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[1,37],$Vs=[5,17],$Vt=[5,6,11,13,16,17,22,23,24,25,27,28,30,31,34,35,39,49,57,58,59,60,61,62,64,65,66,67,73],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[1,62],$VG=[1,63],$VH=[1,64],$VI=[1,65],$VJ=[1,66],$VK=[1,67],$VL=[1,68],$VM=[1,70],$VN=[2,78],$VO=[6,15,17,26,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,55,56,69],$VP=[2,49],$VQ=[1,85],$VR=[2,69],$VS=[1,95],$VT=[6,15,17,26,34,35,36,37,38,40,41,42,43,44,45,46,47,48,50,55,56,69],$VU=[1,126],$VV=[15,50],$VW=[6,15,17,26,34,35,40,41,42,43,44,45,46,47,48,50,55,56,69],$VX=[6,15,17,26,40,41,42,43,48,50,55,56,69],$VY=[6,15,17,26,40,41,42,43,44,45,46,47,48,50,55,56,69],$VZ=[6,15,17,26,48,50,56,69],$V_=[13,16,34,35,39,49,57,58,59,60,61,62,64,65,66,67,73];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,";":6,"statement":7,"ifstatement":8,"whilestatement":9,"forstatement":10,"function":11,"identifier":12,"(":13,"identifiers":14,")":15,"{":16,"}":17,"constdeclaration":18,"letdeclaration":19,"assignment":20,"expression":21,"return":22,"break":23,"continue":24,"let":25,"=":26,"const":27,"if":28,"else":29,"while":30,"for":31,"forinitialiser":32,"forfinaliser":33,"+":34,"-":35,"*":36,"/":37,"%":38,"!":39,"&&":40,"||":41,"===":42,"!==":43,">":44,"<":45,">=":46,"<=":47,"=>":48,"[":49,"]":50,".":51,"constants":52,"expressions":53,"pairs":54,"?":55,":":56,"FLOAT_NUMBER":57,"INT_NUMBER":58,"true":59,"false":60,"NaN":61,"Infinity":62,"quotedstring":63,"emptylist":64,"EmptyString":65,"QuotedString":66,"QuotedStringEscape":67,"nonemptyexpressions":68,",":69,"nonemptypairs":70,"pair":71,"nonemptyidentifiers":72,"Identifier":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",11:"function",13:"(",15:")",16:"{",17:"}",22:"return",23:"break",24:"continue",25:"let",26:"=",27:"const",28:"if",29:"else",30:"while",31:"for",34:"+",35:"-",36:"*",37:"/",38:"%",39:"!",40:"&&",41:"||",42:"===",43:"!==",44:">",45:"<",46:">=",47:"<=",48:"=>",49:"[",50:"]",51:".",55:"?",56:":",57:"FLOAT_NUMBER",58:"INT_NUMBER",59:"true",60:"false",61:"NaN",62:"Infinity",64:"emptylist",65:"EmptyString",66:"QuotedString",67:"QuotedStringEscape",69:",",73:"Identifier"},
productions_: [0,[3,2],[4,0],[4,1],[4,2],[7,1],[7,1],[7,1],[7,8],[7,1],[7,1],[7,3],[7,2],[7,2],[7,3],[7,2],[7,2],[19,5],[18,5],[20,3],[8,11],[8,9],[9,7],[10,10],[32,1],[32,2],[33,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,3],[21,4],[21,3],[21,3],[21,1],[21,1],[21,6],[21,3],[21,3],[21,4],[21,5],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[63,1],[63,1],[63,1],[63,2],[63,2],[53,1],[53,0],[68,3],[68,1],[54,1],[54,0],[70,3],[70,1],[71,3],[14,1],[14,0],[72,3],[72,1],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 69: case 73: case 78:
 this.$ = []; 
break;
case 4:
 this.$ = pair($$[$0-1], $$[$0]); 
break;
case 8:

			this.$ = {
				tag: 'constant_declaration',
				name: $$[$0-6],
				value: {
					tag: 'function_definition',
					parameters: $$[$0-4],
					body: $$[$0-1],
					line: yylineno,
					location: {
						start_line: _$[$0-7].first_line,
						start_col: _$[$0-7].first_column,
						end_line: _$[$0].first_line,
						end_col: _$[$0].first_column
					}
				},
				line: yylineno
			};
		
break;
case 11:

			this.$ = {
			         tag: 'block',
				 body: $$[$0-1]
 			     };
	      
break;
case 14:

			this.$ = {
				tag: 'return_statement',
				expression: $$[$0-1],
				line: yylineno
			};
		
break;
case 15:

			this.$ = {
				tag: 'break_statement',
				line: yylineno
			};
		
break;
case 16:

			this.$ = {
				tag: 'continue_statement',
				line: yylineno
			};
		
break;
case 17:

			this.$ = {
				tag: 'variable_declaration',
				name: $$[$0-3],
				value: $$[$0-1],
				line: yylineno
			};
		
break;
case 18:

			this.$ = {
				tag: 'constant_declaration',
				name: $$[$0-3],
				value: $$[$0-1],
				line: yylineno
			};
		
break;
case 19:

			if ($$[$0-2].tag === 'name') {
				this.$ = {
					tag: 'assignment',
					name: $$[$0-2],
					value: $$[$0],
					line: yylineno
				};

			} else if ($$[$0-2].tag === 'property_access') {
				this.$ = {
					tag: 'property_assignment',
					object: $$[$0-2].object,
					property: $$[$0-2].property,
					value: $$[$0],
					line: yylineno
				};

			} else {
				error('parse error in line ' + yylineno + ": " + yytext);
			}
		
break;
case 20:

			this.$ = {
				tag: 'conditional_statement',
				predicate: $$[$0-8],
				consequent: { tag: 'block', body: $$[$0-5] },
				alternative: { tag: 'block', body: $$[$0-1] },
				line: yylineno
			};
		
break;
case 21:

			this.$ = {
				tag: 'conditional_statement',
				predicate: $$[$0-6],
				consequent: { tag: 'block', body: $$[$0-3] },
				alternative: pair($$[$0], []),
				line: yylineno
			};
		
break;
case 22:

			this.$ = {
				tag: 'while_loop',
				predicate: $$[$0-4],
				statements: { tag: 'block', body: $$[$0-1] },
				line: yylineno
			};
		
break;
case 23:

			this.$ = {
				tag: 'for_loop',
				initialiser: $$[$0-7],
				predicate: $$[$0-6],
				finaliser: $$[$0-4],
				statements: { tag: 'block', body: $$[$0-1] },
				line: yylineno
			};
		
break;
case 27: case 28: case 29: case 30: case 31: case 37: case 38: case 39: case 40: case 41: case 42:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'name',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [$$[$0-2], [$$[$0], []]],
				line: yylineno
			};
		
break;
case 32: case 33:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'name',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [0, [$$[$0], []]],
				line: yylineno
			};
		
break;
case 34:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'name',
					name: $$[$0-1],
					line: yylineno
				},
				operands: [$$[$0], []],
				line: yylineno
			};
		
break;
case 35: case 36:

			this.$ = {
				tag: 'boolean_operation',
				operator: $$[$0-1],
				operands: [$$[$0-2], [$$[$0], []]],
				line: yylineno
			};
		
break;
case 43:

			this.$ = {
				tag: 'function_definition',
				parameters: $$[$0-3],
				body: { tag: 'return_statement', expression: $$[$0],
					line: yylineno },
				line: yylineno,
				location: {
					start_line: _$[$0-4].first_line,
					start_col: _$[$0-4].first_column,
					end_line: _$[$0].first_line,
					end_col: _$[$0].first_column
			     	}
			};
		
break;
case 44:

		             if ($$[$0-2].tag === 'name') {
			        this.$ = {
				   tag: 'function_definition',
				   parameters: [$$[$0-2], [] ],
				   body: { tag: 'return_statement', expression: $$[$0],
					   line: yylineno },
				   line: yylineno,
				   location: {
					start_line: _$[$0-2].first_line,
					start_col: _$[$0-2].first_column,
					end_line: _$[$02].first_line,
					end_col: _$[$02].first_column
			     	};
			     } else {
				error('expecting name before => ' + yylineno + ": " + yytext);
			     }
		
break;
case 45:

			this.$ = {
				tag: 'property_access',
				object: $$[$0-3],
				property: $$[$0-1],
				line: yylineno
			};
		
break;
case 46:

			this.$ = {
				tag: 'property_access',
				object: $$[$0-2],
				property: $$[$0],
				line: yylineno
			};
		
break;
case 47:
this.$ = $$[$0-1];
break;
case 49:

			this.$ = {
				tag: 'name',
				name: $$[$0],
				line: yylineno
			};
		
break;
case 50:

			this.$ = {
				tag: 'application',
				operator: $$[$0-4],
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 51:

			this.$ = {
				tag: 'array_expression',
				elements: $$[$0-1],
				line: yylineno
			};
		
break;
case 52:

			this.$ = {
				tag: 'object_expression',
				pairs: $$[$0-1],
				line: yylineno
			};
		
break;
case 53:

			this.$ = {
				tag: 'application',
				operator: {
					tag: 'name',
					name: $$[$0-3],
					line: yylineno
				},
				operands: $$[$0-1],
				line: yylineno
			};
		
break;
case 54:

			this.$ = {
				tag: 'conditional_expression',
				predicate: $$[$0-4],
				consequent: $$[$0-2],
				alternative: $$[$0],
				line: yylineno
			};
		
break;
case 55:
 this.$ = parseFloat(yytext); 
break;
case 56:
 this.$ = parseInt(yytext, 10); 
break;
case 57:
 this.$ = true; 
break;
case 58:
 this.$ = false; 
break;
case 59:
 this.$ = NaN; 
break;
case 60:
 this.$ = Infinity; 
break;
case 62:
 this.$ = { tag: 'empty_list', line: yylineno }; 
break;
case 63:

		this.$ = '';
	
break;
case 65:

		switch (yytext)
		{
			case 'b':		this.$ = '\b'; break;
			case 'n':		this.$ = '\n'; break;
			case 'r':		this.$ = '\r'; break;
			case 't':		this.$ = '\t'; break;
			case "'":		this.$ = "'"; break;
			case '"':		this.$ = '"'; break;
			case '\\':		this.$ = '\\'; break;
			case '\n':
			case '\r\n':	this.$ = ''; break;
			default:		this.$ = '\\' + $$[$0]; break;
		}
	
break;
case 66:

		switch ($$[$0-1])
		{
			case 'b':		this.$ = '\b'; break;
			case 'n':		this.$ = '\n'; break;
			case 'r':		this.$ = '\r'; break;
			case 't':		this.$ = '\t'; break;
			case "'":		this.$ = "'"; break;
			case '"':		this.$ = '"'; break;
			case '\\':		this.$ = '\\'; break;
			case '\n':
			case '\r\n':	this.$ = ''; break;
			default:		this.$ = '\\' + $$[$0-1]; break;
		}
		this.$ += $$[$0];
	
break;
case 67:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 68: case 72: case 77:
 this.$ = $$[$0]; 
break;
case 70: case 74: case 76: case 79:
 this.$ = [ $$[$0-2], $$[$0] ]; 
break;
case 71: case 75: case 80:
 this.$ = [ $$[$0], [] ]; 
break;
case 81:
 this.$ = yytext; 
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{1:[3]},{5:[1,41]},o($Vs,[2,3]),o($Vs,$V0,{7:4,8:5,9:6,10:7,18:9,19:10,20:12,21:13,52:26,12:27,63:35,4:42,6:$V1,11:$V2,13:$V3,16:$V4,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr}),o($Vt,[2,5]),o($Vt,[2,6]),o($Vt,[2,7]),{12:43,73:$Vr},o($Vt,[2,9]),o($Vt,[2,10]),{4:44,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:48,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,54:45,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,70:46,71:47,73:$Vr},{6:[1,49]},{6:[1,50],26:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{12:27,13:$V3,16:$VM,21:69,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{6:[1,71]},{6:[1,72]},{13:[1,73]},{13:[1,74]},{13:[1,75]},{12:76,73:$Vr},{12:77,73:$Vr},{12:27,13:$V3,16:$VM,21:78,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:79,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:80,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:84,13:$V3,14:81,15:$VN,16:$VM,21:82,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,72:83,73:$Vr},o($VO,[2,48]),o($VO,$VP,{13:$VQ}),{12:27,13:$V3,16:$VM,21:88,34:$Vd,35:$Ve,39:$Vf,49:$Vg,50:$VR,52:26,53:86,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:87,73:$Vr},o($VO,[2,55]),o($VO,[2,56]),o($VO,[2,57]),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),o([6,13,15,17,26,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,55,56,69],[2,81]),o($VO,[2,63]),o($VO,[2,64],{63:89,65:$Vo,66:$Vp,67:$Vq}),o($VO,[2,65],{63:90,65:$Vo,66:$Vp,67:$Vq}),{1:[2,1]},o($Vs,[2,4]),{13:[1,91]},{17:[1,92]},{17:[1,93]},{17:[2,72]},{17:[2,75],69:[1,94]},o([6,26,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,51,55],$VP,{13:$VQ,56:$VS}),o($Vt,[2,12]),o($Vt,[2,13]),{12:27,13:$V3,16:$VM,21:96,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:97,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:98,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:99,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:100,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:101,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:102,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:103,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:104,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:105,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:106,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:107,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:108,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:109,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:110,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:111,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:112,73:$Vr},{12:27,13:$V3,16:$VM,21:113,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{6:[1,114],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{12:115,17:[2,73],54:45,70:46,71:47,73:$Vr},o($Vt,[2,15]),o($Vt,[2,16]),{12:27,13:$V3,16:$VM,21:116,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:117,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,19:119,20:120,21:121,25:$V8,32:118,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{26:[1,122]},{26:[1,123]},o($VT,[2,32],{49:$VJ,51:$VK}),o($VT,[2,33],{49:$VJ,51:$VK}),o($VT,[2,34],{49:$VJ,51:$VK}),{15:[1,124]},{15:[1,125],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{15:[2,77]},o([15,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,51,55],$VP,{13:$VQ,69:$VU}),{12:27,13:$V3,15:$VR,16:$VM,21:88,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,53:127,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:87,73:$Vr},{50:[1,128]},o($VV,[2,68]),o($VV,[2,71],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL,69:[1,129]}),o($VO,[2,67]),o($VO,[2,66]),{12:131,14:130,15:$VN,72:83,73:$Vr},o($Vt,[2,11]),o($VO,[2,52]),{12:115,70:132,71:47,73:$Vr},{12:27,13:$V3,16:$VM,21:133,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},o([6,15],[2,19],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL}),o($VW,[2,27],{36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VW,[2,28],{36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VT,[2,29],{49:$VJ,51:$VK}),o($VT,[2,30],{49:$VJ,51:$VK}),o($VT,[2,31],{49:$VJ,51:$VK}),o([6,15,17,26,40,41,48,50,55,56,69],[2,35],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK}),o([6,15,17,26,41,48,50,55,56,69],[2,36],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK}),o($VX,[2,37],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK}),o($VX,[2,38],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK}),o($VY,[2,39],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VY,[2,40],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VY,[2,41],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VY,[2,42],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,49:$VJ,51:$VK}),o($VZ,[2,44],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK,55:$VL}),{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,50:[1,134],51:$VK,55:$VL},o($VO,[2,46]),{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL,56:[1,135]},o($Vt,[2,14]),{56:$VS},{15:[1,136],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{15:[1,137],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{12:27,13:$V3,16:$VM,21:138,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},o($V_,[2,24]),{6:[1,139]},{26:$Vu,34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{12:27,13:$V3,16:$VM,21:140,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,21:141,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{48:[1,142]},o($VO,[2,47],{13:[1,143]}),{12:131,72:144,73:$Vr},{15:[1,145]},o($VO,[2,51]),{12:27,13:$V3,16:$VM,21:88,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:146,73:$Vr},{15:[1,147]},{15:[2,80],69:$VU},{17:[2,74]},o([17,69],[2,76],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL}),o($VO,[2,45]),{12:27,13:$V3,16:$VM,21:148,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{16:[1,149]},{16:[1,150]},{6:[1,151],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},o($V_,[2,25]),{6:[1,152],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{6:[1,153],34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,49:$VJ,51:$VK,55:$VL},{12:27,13:$V3,16:$VM,21:154,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,15:$VR,16:$VM,21:88,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,53:155,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:87,73:$Vr},{15:[2,79]},o($VO,[2,53]),o($VV,[2,70]),{16:[1,156]},o($VZ,[2,54],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK,55:$VL}),{4:157,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{4:158,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{12:27,13:$V3,16:$VM,20:160,21:121,33:159,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},o($Vt,[2,18]),o($Vt,[2,17]),o($VZ,[2,43],{34:$Vv,35:$Vw,36:$Vx,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,49:$VJ,51:$VK,55:$VL}),{15:[1,161]},{4:162,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{17:[1,163]},{17:[1,164]},{15:[1,165]},{15:[2,26]},o($VO,[2,50]),{17:[1,166]},{29:[1,167]},o($Vt,[2,22]),{16:[1,168]},o($Vt,[2,8]),{8:170,16:[1,169],28:$Va},{4:171,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},{4:172,6:$V1,7:4,8:5,9:6,10:7,11:$V2,12:27,13:$V3,16:$V4,17:$V0,18:9,19:10,20:12,21:13,22:$V5,23:$V6,24:$V7,25:$V8,27:$V9,28:$Va,30:$Vb,31:$Vc,34:$Vd,35:$Ve,39:$Vf,49:$Vg,52:26,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,63:35,64:$Vn,65:$Vo,66:$Vp,67:$Vq,73:$Vr},o($Vt,[2,21]),{17:[1,173]},{17:[1,174]},o($Vt,[2,23]),o($Vt,[2,20])],
defaultActions: {41:[2,1],46:[2,72],83:[2,77],132:[2,74],144:[2,79],160:[2,26]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else if (hash.loc && hash.line) {
        throw new SyntaxError(str, hash.loc, hash.line);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip single-line comments */
break;
case 1:/* skip multi-line comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 11
break;
case 4:return 22
break;
case 5:return 28
break;
case 6:return 29
break;
case 7:return 30
break;
case 8:return 31
break;
case 9:return 23
break;
case 10:return 24
break;
case 11:return 25
break;
case 12:return 27
break;
case 13:return 42
break;
case 14:return 48
break;
case 15:return 26
break;
case 16:return 16
break;
case 17:return 17
break;
case 18:return 6
break;
case 19:return 69
break;
case 20:return 59
break;
case 21:return 60
break;
case 22:return 61
break;
case 23:return 62
break;
case 24:return 64
break;
case 25:return 49
break;
case 26:return 50
break;
case 27:return 51
break;
case 28:return 65
break;
case 29:return 65
break;
case 30:this.begin('DoubleQuotedString');
break;
case 31:this.begin('SingleQuotedString');
break;
case 32:this.begin('QuotedStringEscape');
break;
case 33:this.popState();
break;
case 34:this.popState();
break;
case 35: this.popState(); return 67; 
break;
case 36:return 66;
break;
case 37:return 66;
break;
case 38:return 73 /* TODO: non-ASCII identifiers */
break;
case 39:return 57 /* 3.1, 3.1e-7 */
break;
case 40:return 58
break;
case 41:return 34
break;
case 42:return 35
break;
case 43:return 36
break;
case 44:return 37
break;
case 45:return 38
break;
case 46:return 43
break;
case 47:return 47
break;
case 48:return 46
break;
case 49:return 45
break;
case 50:return 44
break;
case 51:return 39
break;
case 52:return 40
break;
case 53:return 41
break;
case 54:return 13
break;
case 55:return 15
break;
case 56:return 55
break;
case 57:return 56
break;
case 58:return 5
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/([^\n\r]*))/,/^(?:\/\*([\u0000-\uffff]*?)\*\/)/,/^(?:\s+)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:===)/,/^(?:=>)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:NaN\b)/,/^(?:Infinity\b)/,/^(?:\[\])/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:"")/,/^(?:'')/,/^(?:")/,/^(?:')/,/^(?:\\)/,/^(?:")/,/^(?:')/,/^(?:(.|\r\n|\n))/,/^(?:[^"\\]*)/,/^(?:[^'\\]*)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?([eE][\-+]?[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"QuotedStringEscape":{"rules":[35],"inclusive":false},"SingleQuotedString":{"rules":[32,34,37],"inclusive":false},"DoubleQuotedString":{"rules":[32,33,36],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}