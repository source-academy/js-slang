/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserWeek13 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,30],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,28],$Vb=[1,27],$Vc=[1,29],$Vd=[1,44],$Ve=[1,35],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[16,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,55,62],$Vn=[2,82],$Vo=[1,53],$Vp=[1,49],$Vq=[5,9],$Vr=[5,8,9,16,23,24,27,28,31,32,33,36,37,39,40,44,53,60,64,65,66,67,68,69,75],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,83],$VK=[1,85],$VL=[9,16,25,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,62,63,72],$VM=[2,65],$VN=[1,91],$VO=[2,89],$VP=[5,8,9,16,23,24,25,26,27,28,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,62,63,64,65,66,67,68,69,72,75],$VQ=[1,99],$VR=[2,93],$VS=[9,16,25,38,39,40,41,42,43,45,46,47,48,49,50,51,52,54,62,63,72],$VT=[25,54],$VU=[9,16,25,38,39,40,45,46,47,48,49,50,51,52,54,62,63,72],$VV=[9,16,25,38,45,46,47,48,54,62,63,72],$VW=[9,16,25,38,45,46,47,48,49,50,51,52,54,62,63,72],$VX=[1,154];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement_block":6,"empty_block":7,"{":8,"}":9,"non_empty_statements":10,"statement":11,"if_statement":12,"while_statement":13,"for_statement":14,"break_statement":15,";":16,"continue_statement":17,"function_definition":18,"return_statement":19,"variable_definition":20,"assignment_statement":21,"expression":22,"if":23,"(":24,")":25,"else":26,"while":27,"for":28,"for_initialiser":29,"for_finaliser":30,"break":31,"continue":32,"function":33,"identifier":34,"identifiers":35,"return":36,"var":37,"=":38,"+":39,"-":40,"*":41,"/":42,"%":43,"!":44,"&&":45,"||":46,"===":47,"!==":48,">":49,"<":50,">=":51,"<=":52,"[":53,"]":54,".":55,"constants":56,"expressions":57,"array_literal":58,"object_literal":59,"new":60,"function_expression":61,"?":62,":":63,"STRING":64,"FLOAT_NUMBER":65,"INT_NUMBER":66,"true":67,"false":68,"empty_list":69,"non_empty_object_literal_statements":70,"object_literal_statement":71,",":72,"non_empty_expressions":73,"non_empty_identifiers":74,"Identifier":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",16:";",23:"if",24:"(",25:")",26:"else",27:"while",28:"for",31:"break",32:"continue",33:"function",36:"return",37:"var",38:"=",39:"+",40:"-",41:"*",42:"/",43:"%",44:"!",45:"&&",46:"||",47:"===",48:"!==",49:">",50:"<",51:">=",52:"<=",53:"[",54:"]",55:".",60:"new",62:"?",63:":",64:"STRING",65:"FLOAT_NUMBER",66:"INT_NUMBER",67:"true",68:"false",69:"empty_list",72:",",75:"Identifier"},
productions_: [0,[3,2],[3,2],[3,2],[7,2],[6,3],[4,0],[4,1],[10,2],[10,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,1],[11,2],[11,2],[11,2],[11,2],[11,1],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[13,5],[13,5],[14,9],[14,9],[29,1],[29,1],[29,1],[29,0],[30,1],[30,1],[30,0],[15,1],[17,1],[18,6],[18,6],[19,2],[20,4],[21,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,4],[22,3],[22,3],[22,1],[22,1],[22,6],[22,1],[22,1],[22,4],[22,6],[22,5],[22,1],[22,5],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[58,3],[59,3],[59,1],[70,3],[70,1],[71,3],[61,5],[61,5],[57,1],[57,0],[73,3],[73,1],[35,1],[35,0],[74,3],[74,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3:
 return $$[$0-1]; 
break;
case 4:
 this.$ = [] 
break;
case 5: case 63:
 this.$ = $$[$0-1]; 
break;
case 6: case 89: case 93:
 this.$ = []; 
break;
case 8:

            if ($$[$0-1] === Nodes.no_op()) {
                this.$ = $$[$0];
            } else {
                this.$ = Nodes.pair($$[$0-1], $$[$0]);
            }
        
break;
case 9:

            if ($$[$0] === Nodes.no_op()) {
                this.$ = [];
            } else {
                this.$ = Nodes.pair($$[$0], []);
            }
        
break;
case 20:
 this.$ = Nodes.no_op(); 
break;
case 21: case 22: case 23: case 24:
 this.$ = Nodes.if_statement($$[$0-4], $$[$0-2], $$[$0], yylineno); 
break;
case 25: case 26:
 this.$ = Nodes.if_statement($$[$0-4], $$[$0-2], Nodes.pair($$[$0], []), yylineno); 
break;
case 27: case 28:
 this.$ = Nodes.while_statement($$[$0-2], $$[$0], yylineno) 
break;
case 29: case 30:
 this.$ = Nodes.for_statement($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], yylineno); 
break;
case 38:
 this.$ = Nodes.break_statement(yylineno); 
break;
case 39:
 this.$ = Nodes.continue_statement(yylineno); 
break;
case 40: case 41:
 this.$ = Nodes.variable_definition($$[$0-4], Nodes.function_definition($$[$0-4], $$[$0-2], $$[$0], _$[$0-5], _$[$0]), yylineno); 
break;
case 42:
 this.$ = Nodes.return_statement($$[$0], yylineno); 
break;
case 43:
 this.$ = Nodes.variable_definition($$[$0-2], $$[$0], yylineno); 
break;
case 44:

            if ($$[$0-2].tag === 'variable') {
                this.$ = Nodes.assignment($$[$0-2], $$[$0], yylineno);

            } else if ($$[$0-2].tag === 'property_access') {
                this.$ = Nodes.property_assignment($$[$0-2].object, $$[$0-2].property, $$[$0], yylineno);

            } else {
                error('parse error in line ' + yylineno + ": " + yytext);
            }
        
break;
case 45: case 46: case 47: case 48: case 49: case 55: case 56: case 57: case 58: case 59: case 60:
 this.$ = Nodes.eager_binary_expression($$[$0-2], $$[$0-1], $$[$0], yylineno); 
break;
case 50: case 51:
 this.$ = Nodes.eager_binary_expression(0, $$[$0-1], $$[$0], yylineno); 
break;
case 52:
 this.$ = Nodes.eager_unary_expression($$[$0-1], $$[$0], yylineno); 
break;
case 53: case 54:
 this.$ = Nodes.boolean_operation($$[$0-2], $$[$0-1], $$[$0], yylineno); 
break;
case 61:
 this.$ = Nodes.property_access($$[$0-3], $$[$0-1], yylineno); 
break;
case 62:
 this.$ = Nodes.property_access($$[$0-2], $$[$0], yylineno); 
break;
case 65:
 this.$ = Nodes.variable($$[$0], yylineno); 
break;
case 66:
 this.$ = Nodes.application($$[$0-4], $$[$0-1], yylineno); 
break;
case 69:
 this.$ = Nodes.application(Nodes.variable($$[$0-3], yylineno), $$[$0-1], yylineno); 
break;
case 70:
 this.$ = Nodes.object_method_application($$[$0-5], $$[$0-3], $$[$0-1], yylineno); 
break;
case 71:
 this.$ = Nodes.construction($$[$0-3], $$[$0-1], yylineno); 
break;
case 73:
 this.$ = Nodes.ternary($$[$0-4], $$[$0-2], $$[$0], yylineno); 
break;
case 74: case 96:
 this.$ = yytext; 
break;
case 75:
 this.$ = parseFloat(yytext); 
break;
case 76:
 this.$ = parseInt(yytext, 10); 
break;
case 77:
 this.$ = true; 
break;
case 78:
 this.$ = false; 
break;
case 79:
 this.$ = Nodes.empty_list(yylineno); 
break;
case 80:
 this.$ = Nodes.array_literal($$[$0-1], yylineno); 
break;
case 81:
 this.$ = Nodes.object_literal($$[$0-1], yylineno); 
break;
case 82:
 this.$ = Nodes.object_literal([], yylineno); 
break;
case 83: case 85: case 90: case 94:
 this.$ = Nodes.pair($$[$0-2], $$[$0]); 
break;
case 84: case 91: case 95:
 this.$ = Nodes.pair($$[$0], []); 
break;
case 86: case 87:
 this.$ = Nodes.function_definition('lambda', $$[$0-2], $$[$0], _$[$0-4], _$[$0]); 
break;
case 88: case 92:
 this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,6],6:3,7:4,8:[1,6],10:5,11:7,12:8,13:9,14:10,15:11,16:$V0,17:12,18:13,19:14,20:15,21:16,22:17,23:$V1,24:$V2,27:$V3,28:$V4,31:$V5,32:$V6,33:$V7,34:32,36:$V8,37:$V9,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{1:[3]},{5:[1,45]},{5:[1,46]},o($Vm,$Vn,{5:[1,47]}),{5:[2,7]},{7:54,8:$Vo,9:$Vp,10:48,11:7,12:8,13:9,14:10,15:11,16:$V0,17:12,18:13,19:14,20:15,21:16,22:17,23:$V1,24:$V2,27:$V3,28:$V4,31:$V5,32:$V6,33:$V7,34:52,36:$V8,37:$V9,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,70:50,71:51,75:$Vl},o($Vq,[2,9],{11:7,12:8,13:9,14:10,15:11,17:12,18:13,19:14,20:15,21:16,22:17,56:31,34:32,58:33,59:34,61:36,7:54,10:55,8:$Vo,16:$V0,23:$V1,24:$V2,27:$V3,28:$V4,31:$V5,32:$V6,33:$V7,36:$V8,37:$V9,39:$Va,40:$Vb,44:$Vc,53:$Vd,60:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl}),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),{16:[1,56]},{16:[1,57]},o($Vr,[2,15]),{16:[1,58]},{16:[1,59]},{16:[1,60]},{16:[1,61],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},o($Vr,[2,20]),{24:[1,79]},{24:[1,80]},{24:[1,81]},{16:[2,38]},{16:[2,39]},{24:$VJ,34:82,75:$Vl},{7:54,8:$Vo,22:84,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{34:86,75:$Vl},{7:54,8:$Vo,22:87,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:88,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:89,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:90,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},o($VL,[2,64]),o($VL,$VM,{24:$VN}),o($VL,[2,67]),o($VL,[2,68]),{34:92,75:$Vl},o($VL,[2,72]),o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o([9,16,24,25,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,62,63,72],[2,96]),{7:54,8:$Vo,22:95,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,54:$VO,56:31,57:93,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:94,75:$Vl},{1:[2,1]},{1:[2,2]},{1:[2,3]},{9:[1,96]},o($VP,[2,4]),{9:[1,97]},{9:[2,84],72:[1,98]},o($Vm,$VM,{24:$VN,63:$VQ}),{9:$Vp,34:100,70:50,71:51,75:$Vl},o($VL,$Vn),o($Vq,[2,8]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,16]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vr,[2,19]),{7:54,8:$Vo,22:101,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:102,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:103,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:104,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:105,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:106,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:107,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:108,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:109,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:110,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:111,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:112,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:113,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:114,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:115,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{34:116,75:$Vl},{7:54,8:$Vo,22:117,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:118,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,22:119,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{7:54,8:$Vo,16:[2,34],20:122,21:123,22:121,24:$V2,29:120,33:$VK,34:32,37:$V9,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{24:[1,124]},{25:$VR,34:127,35:125,74:126,75:$Vl},{16:[2,42],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{24:$VJ},{38:[1,128]},o($VS,[2,50],{53:$VG,55:$VH}),o($VS,[2,51],{53:$VG,55:$VH}),o($VS,[2,52],{53:$VG,55:$VH}),{25:[1,129],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{7:54,8:$Vo,22:95,24:$V2,25:$VO,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,57:130,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:94,75:$Vl},{24:[1,131]},{54:[1,132]},o($VT,[2,88]),o($VT,[2,91],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI,72:[1,133]}),o($VP,[2,5]),o($VL,[2,81]),{34:100,70:134,71:51,75:$Vl},{7:54,8:$Vo,22:135,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{63:$VQ},o([16,25],[2,44],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI}),o($VU,[2,45],{41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),o($VU,[2,46],{41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),o($VS,[2,47],{53:$VG,55:$VH}),o($VS,[2,48],{53:$VG,55:$VH}),o($VS,[2,49],{53:$VG,55:$VH}),o([9,16,25,38,45,46,54,62,63,72],[2,53],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH}),o([9,16,25,38,46,54,62,63,72],[2,54],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH}),o($VV,[2,55],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH}),o($VV,[2,56],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH}),o($VW,[2,57],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),o($VW,[2,58],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),o($VW,[2,59],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),o($VW,[2,60],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,53:$VG,55:$VH}),{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:[1,136],55:$VH,62:$VI},o($VL,[2,62],{24:[1,137]}),{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI,63:[1,138]},{25:[1,139],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{25:[1,140],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{16:[1,141]},{16:[2,31],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{16:[2,32]},{16:[2,33]},{25:$VR,34:127,35:142,74:126,75:$Vl},{25:[1,143]},{25:[2,92]},{25:[2,95],72:[1,144]},{7:54,8:$Vo,22:145,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},o($VL,[2,63],{24:[1,146]}),{25:[1,147]},{7:54,8:$Vo,22:95,24:$V2,25:$VO,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,57:148,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:94,75:$Vl},o($VL,[2,80]),{7:54,8:$Vo,22:95,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:149,75:$Vl},{9:[2,83]},o([9,72],[2,85],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI}),o($VL,[2,61]),{7:54,8:$Vo,22:95,24:$V2,25:$VO,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,57:150,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:94,75:$Vl},{7:54,8:$Vo,22:151,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{6:152,7:153,8:$VX},{6:155,7:156,8:$VX},{7:54,8:$Vo,22:157,24:$V2,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},{25:[1,158]},{6:159,7:160,8:$VX},{34:127,74:161,75:$Vl},{16:[2,43],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{7:54,8:$Vo,22:95,24:$V2,25:$VO,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,57:162,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,73:94,75:$Vl},o($VL,[2,69]),{25:[1,163]},o($VT,[2,90]),{25:[1,164]},o([9,16,25,38,54,63,72],[2,73],{39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI}),{26:[1,165]},{26:[1,166]},{7:54,8:$Vo,9:$Vp,10:48,11:7,12:8,13:9,14:10,15:11,16:$V0,17:12,18:13,19:14,20:15,21:16,22:17,23:$V1,24:$V2,27:$V3,28:$V4,31:$V5,32:$V6,33:$V7,34:32,36:$V8,37:$V9,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},o($Vr,[2,27]),o($Vr,[2,28]),{16:[1,167],39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{6:168,7:169,8:$VX},o($VL,[2,86]),o($VL,[2,87]),{25:[2,94]},{25:[1,170]},o($VL,[2,71]),o($VL,[2,70]),{6:171,7:172,8:$VX,12:173,23:$V1},{6:174,7:175,8:$VX,12:176,23:$V1},{7:54,8:$Vo,21:178,22:179,24:$V2,25:[2,37],30:177,33:$VK,34:32,39:$Va,40:$Vb,44:$Vc,53:$Vd,56:31,58:33,59:34,60:$Ve,61:36,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:$Vj,69:$Vk,75:$Vl},o($Vr,[2,40]),o($Vr,[2,41]),o($VL,[2,66]),o($Vr,[2,21]),o($Vr,[2,22]),o($Vr,[2,25]),o($Vr,[2,23]),o($Vr,[2,24]),o($Vr,[2,26]),{25:[1,180]},{25:[2,35]},{25:[2,36],38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,55:$VH,62:$VI},{6:181,7:182,8:$VX},o($Vr,[2,29]),o($Vr,[2,30])],
defaultActions: {5:[2,7],22:[2,38],23:[2,39],45:[2,1],46:[2,2],47:[2,3],122:[2,32],123:[2,33],126:[2,92],134:[2,83],161:[2,94],178:[2,35]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* lib/parser/includes/nodes.js*/
var Nodes = require('./nodes');
;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip single-line comments */
break;
case 1:/* skip multi-line comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 33
break;
case 4:return 'INVALID'
break;
case 5:return 36
break;
case 6:return 23
break;
case 7:return 26
break;
case 8:return 27
break;
case 9:return 28
break;
case 10:return 'case'
break;
case 11:return 'default'
break;
case 12:return 60
break;
case 13:return 31
break;
case 14:return 32
break;
case 15:return 37
break;
case 16:return 47
break;
case 17:return 38
break;
case 18:return 8
break;
case 19:return 9
break;
case 20:return 16
break;
case 21:return 72
break;
case 22:return 67
break;
case 23:return 68
break;
case 24:return 69
break;
case 25:return 53
break;
case 26:return 54
break;
case 27:return 55
break;
case 28: this.begin('DoubleQuotedString'); this.string = ''; 
break;
case 29: this.begin('SingleQuotedString'); this.string = ''; 
break;
case 30:this.begin('QuotedStringEscape');
break;
case 31: yy_.yytext = this.string; this.string = undefined; this.popState(); return 64; 
break;
case 32: yy_.yytext = this.string; this.string = undefined; this.popState(); return 64; 
break;
case 33: /* The newlines are there because we can span strings across lines using \ */
    switch (yy_.yytext) {
        case '\r\n':
        case '\n':          break;
        case 'b':           this.string += '\b'; break;
        case 'n':           this.string += '\n'; break;
        case 'r':           this.string += '\r'; break;
        case 't':           this.string += '\t'; break;
        case "'":           this.string += "'"; break;
        case '"':           this.string += '"'; break;
        case '\\':          this.string += '\\'; break;
        default:            this.string += '\\' + $1; break;
    }

    this.popState();

break;
case 34:this.string += yy_.yytext;
break;
case 35:this.string += yy_.yytext;
break;
case 36:return 75 /* TODO: non-ASCII identifiers */
break;
case 37:return 65 /* 3.1, 3.1e-7 */
break;
case 38:return 66
break;
case 39:return 39
break;
case 40:return 40
break;
case 41:return 41
break;
case 42:return 42
break;
case 43:return 43
break;
case 44:return 48
break;
case 45:return 52
break;
case 46:return 51
break;
case 47:return 50
break;
case 48:return 49
break;
case 49:return 44
break;
case 50:return 45
break;
case 51:return 46
break;
case 52:return 24
break;
case 53:return 25
break;
case 54:return 62
break;
case 55:return 63
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/([^\n\r]*))/,/^(?:\/\*([\u0000-\uffff]*?)\*\/)/,/^(?:\s+)/,/^(?:function\b)/,/^(?:return\s*\n)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:new\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:var\b)/,/^(?:===)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\[\])/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:")/,/^(?:')/,/^(?:\\)/,/^(?:")/,/^(?:')/,/^(?:(.|\r\n|\n))/,/^(?:[^"\\]*)/,/^(?:[^'\\]*)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?([eE][\-+]?[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"QuotedStringEscape":{"rules":[33],"inclusive":false},"SingleQuotedString":{"rules":[30,32,35],"inclusive":false},"DoubleQuotedString":{"rules":[30,31,34],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;parser.lexer.options.ranges = true;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserWeek13;
exports.Parser = parserWeek13.Parser;
exports.parse = function () { return parserWeek13.parse.apply(parserWeek13, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}