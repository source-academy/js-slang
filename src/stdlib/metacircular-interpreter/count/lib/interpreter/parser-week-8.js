/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserWeek8 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,15],$V2=[1,16],$V3=[1,24],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,22],$V9=[1,21],$Va=[1,23],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[5,9],$Vj=[5,9,16,20,21,24,25,28,29,31,32,36,51,52,53,54,55,56,60],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,64],$VA=[1,66],$VB=[16,22,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,49,50,58],$VC=[5,9,16,20,21,22,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,58,60],$VD=[2,69],$VE=[16,22,30,31,32,33,34,35,37,38,39,40,41,42,43,44,49,50,58],$VF=[2,65],$VG=[16,22,30,31,32,37,38,39,40,41,42,43,44,49,50,58],$VH=[16,22,30,37,38,39,40,49,50,58],$VI=[16,22,30,37,38,39,40,41,42,43,44,49,50,58];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"statement_block":6,"empty_block":7,"{":8,"}":9,"non_empty_statements":10,"statement":11,"if_statement":12,"while_statement":13,"function_definition":14,"return_statement":15,";":16,"variable_definition":17,"assignment_statement":18,"expression":19,"if":20,"(":21,")":22,"else":23,"while":24,"function":25,"identifier":26,"identifiers":27,"return":28,"var":29,"=":30,"+":31,"-":32,"*":33,"/":34,"%":35,"!":36,"&&":37,"||":38,"===":39,"!==":40,">":41,"<":42,">=":43,"<=":44,".":45,"constants":46,"expressions":47,"function_expression":48,"?":49,":":50,"STRING":51,"FLOAT_NUMBER":52,"INT_NUMBER":53,"true":54,"false":55,"empty_list":56,"non_empty_expressions":57,",":58,"non_empty_identifiers":59,"Identifier":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",16:";",20:"if",21:"(",22:")",23:"else",24:"while",25:"function",28:"return",29:"var",30:"=",31:"+",32:"-",33:"*",34:"/",35:"%",36:"!",37:"&&",38:"||",39:"===",40:"!==",41:">",42:"<",43:">=",44:"<=",45:".",49:"?",50:":",51:"STRING",52:"FLOAT_NUMBER",53:"INT_NUMBER",54:"true",55:"false",56:"empty_list",58:",",60:"Identifier"},
productions_: [0,[3,2],[3,2],[3,2],[7,2],[6,3],[4,0],[4,1],[10,2],[10,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,2],[11,2],[11,1],[12,7],[12,7],[12,7],[12,7],[12,7],[12,7],[13,5],[13,5],[14,6],[14,6],[15,2],[17,4],[18,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,6],[19,4],[19,6],[19,1],[19,5],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[48,5],[48,5],[47,1],[47,0],[57,3],[57,1],[27,1],[27,0],[59,3],[59,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3:
 return $$[$0-1]; 
break;
case 4:
 this.$ = [] 
break;
case 5: case 48:
 this.$ = $$[$0-1]; 
break;
case 6: case 65: case 69:
 this.$ = []; 
break;
case 8:

            if ($$[$0-1] === Nodes.no_op()) {
                this.$ = $$[$0];
            } else {
                this.$ = Nodes.pair($$[$0-1], $$[$0]);
            }
        
break;
case 9:

            if ($$[$0] === Nodes.no_op()) {
                this.$ = [];
            } else {
                this.$ = Nodes.pair($$[$0], []);
            }
        
break;
case 17:
 this.$ = Nodes.no_op(); 
break;
case 18: case 19: case 20: case 21:
 this.$ = Nodes.if_statement($$[$0-4], $$[$0-2], $$[$0], yylineno); 
break;
case 22: case 23:
 this.$ = Nodes.if_statement($$[$0-4], $$[$0-2], Nodes.pair($$[$0], []), yylineno); 
break;
case 24: case 25:
 this.$ = Nodes.while_statement($$[$0-2], $$[$0], yylineno) 
break;
case 26: case 27:
 this.$ = Nodes.variable_definition($$[$0-4], Nodes.function_definition($$[$0-4], $$[$0-2], $$[$0], _$[$0-5], _$[$0]), yylineno); 
break;
case 28:
 this.$ = Nodes.return_statement($$[$0], yylineno); 
break;
case 29:
 this.$ = Nodes.variable_definition($$[$0-2], $$[$0], yylineno); 
break;
case 30:

            if ($$[$0-2].tag === 'variable') {
                this.$ = Nodes.assignment($$[$0-2], $$[$0], yylineno);

            } else {
                error('parse error in line ' + yylineno + ": " + yytext);
            }
        
break;
case 31: case 32: case 33: case 34: case 35: case 41: case 42: case 43: case 44: case 45: case 46:
 this.$ = Nodes.eager_binary_expression($$[$0-2], $$[$0-1], $$[$0], yylineno); 
break;
case 36: case 37:
 this.$ = Nodes.eager_binary_expression(0, $$[$0-1], $$[$0], yylineno); 
break;
case 38:
 this.$ = Nodes.eager_unary_expression($$[$0-1], $$[$0], yylineno); 
break;
case 39: case 40:
 this.$ = Nodes.boolean_operation($$[$0-2], $$[$0-1], $$[$0], yylineno); 
break;
case 47:
 this.$ = Nodes.property_access($$[$0-2], $$[$0], yylineno); 
break;
case 50:
 this.$ = Nodes.variable($$[$0], yylineno); 
break;
case 51:
 this.$ = Nodes.application($$[$0-4], $$[$0-1], yylineno); 
break;
case 52:
 this.$ = Nodes.application(Nodes.variable($$[$0-3], yylineno), $$[$0-1], yylineno); 
break;
case 53:
 this.$ = Nodes.object_method_application($$[$0-5], $$[$0-3], $$[$0-1], yylineno); 
break;
case 55:
 this.$ = Nodes.ternary($$[$0-4], $$[$0-2], $$[$0], yylineno); 
break;
case 56: case 72:
 this.$ = yytext; 
break;
case 57:
 this.$ = parseFloat(yytext); 
break;
case 58:
 this.$ = parseInt(yytext, 10); 
break;
case 59:
 this.$ = true; 
break;
case 60:
 this.$ = false; 
break;
case 61:
 this.$ = Nodes.empty_list(yylineno); 
break;
case 62: case 63:
 this.$ = Nodes.function_definition('lambda', $$[$0-2], $$[$0], _$[$0-4], _$[$0]); 
break;
case 64: case 68:
 this.$ = $$[$0]; 
break;
case 66: case 70:
 this.$ = Nodes.pair($$[$0-2], $$[$0]); 
break;
case 67: case 71:
 this.$ = Nodes.pair($$[$0], []); 
break;
}
},
table: [{3:1,4:2,5:[2,6],6:3,7:4,8:$V0,10:5,11:7,12:8,13:9,14:10,15:11,16:$V1,17:12,18:13,19:14,20:$V2,21:$V3,24:$V4,25:$V5,26:26,28:$V6,29:$V7,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{1:[3]},{5:[1,35]},{5:[1,36]},{5:[1,37]},{5:[2,7]},{9:[1,39],10:38,11:7,12:8,13:9,14:10,15:11,16:$V1,17:12,18:13,19:14,20:$V2,21:$V3,24:$V4,25:$V5,26:26,28:$V6,29:$V7,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},o($Vi,[2,9],{11:7,12:8,13:9,14:10,15:11,17:12,18:13,19:14,46:25,26:26,48:27,10:40,16:$V1,20:$V2,21:$V3,24:$V4,25:$V5,28:$V6,29:$V7,31:$V8,32:$V9,36:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh}),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{16:[1,41]},{16:[1,42]},{16:[1,43]},{16:[1,44],30:[1,45],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},o($Vj,[2,17]),{21:[1,61]},{21:[1,62]},{21:$Vz,26:63,60:$Vh},{19:65,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{26:67,60:$Vh},{19:68,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:69,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:70,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:71,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},o($VB,[2,49]),o($VB,[2,50],{21:[1,72]}),o($VB,[2,54]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o([16,21,22,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,49,50,58],[2,72]),{1:[2,1]},{1:[2,2]},{1:[2,3]},{9:[1,73]},o($VC,[2,4]),o($Vi,[2,8]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{19:74,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:75,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:76,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:77,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:78,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:79,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:80,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:81,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:82,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:83,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:84,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:85,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:86,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:87,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{26:88,60:$Vh},{19:89,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:90,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{19:91,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{21:[1,92]},{22:$VD,26:95,27:93,59:94,60:$Vh},{16:[2,28],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},{21:$Vz},{30:[1,96]},o($VE,[2,36],{45:$Vx}),o($VE,[2,37],{45:$Vx}),o($VE,[2,38],{45:$Vx}),{22:[1,97],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},{19:100,21:$V3,22:$VF,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,47:98,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:99,60:$Vh},o($VC,[2,5]),{16:[2,30],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},o($VG,[2,31],{33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VG,[2,32],{33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VE,[2,33],{45:$Vx}),o($VE,[2,34],{45:$Vx}),o($VE,[2,35],{45:$Vx}),o([16,22,30,37,38,49,50,58],[2,39],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx}),o([16,22,30,38,49,50,58],[2,40],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx}),o($VH,[2,41],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx}),o($VH,[2,42],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx}),o($VI,[2,43],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VI,[2,44],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VI,[2,45],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VI,[2,46],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,45:$Vx}),o($VB,[2,47],{21:[1,101]}),{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy,50:[1,102]},{22:[1,103],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},{22:[1,104],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},{22:$VD,26:95,27:105,59:94,60:$Vh},{22:[1,106]},{22:[2,68]},{22:[2,71],58:[1,107]},{19:108,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},o($VB,[2,48],{21:[1,109]}),{22:[1,110]},{22:[2,64]},{22:[2,67],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy,58:[1,111]},{19:100,21:$V3,22:$VF,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,47:112,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:99,60:$Vh},{19:113,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,60:$Vh},{6:114,7:115,8:$V0},{6:116,7:117,8:$V0},{22:[1,118]},{6:119,7:120,8:$V0},{26:95,59:121,60:$Vh},{16:[2,29],31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy},{19:100,21:$V3,22:$VF,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,47:122,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:99,60:$Vh},o($VB,[2,52]),{19:100,21:$V3,25:$VA,26:26,31:$V8,32:$V9,36:$Va,46:25,48:27,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:123,60:$Vh},{22:[1,124]},o([16,22,30,50,58],[2,55],{31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,49:$Vy}),{23:[1,125]},{23:[1,126]},o($Vj,[2,24]),o($Vj,[2,25]),{6:127,7:128,8:$V0},o($VB,[2,62]),o($VB,[2,63]),{22:[2,70]},{22:[1,129]},{22:[2,66]},o($VB,[2,53]),{6:130,7:131,8:$V0,12:132,20:$V2},{6:133,7:134,8:$V0,12:135,20:$V2},o($Vj,[2,26]),o($Vj,[2,27]),o($VB,[2,51]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,22]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,23])],
defaultActions: {5:[2,7],35:[2,1],36:[2,2],37:[2,3],94:[2,68],99:[2,64],121:[2,70],123:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* lib/parser/includes/nodes.js*/
var Nodes = require('./nodes');
;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip single-line comments */
break;
case 1:/* skip multi-line comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 25
break;
case 4:return 'INVALID'
break;
case 5:return 28
break;
case 6:return 20
break;
case 7:return 23
break;
case 8:return 24
break;
case 9:return 'for'
break;
case 10:return 'case'
break;
case 11:return 'default'
break;
case 12:return 'new'
break;
case 13:return 'break'
break;
case 14:return 'continue'
break;
case 15:return 29
break;
case 16:return 39
break;
case 17:return 30
break;
case 18:return 8
break;
case 19:return 9
break;
case 20:return 16
break;
case 21:return 58
break;
case 22:return 54
break;
case 23:return 55
break;
case 24:return 56
break;
case 25:return '['
break;
case 26:return ']'
break;
case 27:return 45
break;
case 28: this.begin('DoubleQuotedString'); this.string = ''; 
break;
case 29: this.begin('SingleQuotedString'); this.string = ''; 
break;
case 30:this.begin('QuotedStringEscape');
break;
case 31: yy_.yytext = this.string; this.string = undefined; this.popState(); return 51; 
break;
case 32: yy_.yytext = this.string; this.string = undefined; this.popState(); return 51; 
break;
case 33: /* The newlines are there because we can span strings across lines using \ */
    switch (yy_.yytext) {
        case '\r\n':
        case '\n':          break;
        case 'b':           this.string += '\b'; break;
        case 'n':           this.string += '\n'; break;
        case 'r':           this.string += '\r'; break;
        case 't':           this.string += '\t'; break;
        case "'":           this.string += "'"; break;
        case '"':           this.string += '"'; break;
        case '\\':          this.string += '\\'; break;
        default:            this.string += '\\' + $1; break;
    }

    this.popState();

break;
case 34:this.string += yy_.yytext;
break;
case 35:this.string += yy_.yytext;
break;
case 36:return 60 /* TODO: non-ASCII identifiers */
break;
case 37:return 52 /* 3.1, 3.1e-7 */
break;
case 38:return 53
break;
case 39:return 31
break;
case 40:return 32
break;
case 41:return 33
break;
case 42:return 34
break;
case 43:return 35
break;
case 44:return 40
break;
case 45:return 44
break;
case 46:return 43
break;
case 47:return 42
break;
case 48:return 41
break;
case 49:return 36
break;
case 50:return 37
break;
case 51:return 38
break;
case 52:return 21
break;
case 53:return 22
break;
case 54:return 49
break;
case 55:return 50
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/([^\n\r]*))/,/^(?:\/\*([\u0000-\uffff]*?)\*\/)/,/^(?:\s+)/,/^(?:function\b)/,/^(?:return\s*\n)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:new\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:var\b)/,/^(?:===)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\[\])/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:")/,/^(?:')/,/^(?:\\)/,/^(?:")/,/^(?:')/,/^(?:(.|\r\n|\n))/,/^(?:[^"\\]*)/,/^(?:[^'\\]*)/,/^(?:[A-Za-z_][A-Za-z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?([eE][\-+]?[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!==)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"QuotedStringEscape":{"rules":[33],"inclusive":false},"SingleQuotedString":{"rules":[30,32,35],"inclusive":false},"DoubleQuotedString":{"rules":[30,31,34],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;parser.lexer.options.ranges = true;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserWeek8;
exports.Parser = parserWeek8.Parser;
exports.parse = function () { return parserWeek8.parse.apply(parserWeek8, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}