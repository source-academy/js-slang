{
  "blank": {
    "title": "blank",
    "description": "<div><h4>blank</h4><div class=\"description\">\n    primitive Rune in the rune of a blank square\n</div>\n</div>",
    "meta": "const"
  },
  "circle": {
    "title": "circle",
    "description": "<div><h4>circle</h4><div class=\"description\">\n    primitive Rune in the rune of a circle\n</div>\n</div>",
    "meta": "const"
  },
  "corner": {
    "title": "corner",
    "description": "<div><h4>corner</h4><div class=\"description\">\n    primitive Rune with black triangle,\nfilling upper right corner\n</div>\n</div>",
    "meta": "const"
  },
  "heart": {
    "title": "heart",
    "description": "<div><h4>heart</h4><div class=\"description\">\n    primitive Rune in the rune of a heart\n</div>\n</div>",
    "meta": "const"
  },
  "nova": {
    "title": "nova",
    "description": "<div><h4>nova</h4><div class=\"description\">\n    primitive Rune in the rune of two overlapping\ntriangles, residing in the upper half\nof\n</div>\n</div>",
    "meta": "const"
  },
  "pentagram": {
    "title": "pentagram",
    "description": "<div><h4>pentagram</h4><div class=\"description\">\n    primitive Rune in the rune of a pentagram\n</div>\n</div>",
    "meta": "const"
  },
  "rcross": {
    "title": "rcross",
    "description": "<div><h4>rcross</h4><div class=\"description\">\n    primitive Rune in the rune of a \nsmallsquare inside a large square,\neach diagonally split into a\nblack and white half\n</div>\n</div>",
    "meta": "const"
  },
  "ribbon": {
    "title": "ribbon",
    "description": "<div><h4>ribbon</h4><div class=\"description\">\n    primitive Rune in the rune of a ribbon\nwinding outwards in an anticlockwise spiral\n</div>\n</div>",
    "meta": "const"
  },
  "sail": {
    "title": "sail",
    "description": "<div><h4>sail</h4><div class=\"description\">\n    primitive Rune in the rune of a sail\n</div>\n</div>",
    "meta": "const"
  },
  "square": {
    "title": "square",
    "description": "<div><h4>square</h4><div class=\"description\">\n    primitive Rune in the rune of a full square\n</div>\n</div>",
    "meta": "const"
  },
  "adsr": {
    "title": "adsr(attack_ratio, decay_ratio, sustain_level, release_ratio) \u2192 {function}",
    "description": "<div><h4>adsr(attack_ratio, decay_ratio, sustain_level, release_ratio) &#8594; {function}</h4><div class=\"description\">\n    Returns an envelope: a function from Sound to Sound.\nWhen the envelope is applied to a Sound, it returns\na new Sound that results from applying ADSR to\nthe given Sound. The Attack, Sustain and\nRelease ratios are given in the first, second and fourth\narguments, and the Sustain level is given in \nthe third argument as a fraction between 0 and 1.\n</div>\n    </div>",
    "meta": "func"
  },
  "anaglyph": {
    "title": "anaglyph(rune) \u2192 {Picture}",
    "description": "<div><h4>anaglyph(rune) &#8594; {Picture}</h4><div class=\"description\">\n    turns a given Rune into an Anaglyph\n</div>\n    </div>",
    "meta": "func"
  },
  "apply_filter": {
    "title": "apply_filter(filter) \u2192 {undefined}",
    "description": "<div><h4>apply_filter(filter) &#8594; {undefined}</h4><div class=\"description\">\n    Installs a given filter to be used to transform\nthe images that the camera captures into images\ndisplayed on the screen. A filter is a function\nthat is applied to two two-dimensional arrays\nof Pixels: the source image and the destination\nimage.\n</div>\n    </div>",
    "meta": "func"
  },
  "arc": {
    "title": "arc(t) \u2192 {Point}",
    "description": "<div><h4>arc(t) &#8594; {Point}</h4><div class=\"description\">\n    this function is a curve: a function from a\nfraction t to a point. The points lie on the\nright half of the unit circle. They start at Point (0,1) when\nt is 0. When t is 0.5, they reach Point (1,0),\nwhen t is 1, they reach Point (0, -1).\n</div>\n    </div>",
    "meta": "func"
  },
  "bell": {
    "title": "bell(note, duration) \u2192 {Sound}",
    "description": "<div><h4>bell(note, duration) &#8594; {Sound}</h4><div class=\"description\">\n    returns a Sound that is reminiscent of a bell, playing\na given note for a given <code>duration</code> of seconds\n</div>\n    </div>",
    "meta": "func"
  },
  "beside": {
    "title": "beside(rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>beside(rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from two given Runes by\nplacing the first on the left of the second,\nboth occupying equal portions of the width \nof the result\n</div>\n    </div>",
    "meta": "func"
  },
  "beside_frac": {
    "title": "beside_frac(frac, rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>beside_frac(frac, rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from two given Runes by\nplacing the first on the left of the second\nsuch that the first one occupies frac \nportion of the width of the result and \nthe second the rest\n</div>\n    </div>",
    "meta": "func"
  },
  "black": {
    "title": "black(rune) \u2192 {Rune}",
    "description": "<div><h4>black(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune black.\n</div>\n    </div>",
    "meta": "func"
  },
  "blue": {
    "title": "blue(rune) \u2192 {Rune}",
    "description": "<div><h4>blue(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune blue.\n</div>\n    </div>",
    "meta": "func"
  },
  "blue_of": {
    "title": "blue_of(Pixel) \u2192 {Number}",
    "description": "<div><h4>blue_of(Pixel) &#8594; {Number}</h4><div class=\"description\">\n    Returns the blue component of a given Pixel <code>px</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "brown": {
    "title": "brown(rune) \u2192 {Rune}",
    "description": "<div><h4>brown(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune brown.\n</div>\n    </div>",
    "meta": "func"
  },
  "cello": {
    "title": "cello(note, duration) \u2192 {Sound}",
    "description": "<div><h4>cello(note, duration) &#8594; {Sound}</h4><div class=\"description\">\n    returns a Sound that is reminiscent of a cello, playing\na given note for a given <code>duration</code> of seconds\n</div>\n    </div>",
    "meta": "func"
  },
  "color": {
    "title": "color(rune, r, g, b) \u2192 {Rune}",
    "description": "<div><h4>color(rune, r, g, b) &#8594; {Rune}</h4><div class=\"description\">\n    adds color to rune by specifying \nthe red, green, blue (RGB) value, ranging from 0.0 to 1.0.\nRGB is additive: if all values are 1, the color is white,\nand if all values are 0, the color is black.\n</div>\n    </div>",
    "meta": "func"
  },
  "connect_ends": {
    "title": "connect_ends(curve1, curve2) \u2192 {Curve}",
    "description": "<div><h4>connect_ends(curve1, curve2) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a binary Curve operator: It\ntakes two Curves as arguments and returns\na new Curve. The two Curves are combined\nby using the full first Curve for the first portion\nof the result and by using the full second Curve for the second\nportion of the result.\nThe second Curve is translated such that its point\nat fraction 0 is the same as the Point of the first\nCurve at fraction 1.\n</div>\n    </div>",
    "meta": "func"
  },
  "connect_rigidly": {
    "title": "connect_rigidly(curve1, curve2) \u2192 {Curve}",
    "description": "<div><h4>connect_rigidly(curve1, curve2) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a binary Curve operator: It\ntakes two Curves as arguments and returns\na new Curve. The two Curves are combined\nby using the full first Curve for the first portion\nof the result and by using the full second Curve for the \nsecond portion of the result.\nThe second Curve is not changed, and therefore\nthere might be a big jump in the middle of the\nresult Curve.\n</div>\n    </div>",
    "meta": "func"
  },
  "consecutively": {
    "title": "consecutively(sounds) \u2192 {Sound}",
    "description": "<div><h4>consecutively(sounds) &#8594; {Sound}</h4><div class=\"description\">\n    makes a new sound by combining the sounds in a given\nlist so that\nthey are arranged consecutively. Let us say the durations\nof the sounds are <code>d1</code>, ..., <code>dn</code> and the wave \nfunctions are <code>w1</code>, ..., <code>wn</code>. Then the resulting\nsound has the duration of the sum of <code>d1</code>, ..., <code>dn</code>.\nThe wave function <code>w</code> of the resulting sound uses <code>w1</code> for the first\n<code>d1</code> seconds, <code>w2</code> for the next \n<code>d2</code> seconds etc. We specify that <code>w(d1) = w2(0)</code>,\n<code>w(d1+d2) = w3(0)</code>, etc\n</div>\n    </div>",
    "meta": "func"
  },
  "constrain_color": {
    "title": "constrain_color(val) \u2192 {Number}",
    "description": "<div><h4>constrain_color(val) &#8594; {Number}</h4><div class=\"description\">\n    Constrains a given color value to lie between 0 and 255\n</div>\n    </div>",
    "meta": "func"
  },
  "copy_image": {
    "title": "copy_image(Image, Image) \u2192 {undefined}",
    "description": "<div><h4>copy_image(Image, Image) &#8594; {undefined}</h4><div class=\"description\">\n    Filter that copies all Pixels faithfully from the\nsource Image to the destination Image\n</div>\n    </div>",
    "meta": "func"
  },
  "copy_pixel": {
    "title": "copy_pixel(Pixel, Pixel) \u2192 {undefined}",
    "description": "<div><h4>copy_pixel(Pixel, Pixel) &#8594; {undefined}</h4><div class=\"description\">\n    Copies the red, green and blue components of a Pixel \n<code>src</code> to a Pixel <code>dst</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_connected": {
    "title": "draw_connected(num) \u2192 {function}",
    "description": "<div><h4>draw_connected(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points \nand connecting each pair with a line. \nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe parts between (0,0) and (1,1) of the resulting Drawing \nare shown in the window.\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_connected_full_view": {
    "title": "draw_connected_full_view(num) \u2192 {function}",
    "description": "<div><h4>draw_connected_full_view(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points \nand connecting each pair with a line. \nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe Drawing is stretched or shrunk\nto show the full curve\nand maximize its width and height, with some padding.\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_connected_full_view_proportional": {
    "title": "draw_connected_full_view_proportional(num) \u2192 {function}",
    "description": "<div><h4>draw_connected_full_view_proportional(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points \nand connecting each pair with a line. \nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe Drawing is scaled proportionally to show the full curve\nand maximize its size, with some padding.\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_connected_squeezed_to_window": {
    "title": "draw_connected_squeezed_to_window(num) \u2192 {function}",
    "description": "<div><h4>draw_connected_squeezed_to_window(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points \nand connecting each pair with a line. \nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe Drawing is resized proportionally such that it \nis shown as big as possible, and still fits entirely \ninside the window.\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_points_on": {
    "title": "draw_points_on(num) \u2192 {function}",
    "description": "<div><h4>draw_points_on(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points.\nThe Drawing consists of isolated points, and does not connect them.\nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe parts between (0,0) and (1,1) of the resulting Drawing \nare shown in the window.\n</div>\n    </div>",
    "meta": "func"
  },
  "draw_points_squeezed_to_window": {
    "title": "draw_points_squeezed_to_window(num) \u2192 {function}",
    "description": "<div><h4>draw_points_squeezed_to_window(num) &#8594; {function}</h4><div class=\"description\">\n    returns a function that turns a given Curve into a Drawing, \nby sampling the Curve at <code>num</code> sample points.\nThe Drawing consists of isolated points, and does not connect them.\nWhen a program evaluates to a Drawing, the Source system\ndisplays it graphically, in a window, instead of textually.\nThe Drawing is squeezed such that all its parts are shown in the\nwindow.\n</div>\n    </div>",
    "meta": "func"
  },
  "flip_horiz": {
    "title": "flip_horiz(rune) \u2192 {Rune}",
    "description": "<div><h4>flip_horiz(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune by\nflipping it around a vertical axis,\ncreating a mirror image\n</div>\n    </div>",
    "meta": "func"
  },
  "flip_vert": {
    "title": "flip_vert(rune) \u2192 {Rune}",
    "description": "<div><h4>flip_vert(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune by\nflipping it around a horizontal axis,\nturning it upside down\n</div>\n    </div>",
    "meta": "func"
  },
  "get_duration": {
    "title": "get_duration(sound) \u2192 {Number}",
    "description": "<div><h4>get_duration(sound) &#8594; {Number}</h4><div class=\"description\">\n    Accesses the duration of a Sound, in seconds.\n</div>\n    </div>",
    "meta": "func"
  },
  "get_video_height": {
    "title": "get_video_height() \u2192 {Number}",
    "description": "<div><h4>get_video_height() &#8594; {Number}</h4><div class=\"description\">\n    Returns the current height of the output video display in\npixels, i.e. the number of pixels in vertical direction\n</div>\n</div>",
    "meta": "func"
  },
  "get_video_width": {
    "title": "get_video_width() \u2192 {Number}",
    "description": "<div><h4>get_video_width() &#8594; {Number}</h4><div class=\"description\">\n    Returns the current width of the output video display in\npixels, i.e. the number of pixels in horizontal direction\n</div>\n</div>",
    "meta": "func"
  },
  "get_wave": {
    "title": "get_wave(sound) \u2192 {function}",
    "description": "<div><h4>get_wave(sound) &#8594; {function}</h4><div class=\"description\">\n    Accesses the wave of a Sound.\nThe wave is a function from a non-negative time (in seconds)\nto an amplitude value that should lie between\n-1 and 1.\n</div>\n    </div>",
    "meta": "func"
  },
  "gosper_curve": {
    "title": "gosper_curve(level) \u2192 {Curve}",
    "description": "<div><h4>gosper_curve(level) &#8594; {Curve}</h4><div class=\"description\">\n    returns a gosper Curve, that results from\napply gosperize as many times to the unit line\nas given by the parameter <code>level</code> of\nthe function <code>gosper_curve</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "gosperize": {
    "title": "gosperize(curve) \u2192 {Curve}",
    "description": "<div><h4>gosperize(curve) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a unary Curve operator: It\ntakes a Curve as argument and returns\na new Curve, according to the Gosper operation.\n</div>\n    </div>",
    "meta": "func"
  },
  "green": {
    "title": "green(rune) \u2192 {Rune}",
    "description": "<div><h4>green(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune green.\n</div>\n    </div>",
    "meta": "func"
  },
  "green_of": {
    "title": "green_of(Pixel) \u2192 {Number}",
    "description": "<div><h4>green_of(Pixel) &#8594; {Number}</h4><div class=\"description\">\n    Returns the green component of a given Pixel <code>px</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "indigo": {
    "title": "indigo(rune) \u2192 {Rune}",
    "description": "<div><h4>indigo(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune indigo.\n</div>\n    </div>",
    "meta": "func"
  },
  "init_record": {
    "title": "init_record() \u2192 {undefined}",
    "description": "<div><h4>init_record() &#8594; {undefined}</h4><div class=\"description\">\n    Initialize recording by obtaining permission\nto use the default device microphone\n</div>\n</div>",
    "meta": "func"
  },
  "invert": {
    "title": "invert(original) \u2192 {Curve}",
    "description": "<div><h4>invert(original) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a unary Curve operator: a function from a\nCurve to a Curve. The points of the result Curve are\nthe same points as the points of the original Curve, but\nin reverse: The result Curve applied to 0 is the original Curve\napplied to 1 and vice versa.\n</div>\n    </div>",
    "meta": "func"
  },
  "is_sound": {
    "title": "is_sound(x) \u2192 {boolean}",
    "description": "<div><h4>is_sound(x) &#8594; {boolean}</h4><div class=\"description\">\n    Checks if a given value is a Sound\n</div>\n    </div>",
    "meta": "func"
  },
  "letter_name_to_frequency": {
    "title": "letter_name_to_frequency(str) \u2192 {Number}",
    "description": "<div><h4>letter_name_to_frequency(str) &#8594; {Number}</h4><div class=\"description\">\n    converts a letter name <code>str</code> to corresponding frequency.\nFirst converts <code>str</code> to a note using <code>letter_name_to_midi_note</code>\nand then to a frequency using <code>midi_note_to_frequency</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "letter_name_to_midi_note": {
    "title": "letter_name_to_midi_note(str) \u2192 {Number}",
    "description": "<div><h4>letter_name_to_midi_note(str) &#8594; {Number}</h4><div class=\"description\">\n    converts a letter name <code>str</code> to corresponding midi note.\nExamples for letter names are <code>\"A5\"</code>, <code>\"B3\"</code>, <code>\"D#4\"</code>.\nSee <a href=\"https://i.imgur.com/qGQgmYr.png\">mapping from\nletter name to midi notes</a>\n</div>\n    </div>",
    "meta": "func"
  },
  "make_cross": {
    "title": "make_cross(rune) \u2192 {Rune}",
    "description": "<div><h4>make_cross(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune by\narranging into a square for copies of the \ngiven Rune in different orientations\n</div>\n    </div>",
    "meta": "func"
  },
  "make_point": {
    "title": "make_point(x, y) \u2192 {Point}",
    "description": "<div><h4>make_point(x, y) &#8594; {Point}</h4><div class=\"description\">\n    makes a Point with given x and y coordinates\n</div>\n    </div>",
    "meta": "func"
  },
  "make_sound": {
    "title": "make_sound(wave, duration) \u2192 {Sound}",
    "description": "<div><h4>make_sound(wave, duration) &#8594; {Sound}</h4><div class=\"description\">\n    Makes a Sound from a wave and a duration.\nThe wave is a function from a non-negative time (in seconds)\nto an amplitude value that should lie between\n-1 and 1. The duration is given in seconds.\n</div>\n    </div>",
    "meta": "func"
  },
  "midi_note_to_frequency": {
    "title": "midi_note_to_frequency(n) \u2192 {Number}",
    "description": "<div><h4>midi_note_to_frequency(n) &#8594; {Number}</h4><div class=\"description\">\n    converts a midi note <code>n</code> to corresponding frequency.\nThe note is given as an integer Number.\n</div>\n    </div>",
    "meta": "func"
  },
  "noise_sound": {
    "title": "noise_sound(duration) \u2192 {Sound}",
    "description": "<div><h4>noise_sound(duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a Sound of a given duration by randomly\ngenerating amplitude values\n</div>\n    </div>",
    "meta": "func"
  },
  "orange": {
    "title": "orange(rune) \u2192 {Rune}",
    "description": "<div><h4>orange(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune orange.\n</div>\n    </div>",
    "meta": "func"
  },
  "overlay": {
    "title": "overlay(rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>overlay(rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a 3D-Rune from two given Runes by\noverlaying the first with the second, each\noccupying equal parts of the depth of the\nresult\n</div>\n    </div>",
    "meta": "func"
  },
  "overlay_frac": {
    "title": "overlay_frac(frac, rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>overlay_frac(frac, rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a 3D-Rune from two given Runes by\noverlaying the first with the second\nsuch that the first one occupies frac \nportion of the depth of the 3D result \nand the second the rest\n</div>\n    </div>",
    "meta": "func"
  },
  "param_gosper": {
    "title": "param_gosper(level, angle_at) \u2192 {Curve}",
    "description": "<div><h4>param_gosper(level, angle_at) &#8594; {Curve}</h4><div class=\"description\">\n    returns a Curve that results from gosperizing the unit line\nas often as given by the level parameter, each time\napplying an angle given by the given angle-producing function\n</div>\n    </div>",
    "meta": "func"
  },
  "param_gosperize": {
    "title": "param_gosperize(curve) \u2192 {Curve}",
    "description": "<div><h4>param_gosperize(curve) &#8594; {Curve}</h4><div class=\"description\">\n    this function takes an angle theta and returns a unary Curve operator:\nA function that takes a Curve as argument and returns\na new Curve, according to the Gosper operation, modified\nwith the given angle theta\n</div>\n    </div>",
    "meta": "func"
  },
  "piano": {
    "title": "piano(note, duration) \u2192 {Sound}",
    "description": "<div><h4>piano(note, duration) &#8594; {Sound}</h4><div class=\"description\">\n    returns a Sound that is reminiscent of a piano, playing\na given note for a given <code>duration</code> of seconds\n</div>\n    </div>",
    "meta": "func"
  },
  "pink": {
    "title": "pink(rune) \u2192 {Rune}",
    "description": "<div><h4>pink(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune pink.\n</div>\n    </div>",
    "meta": "func"
  },
  "play": {
    "title": "play(sound) \u2192 {Sound}",
    "description": "<div><h4>play(sound) &#8594; {Sound}</h4><div class=\"description\">\n    plays a given Sound using your computer's sound device\n</div>\n    </div>",
    "meta": "func"
  },
  "play_concurrently": {
    "title": "play_concurrently(sound) \u2192 {undefined}",
    "description": "<div><h4>play_concurrently(sound) &#8594; {undefined}</h4><div class=\"description\">\n    plays a given sound without regard if a sound is already playing\n</div>\n    </div>",
    "meta": "func"
  },
  "purple": {
    "title": "purple(rune) \u2192 {Rune}",
    "description": "<div><h4>purple(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune purple.\n</div>\n    </div>",
    "meta": "func"
  },
  "put_in_standard_position": {
    "title": "put_in_standard_position(curve) \u2192 {Curve}",
    "description": "<div><h4>put_in_standard_position(curve) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a unary Curve operator: It\ntakes a Curve as argument and returns\na new Curve, as follows.\nA Curve is in <em>standard position</em> if it starts at (0,0) ends at (1,0).\nThis function puts the given Curve in standard position by \nrigidly translating it so its\nstart Point is at the origin (0,0), then rotating it about the origin to put\nits endpoint on the x axis, then scaling it to put the endpoint at (1,0).\nBehavior is unspecified on closed Curves where start-point equal end-point.\n</div>\n    </div>",
    "meta": "func"
  },
  "quarter_turn_left": {
    "title": "quarter_turn_left(rune) \u2192 {Rune}",
    "description": "<div><h4>quarter_turn_left(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune\nby turning it a quarter-turn in\nanti-clockwise direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "quarter_turn_right": {
    "title": "quarter_turn_right(rune) \u2192 {Rune}",
    "description": "<div><h4>quarter_turn_right(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune\nby turning it a quarter-turn around the centre in\nclockwise direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "random_color": {
    "title": "random_color(rune) \u2192 {Rune}",
    "description": "<div><h4>random_color(rune) &#8594; {Rune}</h4><div class=\"description\">\n    Gives random color to the given rune.\nThe color is chosen randomly from the following nine \ncolors: red, pink, purple, indigo, blue, green, yellow, orange, brown\n</div>\n    </div>",
    "meta": "func"
  },
  "record": {
    "title": "record(buffer) \u2192 {function}",
    "description": "<div><h4>record(buffer) &#8594; {function}</h4><div class=\"description\">\n    takes a <code>buffer</code> duration (in seconds) as argument, and\nreturns a nullary stop function <code>stop</code>. A call\n<code>stop()</code> returns a sound promise: a nullary function\nthat returns a sound. Example: <pre><code>init_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</code></pre>\n</div>\n    </div>",
    "meta": "func"
  },
  "record_for": {
    "title": "record_for(duration, buffer) \u2192 {function}",
    "description": "<div><h4>record_for(duration, buffer) &#8594; {function}</h4><div class=\"description\">\n    Records a sound of given <code>duration</code> in seconds, after\na <code>buffer</code> also in seconds, and\nreturns a sound promise: a nullary function\nthat returns a sound. Example: <pre><code>init_record();\nconst promise = record_for(2, 0.5);\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</code></pre>\n</div>\n    </div>",
    "meta": "func"
  },
  "red": {
    "title": "red(rune) \u2192 {Rune}",
    "description": "<div><h4>red(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune red.\n</div>\n    </div>",
    "meta": "func"
  },
  "red_of": {
    "title": "red_of(Pixel) \u2192 {Number}",
    "description": "<div><h4>red_of(Pixel) &#8594; {Number}</h4><div class=\"description\">\n    Returns the red component of a given Pixel <code>px</code>\n</div>\n    </div>",
    "meta": "func"
  },
  "repeat_pattern": {
    "title": "repeat_pattern(n, f, initial) \u2192 {t}",
    "description": "<div><h4>repeat_pattern(n, f, initial) &#8594; {t}</h4><div class=\"description\">\n    applies a given function n times to an initial value\n</div>\n    </div>",
    "meta": "func"
  },
  "rotate": {
    "title": "rotate(rad, rune) \u2192 {Rune}",
    "description": "<div><h4>rotate(rad, rune) &#8594; {Rune}</h4><div class=\"description\">\n    rotates a given Rune by a given angle,\ngiven in radians, in anti-clockwise direction.\nNote that parts of the Rune\nmay be cropped as a result.\n</div>\n    </div>",
    "meta": "func"
  },
  "rotate_around_origin": {
    "title": "rotate_around_origin(theta) \u2192 {unary_Curve_operator}",
    "description": "<div><h4>rotate_around_origin(theta) &#8594; {unary_Curve_operator}</h4><div class=\"description\">\n    this function \ntakes an angle theta as parameter and returns a unary Curve operator:\na function that takes\na Curve a argument and returns\na new Curve, which is the original Curve rotated by the given angle\naround the origin, in counter-clockwise direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "rotate_pi_over_2": {
    "title": "rotate_pi_over_2(original) \u2192 {Curve}",
    "description": "<div><h4>rotate_pi_over_2(original) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a unary Curve operator: a function from a\nCurve to a Curve. The result Curve is the original Curve\nrotated by 90 degrees in counterclockwise direction around\nthe origin.\n</div>\n    </div>",
    "meta": "func"
  },
  "sawtooth_sound": {
    "title": "sawtooth_sound(freq, duration) \u2192 {Sound}",
    "description": "<div><h4>sawtooth_sound(freq, duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a sawtooth wave Sound with given frequency and a given duration\n</div>\n    </div>",
    "meta": "func"
  },
  "scale": {
    "title": "scale(s) \u2192 {unary_Curve_operator}",
    "description": "<div><h4>scale(s) &#8594; {unary_Curve_operator}</h4><div class=\"description\">\n    this function takes a scaling factor s argument and returns a\nunary Curve operator that\nscales a given Curve by s in x and y direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "scale_independent": {
    "title": "scale_independent(ratio_x, ratio_y, rune) \u2192 {Rune}",
    "description": "<div><h4>scale_independent(ratio_x, ratio_y, rune) &#8594; {Rune}</h4><div class=\"description\">\n    scales a given Rune by separate factors in x and y direction\n</div>\n    </div>",
    "meta": "func"
  },
  "scale_x_y": {
    "title": "scale_x_y(a, b) \u2192 {unary_Curve_operator}",
    "description": "<div><h4>scale_x_y(a, b) &#8594; {unary_Curve_operator}</h4><div class=\"description\">\n    this function takes scaling factors <code>a</code> and <code>b</code> as arguments \nand returns a unary Curve operator that\nscales a given Curve by <code>a</code> in x-direction and by <code>b</code> \nin y-direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "set_rgb": {
    "title": "set_rgb(Pixel, Number, Number, Number, Pixel) \u2192 {undefined}",
    "description": "<div><h4>set_rgb(Pixel, Number, Number, Number, Pixel) &#8594; {undefined}</h4><div class=\"description\">\n    Assigns the red, green and blue components of a pixel \n<code>px</code> to given values\n</div>\n    </div>",
    "meta": "func"
  },
  "show": {
    "title": "show(rune) \u2192 {Picture}",
    "description": "<div><h4>show(rune) &#8594; {Picture}</h4><div class=\"description\">\n    turns a given Rune into a two-dimensional Picture\n</div>\n    </div>",
    "meta": "func"
  },
  "show_connected_gosper": {
    "title": "show_connected_gosper(level) \u2192 {Drawing}",
    "description": "<div><h4>show_connected_gosper(level) &#8594; {Drawing}</h4><div class=\"description\">\n    shows a gosper Curve of given level, by drawing it\nwith suitable parameters\n</div>\n    </div>",
    "meta": "func"
  },
  "silence_sound": {
    "title": "silence_sound(duration) \u2192 {Sound}",
    "description": "<div><h4>silence_sound(duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a silence Sound with a given duration\n</div>\n    </div>",
    "meta": "func"
  },
  "simultaneously": {
    "title": "simultaneously(sounds) \u2192 {Sound}",
    "description": "<div><h4>simultaneously(sounds) &#8594; {Sound}</h4><div class=\"description\">\n    makes a new sound by combining the sounds in a given\nlist so that\nthey play simutaneously, all starting at the beginning of the \nresulting sound\n</div>\n    </div>",
    "meta": "func"
  },
  "sine_sound": {
    "title": "sine_sound(freq, duration) \u2192 {Sound}",
    "description": "<div><h4>sine_sound(freq, duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a sine wave Sound with given frequency and a given duration\n</div>\n    </div>",
    "meta": "func"
  },
  "square_sound": {
    "title": "square_sound(freq, duration) \u2192 {Sound}",
    "description": "<div><h4>square_sound(freq, duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a square wave Sound with given frequency and a given duration\n</div>\n    </div>",
    "meta": "func"
  },
  "stack": {
    "title": "stack(rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>stack(rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from two given Runes by\nplacing the first on top of the second, each\noccupying equal parts of the height of the \nresult\n</div>\n    </div>",
    "meta": "func"
  },
  "stack_frac": {
    "title": "stack_frac(frac, rune1, rune2) \u2192 {Rune}",
    "description": "<div><h4>stack_frac(frac, rune1, rune2) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from two given Runes by\nplacing the first on top of the second\nsuch that the first one occupies frac \nportion of the height of the result and \nthe second the rest\n</div>\n    </div>",
    "meta": "func"
  },
  "stacking_adsr": {
    "title": "stacking_adsr(waveform, base_frequency, duration, envelopes) \u2192 {Sound}",
    "description": "<div><h4>stacking_adsr(waveform, base_frequency, duration, envelopes) &#8594; {Sound}</h4><div class=\"description\">\n    Returns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form should be a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc.\n</div>\n    </div>",
    "meta": "func"
  },
  "stackn": {
    "title": "stackn(n, rune) \u2192 {Rune}",
    "description": "<div><h4>stackn(n, rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune\nby vertically stacking n copies of it\n</div>\n    </div>",
    "meta": "func"
  },
  "stop": {
    "title": "stop() \u2192 {undefined}",
    "description": "<div><h4>stop() &#8594; {undefined}</h4><div class=\"description\">\n    Stops playing the current sound\n</div>\n</div>",
    "meta": "func"
  },
  "translate": {
    "title": "translate(x0, y0) \u2192 {function}",
    "description": "<div><h4>translate(x0, y0) &#8594; {function}</h4><div class=\"description\">\n    this function returns a unary Curve operator: \nIt takes an x-value x0 and a y-value y0 as arguments and returns a\nunary Curve operator that\ntakes a Curve as argument and returns\na new Curve, by translating the original by x0 in x-direction\nand by y0 in y-direction.\n</div>\n    </div>",
    "meta": "func"
  },
  "triangle_sound": {
    "title": "triangle_sound(freq, duration) \u2192 {Sound}",
    "description": "<div><h4>triangle_sound(freq, duration) &#8594; {Sound}</h4><div class=\"description\">\n    makes a triangle wave Sound with given frequency and a given duration\n</div>\n    </div>",
    "meta": "func"
  },
  "trombone": {
    "title": "trombone(note, duration) \u2192 {Sound}",
    "description": "<div><h4>trombone(note, duration) &#8594; {Sound}</h4><div class=\"description\">\n    returns a Sound that is reminiscent of a trombone, playing\na given note for a given <code>duration</code> of seconds\n</div>\n    </div>",
    "meta": "func"
  },
  "turn_upside_down": {
    "title": "turn_upside_down(rune) \u2192 {Rune}",
    "description": "<div><h4>turn_upside_down(rune) &#8594; {Rune}</h4><div class=\"description\">\n    makes a new Rune from a given Rune\nby turning it upside-down\n</div>\n    </div>",
    "meta": "func"
  },
  "unit_circle": {
    "title": "unit_circle(t) \u2192 {Point}",
    "description": "<div><h4>unit_circle(t) &#8594; {Point}</h4><div class=\"description\">\n    this function is a curve: a function from a\nfraction t to a point. The points lie on the\nunit circle. They start at Point (1,0) when\nt is 0. When t is 0.25, they reach Point (0,1),\nwhen t is 0.5, they reach Point (-1, 0), etc.\n</div>\n    </div>",
    "meta": "func"
  },
  "unit_line": {
    "title": "unit_line(t) \u2192 {Point}",
    "description": "<div><h4>unit_line(t) &#8594; {Point}</h4><div class=\"description\">\n    this function is a curve: a function from a\nfraction t to a point. The x-coordinate at\nfranction t is t, and the y-coordinate is 0.\n</div>\n    </div>",
    "meta": "func"
  },
  "unit_line_at": {
    "title": "unit_line_at(t) \u2192 {Curve}",
    "description": "<div><h4>unit_line_at(t) &#8594; {Curve}</h4><div class=\"description\">\n    this function is a Curve generator: it takes\na number and returns a horizontal curve. The number\nis a y-coordinate, and the Curve generates\nonly points with the given y-coordinate.\n</div>\n    </div>",
    "meta": "func"
  },
  "violin": {
    "title": "violin(note, duration) \u2192 {Sound}",
    "description": "<div><h4>violin(note, duration) &#8594; {Sound}</h4><div class=\"description\">\n    returns a Sound that is reminiscent of a violin, playing\na given note for a given <code>duration</code> of seconds\n</div>\n    </div>",
    "meta": "func"
  },
  "white": {
    "title": "white(rune) \u2192 {Rune}",
    "description": "<div><h4>white(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune white.\n</div>\n    </div>",
    "meta": "func"
  },
  "x_of": {
    "title": "x_of(p) \u2192 {Number}",
    "description": "<div><h4>x_of(p) &#8594; {Number}</h4><div class=\"description\">\n    retrieves the x-coordinate a given Point\n</div>\n    </div>",
    "meta": "func"
  },
  "y_of": {
    "title": "y_of(p) \u2192 {Number}",
    "description": "<div><h4>y_of(p) &#8594; {Number}</h4><div class=\"description\">\n    retrieves the y-coordinate a given Point\n</div>\n    </div>",
    "meta": "func"
  },
  "yellow": {
    "title": "yellow(rune) \u2192 {Rune}",
    "description": "<div><h4>yellow(rune) &#8594; {Rune}</h4><div class=\"description\">\n    colors the given rune yellow.\n</div>\n    </div>",
    "meta": "func"
  }
}