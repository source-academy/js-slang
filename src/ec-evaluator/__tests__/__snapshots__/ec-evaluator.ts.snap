// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Imports are properly handled: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "import { foo } from 'one_module';
foo();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": "foo",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Simple tail call returns work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return false || f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in conditional expressions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : f(x-1, y+1);
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in nested mix of conditional expressions boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : false || x > 0 ? f(x-1, y+1) : 'unreachable';
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow block functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
};
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mixed tail-call/non-tail-call recursion work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y, z) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+f(0, z, 0), z);
  }
}
f(5000, 5000, 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 15000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion with arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : g(x-1, y+1);
const g = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return g(x-1, y+1);
  }
}
function g(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`const uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  if(true) {
      const x = false;
  } else {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`continue in while loops are working as intended: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let i = 0;
  let j = false;
  while (i <= 10){
    if (i === 10){
      j = true;
      i = i + 1;
      continue;
    }
    j = false;
    i = i + 1;
  }
  return j;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`for loop \`let\` variables are copied into the block scope: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let z = [];
  for (let x = 0; x < 10; x = x + 1) {
    z[x] = () => x;
  }
  return z[1]();
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`for loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  for (let x = 1; x > 0; x = x - 1) {
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`let uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  if(true) {
      let x = false;
  } else {
      let x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standalone block statements: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`streams and its pre-defined/pre-built functions are working as intended: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function make_alternating_stream(stream) {
  return pair(head(stream), () => make_alternating_stream(
                                    negate_whole_stream(
                                        stream_tail(stream))));
}

function negate_whole_stream(stream) {
    return pair(-head(stream), () => negate_whole_stream(stream_tail(stream)));
}

const ones = pair(1, () => ones);
list_ref(eval_stream(make_alternating_stream(enum_stream(1, 9)), 9), 8);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 9,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`streams can be created and functions with no return statements are still evaluated properly: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const s = stream(true, false, undefined, 1, x=>x, null, -123, head);
const result = [];
stream_for_each(item => {result[array_length(result)] = item;}, s);
stream_ref(s,4)(22) === 22 && stream_ref(s,7)(pair('', '1')) === '1' && result;",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`while loops use block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  while (true) {
    let x = false;
    break;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
