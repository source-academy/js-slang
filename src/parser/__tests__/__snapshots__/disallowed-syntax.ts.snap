// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cannot have if without else in chapter <= 2 - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
if (true) { 5; }",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing \\"else\\" in \\"if-else\\" statement.
This \\"if\\" block requires corresponding \\"else\\" block which will be
evaluated when true expression evaluates to false.

Later in the course we will lift this restriction and allow \\"if\\" without
else.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot have if without else in chapter <= 2: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) { 5; }",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing \\"else\\" in \\"if-else\\" statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot have incomplete statements - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
5",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 1: Missing semicolon at the end of statement
Every statement must be terminated by a semicolon.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot have incomplete statements: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "5",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing semicolon at the end of statement",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank expressions in for loop - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (;;) {
break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing init, test, update expressions in for statement.
This for statement requires all three parts (initialiser, test, update) to be present.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank expressions in for loop: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (;;) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing init, test, update expressions in for statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank init in for loop - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (; i < 3; i = i + 1) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing init expression in for statement.
This for statement requires all three parts (initialiser, test, update) to be present.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank init in for loop: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (; i < 3; i = i + 1) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing init expression in for statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank test in for loop - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (let i = 0; ; i = i + 1) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing test expression in for statement.
This for statement requires all three parts (initialiser, test, update) to be present.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank test in for loop: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i = 0; ; i = i + 1) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing test expression in for statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank update in for loop - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (let i = 0; i < 3;) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing update expression in for statement.
This for statement requires all three parts (initialiser, test, update) to be present.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave blank update in for loop: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i = 0; i < 3;) {
  break;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing update expression in for statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave while loop predicate blank - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
while () {
  x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 7: SyntaxError: Unexpected token (2:7)
There is a syntax error in your program
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot leave while loop predicate blank: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "while () {
  x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: SyntaxError: Unexpected token (1:7)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use destructuring declarations - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = [1, 2];
let [a, b] = x;
a;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 4: Array patterns are not allowed
You are trying to use Array patterns, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use destructuring declarations: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = [1, 2];
let [a, b] = x;
a;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Array patterns are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use function expressions - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
(function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); })(4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 1: Function expressions are not allowed
You are trying to use Function expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use function expressions - verbose: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
(function(x) { return x + 1; })(4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 1: Function expressions are not allowed
You are trying to use Function expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use function expressions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "(function fib(x) { return x <= 1 ? x : fib(x-1) + fib(x-2); })(4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Function expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use function expressions: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "(function(x) { return x + 1; })(4);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Function expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use multiple declarations - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = 3, y = 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Multiple declaration in a single statement.
Split the variable declaration into multiple lines as follows

	let x = 3;
	let y = 5;

",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use multiple declarations: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3, y = 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Multiple declaration in a single statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update expressions - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = 3;
x++;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 0: Update expressions are not allowed
You are trying to use Update expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update expressions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3;
x++;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Update expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update statements - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = 3;
x += 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 0: The assignment operator += is not allowed. Use = instead.

	x = x + 5;
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update statements - verbose: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = 3;
x <<= 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 0: The assignment operator <<= is not allowed. Use = instead.

",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update statements: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3;
x += 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: The assignment operator += is not allowed. Use = instead.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Cannot use update statements: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 3;
x <<= 5;
x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: The assignment operator <<= is not allowed. Use = instead.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No array expressions in chapter 2 - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
[];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Array expressions are not allowed
You are trying to use Array expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No array expressions in chapter 2: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "[];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Array expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No empty statements - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Empty statements are not allowed
You are trying to use Empty statements, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No empty statements: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": ";",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Empty statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No spread in array expressions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "[...[]];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Spread syntax is not allowed in arrays.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No trailing commas in arrays - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
[1,];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 2: Trailing comma
Please remove the trailing comma
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No trailing commas in arrays: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1,];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Trailing comma",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No trailing commas in objects: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "({
  a: 1,
  b: 2,
});",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3: Trailing comma",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`for needs braces - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (let i = 0; i < 1; i = i + 1)
  i;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Missing curly braces around \\"for\\" block.
Remember to enclose your \\"for\\" block with braces:

 	for (let i = 0; i < 1; i = i + 1) {
		//code goes here
	}
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`for needs braces: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i = 0; i < 1; i = i + 1)
  i;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing curly braces around \\"for\\" block.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`if needs braces - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
if (true)
  true;
else
  false;",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 2, Column 0: Missing curly braces around \\"if\\" block.
if block need to be enclosed with a pair of curly braces.

if (true) {
  true;
}

An exception is when you have an \\"if\\" followed by \\"else if\\", in this case
\\"else if\\" block does not need to be surrounded by curly braces.

if (someCondition) {
  // ...
} else /* notice missing { here */ if (someCondition) {
  // ...
} else {
  // ...
}

Rationale: Readability in dense packed code.

In the snippet below, for instance, with poor indentation it is easy to
mistaken hello() and world() to belong to the same branch of logic.

if (someCondition) {
  2;
} else
  hello();
world();

Line 2, Column 0: Missing curly braces around \\"else\\" block.
else block need to be enclosed with a pair of curly braces.

else {
  false;
}

An exception is when you have an \\"if\\" followed by \\"else if\\", in this case
\\"else if\\" block does not need to be surrounded by curly braces.

if (someCondition) {
  // ...
} else /* notice missing { here */ if (someCondition) {
  // ...
} else {
  // ...
}

Rationale: Readability in dense packed code.

In the snippet below, for instance, with poor indentation it is easy to
mistaken hello() and world() to belong to the same branch of logic.

if (someCondition) {
  2;
} else
  hello();
world();
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`if needs braces: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true)
  true;
else
  false;",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Missing curly braces around \\"if\\" block.
Line 1: Missing curly braces around \\"else\\" block.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no anonymous function declarations - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
export default function (x) {
  return x * x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 15: The 'function' keyword needs to be followed by a name.
Function declarations without a name are similar to function expressions, which are banned.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no anonymous function declarations: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "export default function (x) {
  return x * x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: The 'function' keyword needs to be followed by a name.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no assigning to reserved keywords - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
package = 5;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: SyntaxError: The keyword 'package' is reserved (2:0)
There is a syntax error in your program
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no assigning to reserved keywords - verbose: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
[1, , 3];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: No holes are allowed in array literals.
No holes (empty slots with no content inside) are allowed in array literals.
You probably have an extra comma, which creates a hole.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no assigning to reserved keywords: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "package = 5;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: SyntaxError: The keyword 'package' is reserved (1:0)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no classes - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
class Box {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 2, Column 10: Class bodys are not allowed
You are trying to use Class bodys, which is not allowed (yet).

Line 2, Column 0: Class declarations are not allowed
You are trying to use Class declarations, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no classes: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "class Box {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Class bodys are not allowed
Line 1: Class declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no declaration without assignment - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 4: Missing value in variable declaration.
A variable declaration assigns a value to a name.
For instance, to assign 20 to x, you can write:

  let x = 20;

  x + x; // 40
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no declaration without assignment: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Missing value in variable declaration.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no declaring reserved keywords - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let yield = 5;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 4: SyntaxError: The keyword 'yield' is reserved (2:4)
There is a syntax error in your program
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no declaring reserved keywords: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let yield = 5;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: SyntaxError: The keyword 'yield' is reserved (1:4)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no for in loops - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (let i in { a: 1, b: 2 }) {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 2, Column 9: Missing value in variable declaration.
A variable declaration assigns a value to a name.
For instance, to assign 20 to i, you can write:

  let i = 20;

  i + i; // 40

Line 2, Column 0: For in statements are not allowed
You are trying to use For in statements, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no for in loops: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i in { a: 1, b: 2 }) {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Missing value in variable declaration.
Line 1: For in statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no for of loops - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
for (let i of list()) {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 2, Column 9: Missing value in variable declaration.
A variable declaration assigns a value to a name.
For instance, to assign 20 to i, you can write:

  let i = 20;

  i + i; // 40

Line 2, Column 0: For of statements are not allowed
You are trying to use For of statements, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no for of loops: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for (let i of list()) {
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Missing value in variable declaration.
Line 1: For of statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no generator functions - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
function* gen() {
  yield 2;
  return 1;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 2: Yield expressions are not allowed
You are trying to use Yield expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no generator functions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function* gen() {
  yield 2;
  return 1;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Yield expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no holes in arrays: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "[1, , 3];",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: No holes are allowed in array literals.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no implicit undefined return - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
function f() {
  return;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 2: Missing value in return statement.
This return statement is missing a value.
For instance, to return the value 42, you can write

  return 42;
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no implicit undefined return: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
  return;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Missing value in return statement.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no interface - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
interface Box {
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: SyntaxError: The keyword 'interface' is reserved (2:0)
There is a syntax error in your program
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no interface: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "interface Box {
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: SyntaxError: The keyword 'interface' is reserved (1:0)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no namespace imports - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
import * as x from \\"module-name\\";",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 7: Namespace imports are not allowed
You are trying to use Namespace imports, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no namespace imports: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "import * as x from \\"module-name\\";",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Namespace imports are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no regexp - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
/pattern/",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 2, Column 9: Missing semicolon at the end of statement
Every statement must be terminated by a semicolon.

Line 2, Column 0: 'RegExp' literals are not allowed.

",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no regexp: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "/pattern/",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 1: Missing semicolon at the end of statement
Line 1: 'RegExp' literals are not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no repeated params - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
function f(x, x) {
  return x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 14: SyntaxError: Argument name clash (2:14)
There is a syntax error in your program
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no repeated params: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, x) {
  return x;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: SyntaxError: Argument name clash (1:14)",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no sequence expression - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
(1, 2);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 1: Sequence expressions are not allowed
You are trying to use Sequence expressions, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no sequence expression: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "(1, 2);",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Sequence expressions are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no super - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
class BoxError extends Error {
  constructor() {
    super(1);
  }
}",
  "displayResult": Array [],
  "numErrors": 5,
  "parsedErrors": "Line 4, Column 4: Supers are not allowed
You are trying to use Supers, which is not allowed (yet).

Line 3, Column 13: Function expressions are not allowed
You are trying to use Function expressions, which is not allowed (yet).

Line 3, Column 2: Method definitions are not allowed
You are trying to use Method definitions, which is not allowed (yet).

Line 2, Column 29: Class bodys are not allowed
You are trying to use Class bodys, which is not allowed (yet).

Line 2, Column 0: Class declarations are not allowed
You are trying to use Class declarations, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no super: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "class BoxError extends Error {
  constructor() {
    super(1);
  }
}",
  "displayResult": Array [],
  "numErrors": 5,
  "parsedErrors": "Line 3: Supers are not allowed
Line 2: Function expressions are not allowed
Line 2: Method definitions are not allowed
Line 1: Class bodys are not allowed
Line 1: Class declarations are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no template literals - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
'hi'",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 4: Missing semicolon at the end of statement
Every statement must be terminated by a semicolon.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no this, no new - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
function Box() {
  this[0] = 5;
}
const box = new Box();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 2: Expected string as prop, got number.
Expected string as prop, got number.
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no this, no new: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function Box() {
  this[0] = 5;
}
const box = new Box();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Expected string as prop, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no try statements - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
function f(x, y) {
  return x + y;
}
try {
  f([1, 2]);
} catch (e) {
  display(e);
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 7, Column 2: Catch clauses are not allowed
You are trying to use Catch clauses, which is not allowed (yet).

Line 5, Column 0: Try statements are not allowed
You are trying to use Try statements, which is not allowed (yet).
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no try statements: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x + y;
}
try {
  f([1, 2]);
} catch (e) {
  display(e);
}",
  "displayResult": Array [],
  "numErrors": 2,
  "parsedErrors": "Line 6: Catch clauses are not allowed
Line 4: Try statements are not allowed",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no unspecified operators - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
1 << 10;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Operator '<<' is not allowed.

",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no unspecified operators: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1 << 10;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Operator '<<' is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no unspecified unary operators - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let x = 5;
typeof x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 0: Operator 'typeof' is not allowed.

",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no unspecified unary operators: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 5;
typeof x;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Operator 'typeof' is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no var statements - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
var x = 1;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2, Column 0: Variable declaration using \\"var\\" is not allowed.
Use keyword \\"let\\" instead, to declare a variable:

	let x = 1;
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`no var statements: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "var x = 1;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Variable declaration using \\"var\\" is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`while needs braces - verbose: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "\\"enable verbose\\";
let i = 0;
while (i < 1)
  i = i + 1;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3, Column 0: Missing curly braces around \\"while\\" block.
Remember to enclose your \\"while\\" block with braces:

 	while (i < 1) {
		//code goes here
	}
",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`while needs braces: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let i = 0;
while (i < 1)
  i = i + 1;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 2: Missing curly braces around \\"while\\" block.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;
