// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Syntaxes are allowed in the chapter they are introduced 0 Test regular parser 1`] = `
Node {
  "body": Array [],
  "end": 0,
  "loc": SourceLocation {
    "end": Position {
      "column": 0,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 0 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    null,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "body": Node {
        "body": Array [
          Node {
            "declarations": Array [
              Node {
                "end": 41,
                "id": Node {
                  "end": 33,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 11,
                      "line": 2,
                    },
                    "start": Position {
                      "column": 8,
                      "line": 2,
                    },
                  },
                  "name": "sum",
                  "start": 30,
                  "type": "Identifier",
                },
                "init": Node {
                  "end": 41,
                  "left": Node {
                    "end": 37,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 15,
                        "line": 2,
                      },
                      "start": Position {
                        "column": 14,
                        "line": 2,
                      },
                    },
                    "name": "a",
                    "start": 36,
                    "type": "Identifier",
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 19,
                      "line": 2,
                    },
                    "start": Position {
                      "column": 14,
                      "line": 2,
                    },
                  },
                  "operator": "+",
                  "right": Node {
                    "end": 41,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 19,
                        "line": 2,
                      },
                      "start": Position {
                        "column": 18,
                        "line": 2,
                      },
                    },
                    "name": "b",
                    "start": 40,
                    "type": "Identifier",
                  },
                  "start": 36,
                  "type": "BinaryExpression",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 19,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 2,
                  },
                },
                "start": 30,
                "type": "VariableDeclarator",
              },
            ],
            "end": 42,
            "kind": "const",
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "start": 24,
            "type": "VariableDeclaration",
          },
          Node {
            "alternate": Node {
              "body": Array [
                Node {
                  "alternate": Node {
                    "alternate": Node {
                      "body": Array [
                        Node {
                          "argument": Node {
                            "alternate": Node {
                              "argument": Node {
                                "end": 213,
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 27,
                                    "line": 11,
                                  },
                                  "start": Position {
                                    "column": 26,
                                    "line": 11,
                                  },
                                },
                                "raw": "2",
                                "start": 212,
                                "type": "Literal",
                                "value": 2,
                              },
                              "end": 213,
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 27,
                                  "line": 11,
                                },
                                "start": Position {
                                  "column": 25,
                                  "line": 11,
                                },
                              },
                              "operator": "-",
                              "prefix": true,
                              "start": 211,
                              "type": "UnaryExpression",
                            },
                            "consequent": Node {
                              "end": 208,
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 22,
                                  "line": 11,
                                },
                                "start": Position {
                                  "column": 21,
                                  "line": 11,
                                },
                              },
                              "raw": "0",
                              "start": 207,
                              "type": "Literal",
                              "value": 0,
                            },
                            "end": 213,
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 27,
                                "line": 11,
                              },
                              "start": Position {
                                "column": 13,
                                "line": 11,
                              },
                            },
                            "start": 199,
                            "test": Node {
                              "end": 204,
                              "left": Node {
                                "end": 200,
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 14,
                                    "line": 11,
                                  },
                                  "start": Position {
                                    "column": 13,
                                    "line": 11,
                                  },
                                },
                                "name": "a",
                                "start": 199,
                                "type": "Identifier",
                              },
                              "loc": SourceLocation {
                                "end": Position {
                                  "column": 18,
                                  "line": 11,
                                },
                                "start": Position {
                                  "column": 13,
                                  "line": 11,
                                },
                              },
                              "operator": ">",
                              "right": Node {
                                "end": 204,
                                "loc": SourceLocation {
                                  "end": Position {
                                    "column": 18,
                                    "line": 11,
                                  },
                                  "start": Position {
                                    "column": 17,
                                    "line": 11,
                                  },
                                },
                                "name": "b",
                                "start": 203,
                                "type": "Identifier",
                              },
                              "start": 199,
                              "type": "BinaryExpression",
                            },
                            "type": "ConditionalExpression",
                          },
                          "end": 214,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 28,
                              "line": 11,
                            },
                            "start": Position {
                              "column": 6,
                              "line": 11,
                            },
                          },
                          "start": 192,
                          "type": "ReturnStatement",
                        },
                      ],
                      "end": 220,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 12,
                        },
                        "start": Position {
                          "column": 11,
                          "line": 10,
                        },
                      },
                      "start": 184,
                      "type": "BlockStatement",
                    },
                    "consequent": Node {
                      "body": Array [
                        Node {
                          "argument": Node {
                            "end": 171,
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 14,
                                "line": 9,
                              },
                              "start": Position {
                                "column": 13,
                                "line": 9,
                              },
                            },
                            "raw": "1",
                            "start": 170,
                            "type": "Literal",
                            "value": 1,
                          },
                          "end": 172,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 15,
                              "line": 9,
                            },
                            "start": Position {
                              "column": 6,
                              "line": 9,
                            },
                          },
                          "start": 163,
                          "type": "ReturnStatement",
                        },
                      ],
                      "end": 178,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 10,
                        },
                        "start": Position {
                          "column": 28,
                          "line": 8,
                        },
                      },
                      "start": 155,
                      "type": "BlockStatement",
                    },
                    "end": 220,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 5,
                        "line": 12,
                      },
                      "start": Position {
                        "column": 11,
                        "line": 8,
                      },
                    },
                    "start": 138,
                    "test": Node {
                      "end": 153,
                      "left": Node {
                        "end": 147,
                        "left": Node {
                          "end": 143,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 16,
                              "line": 8,
                            },
                            "start": Position {
                              "column": 15,
                              "line": 8,
                            },
                          },
                          "name": "b",
                          "start": 142,
                          "type": "Identifier",
                        },
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 20,
                            "line": 8,
                          },
                          "start": Position {
                            "column": 15,
                            "line": 8,
                          },
                        },
                        "operator": "%",
                        "right": Node {
                          "end": 147,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 20,
                              "line": 8,
                            },
                            "start": Position {
                              "column": 19,
                              "line": 8,
                            },
                          },
                          "raw": "2",
                          "start": 146,
                          "type": "Literal",
                          "value": 2,
                        },
                        "start": 142,
                        "type": "BinaryExpression",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 26,
                          "line": 8,
                        },
                        "start": Position {
                          "column": 15,
                          "line": 8,
                        },
                      },
                      "operator": "===",
                      "right": Node {
                        "end": 153,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 26,
                            "line": 8,
                          },
                          "start": Position {
                            "column": 25,
                            "line": 8,
                          },
                        },
                        "raw": "0",
                        "start": 152,
                        "type": "Literal",
                        "value": 0,
                      },
                      "start": 142,
                      "type": "BinaryExpression",
                    },
                    "type": "IfStatement",
                  },
                  "consequent": Node {
                    "body": Array [
                      Node {
                        "argument": Node {
                          "argument": Node {
                            "end": 125,
                            "loc": SourceLocation {
                              "end": Position {
                                "column": 15,
                                "line": 7,
                              },
                              "start": Position {
                                "column": 14,
                                "line": 7,
                              },
                            },
                            "raw": "1",
                            "start": 124,
                            "type": "Literal",
                            "value": 1,
                          },
                          "end": 125,
                          "loc": SourceLocation {
                            "end": Position {
                              "column": 15,
                              "line": 7,
                            },
                            "start": Position {
                              "column": 13,
                              "line": 7,
                            },
                          },
                          "operator": "-",
                          "prefix": true,
                          "start": 123,
                          "type": "UnaryExpression",
                        },
                        "end": 126,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 16,
                            "line": 7,
                          },
                          "start": Position {
                            "column": 6,
                            "line": 7,
                          },
                        },
                        "start": 116,
                        "type": "ReturnStatement",
                      },
                    ],
                    "end": 132,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 5,
                        "line": 8,
                      },
                      "start": Position {
                        "column": 21,
                        "line": 6,
                      },
                    },
                    "start": 108,
                    "type": "BlockStatement",
                  },
                  "end": 220,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 5,
                      "line": 12,
                    },
                    "start": Position {
                      "column": 4,
                      "line": 6,
                    },
                  },
                  "start": 91,
                  "test": Node {
                    "end": 106,
                    "left": Node {
                      "end": 100,
                      "left": Node {
                        "end": 96,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 9,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 6,
                          },
                        },
                        "name": "a",
                        "start": 95,
                        "type": "Identifier",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 6,
                        },
                      },
                      "operator": "%",
                      "right": Node {
                        "end": 100,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 13,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 12,
                            "line": 6,
                          },
                        },
                        "raw": "2",
                        "start": 99,
                        "type": "Literal",
                        "value": 2,
                      },
                      "start": 95,
                      "type": "BinaryExpression",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 19,
                        "line": 6,
                      },
                      "start": Position {
                        "column": 8,
                        "line": 6,
                      },
                    },
                    "operator": "===",
                    "right": Node {
                      "end": 106,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 19,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 18,
                          "line": 6,
                        },
                      },
                      "raw": "0",
                      "start": 105,
                      "type": "Literal",
                      "value": 0,
                    },
                    "start": 95,
                    "type": "BinaryExpression",
                  },
                  "type": "IfStatement",
                },
              ],
              "end": 224,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 13,
                },
                "start": Position {
                  "column": 9,
                  "line": 5,
                },
              },
              "start": 85,
              "type": "BlockStatement",
            },
            "consequent": Node {
              "body": Array [
                Node {
                  "argument": Node {
                    "end": 74,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 14,
                        "line": 4,
                      },
                      "start": Position {
                        "column": 11,
                        "line": 4,
                      },
                    },
                    "name": "sum",
                    "start": 71,
                    "type": "Identifier",
                  },
                  "end": 75,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 15,
                      "line": 4,
                    },
                    "start": Position {
                      "column": 4,
                      "line": 4,
                    },
                  },
                  "start": 64,
                  "type": "ReturnStatement",
                },
              ],
              "end": 79,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 5,
                },
                "start": Position {
                  "column": 15,
                  "line": 3,
                },
              },
              "start": 58,
              "type": "BlockStatement",
            },
            "end": 224,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 13,
              },
              "start": Position {
                "column": 2,
                "line": 3,
              },
            },
            "start": 45,
            "test": Node {
              "end": 56,
              "left": Node {
                "end": 52,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "name": "sum",
                "start": 49,
                "type": "Identifier",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 3,
                },
                "start": Position {
                  "column": 6,
                  "line": 3,
                },
              },
              "operator": ">",
              "right": Node {
                "end": 56,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 12,
                    "line": 3,
                  },
                },
                "raw": "1",
                "start": 55,
                "type": "Literal",
                "value": 1,
              },
              "start": 49,
              "type": "BinaryExpression",
            },
            "type": "IfStatement",
          },
        ],
        "end": 226,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 14,
          },
          "start": Position {
            "column": 20,
            "line": 1,
          },
        },
        "start": 20,
        "type": "BlockStatement",
      },
      "end": 226,
      "expression": false,
      "generator": false,
      "id": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "name": "name",
        "start": 9,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 14,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "params": Array [
        Node {
          "end": 15,
          "loc": SourceLocation {
            "end": Position {
              "column": 15,
              "line": 1,
            },
            "start": Position {
              "column": 14,
              "line": 1,
            },
          },
          "name": "a",
          "start": 14,
          "type": "Identifier",
        },
        Node {
          "end": 18,
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 1,
            },
            "start": Position {
              "column": 17,
              "line": 1,
            },
          },
          "name": "b",
          "start": 17,
          "type": "Identifier",
        },
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
    Node {
      "end": 238,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 233,
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 15,
              },
              "start": Position {
                "column": 5,
                "line": 15,
              },
            },
            "raw": "1",
            "start": 232,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 236,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 15,
              },
              "start": Position {
                "column": 8,
                "line": 15,
              },
            },
            "raw": "2",
            "start": 235,
            "type": "Literal",
            "value": 2,
          },
        ],
        "callee": Node {
          "end": 231,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 15,
            },
            "start": Position {
              "column": 0,
              "line": 15,
            },
          },
          "name": "name",
          "start": 227,
          "type": "Identifier",
        },
        "end": 237,
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 15,
          },
          "start": Position {
            "column": 0,
            "line": 15,
          },
        },
        "start": 227,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 15,
        },
        "start": Position {
          "column": 0,
          "line": 15,
        },
      },
      "start": 227,
      "type": "ExpressionStatement",
    },
  ],
  "end": 238,
  "loc": SourceLocation {
    "end": Position {
      "column": 11,
      "line": 15,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 1 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "function_declaration",
        Array [
          Array [
            "name",
            Array [
              "name",
              null,
            ],
          ],
          Array [
            Array [
              Array [
                "name",
                Array [
                  "a",
                  null,
                ],
              ],
              Array [
                Array [
                  "name",
                  Array [
                    "b",
                    null,
                  ],
                ],
                null,
              ],
            ],
            Array [
              Array [
                "block",
                Array [
                  Array [
                    "sequence",
                    Array [
                      Array [
                        Array [
                          "constant_declaration",
                          Array [
                            Array [
                              "name",
                              Array [
                                "sum",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "binary_operator_combination",
                                Array [
                                  "+",
                                  Array [
                                    Array [
                                      "name",
                                      Array [
                                        "a",
                                        null,
                                      ],
                                    ],
                                    Array [
                                      Array [
                                        "name",
                                        Array [
                                          "b",
                                          null,
                                        ],
                                      ],
                                      null,
                                    ],
                                  ],
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                        Array [
                          Array [
                            "conditional_statement",
                            Array [
                              Array [
                                "binary_operator_combination",
                                Array [
                                  ">",
                                  Array [
                                    Array [
                                      "name",
                                      Array [
                                        "sum",
                                        null,
                                      ],
                                    ],
                                    Array [
                                      Array [
                                        "literal",
                                        Array [
                                          1,
                                          null,
                                        ],
                                      ],
                                      null,
                                    ],
                                  ],
                                ],
                              ],
                              Array [
                                Array [
                                  "return_statement",
                                  Array [
                                    Array [
                                      "name",
                                      Array [
                                        "sum",
                                        null,
                                      ],
                                    ],
                                    null,
                                  ],
                                ],
                                Array [
                                  Array [
                                    "conditional_statement",
                                    Array [
                                      Array [
                                        "binary_operator_combination",
                                        Array [
                                          "===",
                                          Array [
                                            Array [
                                              "binary_operator_combination",
                                              Array [
                                                "%",
                                                Array [
                                                  Array [
                                                    "name",
                                                    Array [
                                                      "a",
                                                      null,
                                                    ],
                                                  ],
                                                  Array [
                                                    Array [
                                                      "literal",
                                                      Array [
                                                        2,
                                                        null,
                                                      ],
                                                    ],
                                                    null,
                                                  ],
                                                ],
                                              ],
                                            ],
                                            Array [
                                              Array [
                                                "literal",
                                                Array [
                                                  0,
                                                  null,
                                                ],
                                              ],
                                              null,
                                            ],
                                          ],
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "return_statement",
                                          Array [
                                            Array [
                                              "unary_operator_combination",
                                              Array [
                                                "-unary",
                                                Array [
                                                  Array [
                                                    "literal",
                                                    Array [
                                                      1,
                                                      null,
                                                    ],
                                                  ],
                                                  null,
                                                ],
                                              ],
                                            ],
                                            null,
                                          ],
                                        ],
                                        Array [
                                          Array [
                                            "conditional_statement",
                                            Array [
                                              Array [
                                                "binary_operator_combination",
                                                Array [
                                                  "===",
                                                  Array [
                                                    Array [
                                                      "binary_operator_combination",
                                                      Array [
                                                        "%",
                                                        Array [
                                                          Array [
                                                            "name",
                                                            Array [
                                                              "b",
                                                              null,
                                                            ],
                                                          ],
                                                          Array [
                                                            Array [
                                                              "literal",
                                                              Array [
                                                                2,
                                                                null,
                                                              ],
                                                            ],
                                                            null,
                                                          ],
                                                        ],
                                                      ],
                                                    ],
                                                    Array [
                                                      Array [
                                                        "literal",
                                                        Array [
                                                          0,
                                                          null,
                                                        ],
                                                      ],
                                                      null,
                                                    ],
                                                  ],
                                                ],
                                              ],
                                              Array [
                                                Array [
                                                  "return_statement",
                                                  Array [
                                                    Array [
                                                      "literal",
                                                      Array [
                                                        1,
                                                        null,
                                                      ],
                                                    ],
                                                    null,
                                                  ],
                                                ],
                                                Array [
                                                  Array [
                                                    "return_statement",
                                                    Array [
                                                      Array [
                                                        "conditional_expression",
                                                        Array [
                                                          Array [
                                                            "binary_operator_combination",
                                                            Array [
                                                              ">",
                                                              Array [
                                                                Array [
                                                                  "name",
                                                                  Array [
                                                                    "a",
                                                                    null,
                                                                  ],
                                                                ],
                                                                Array [
                                                                  Array [
                                                                    "name",
                                                                    Array [
                                                                      "b",
                                                                      null,
                                                                    ],
                                                                  ],
                                                                  null,
                                                                ],
                                                              ],
                                                            ],
                                                          ],
                                                          Array [
                                                            Array [
                                                              "literal",
                                                              Array [
                                                                0,
                                                                null,
                                                              ],
                                                            ],
                                                            Array [
                                                              Array [
                                                                "unary_operator_combination",
                                                                Array [
                                                                  "-unary",
                                                                  Array [
                                                                    Array [
                                                                      "literal",
                                                                      Array [
                                                                        2,
                                                                        null,
                                                                      ],
                                                                    ],
                                                                    null,
                                                                  ],
                                                                ],
                                                              ],
                                                              null,
                                                            ],
                                                          ],
                                                        ],
                                                      ],
                                                      null,
                                                    ],
                                                  ],
                                                  null,
                                                ],
                                              ],
                                            ],
                                          ],
                                          null,
                                        ],
                                      ],
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                            ],
                          ],
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
      ],
      Array [
        Array [
          "application",
          Array [
            Array [
              "name",
              Array [
                "name",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 15,
      "expression": Node {
        "arguments": Array [],
        "callee": Node {
          "body": Node {
            "end": 11,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "raw": "true",
            "start": 7,
            "type": "Literal",
            "value": true,
          },
          "end": 11,
          "expression": true,
          "generator": false,
          "id": null,
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "params": Array [],
          "start": 1,
          "type": "ArrowFunctionExpression",
        },
        "end": 14,
        "loc": SourceLocation {
          "end": Position {
            "column": 14,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "loc": SourceLocation {
    "end": Position {
      "column": 15,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 2 Test stdlib parser 1`] = `
Array [
  "application",
  Array [
    Array [
      "lambda_expression",
      Array [
        null,
        Array [
          Array [
            "return_statement",
            Array [
              Array [
                "literal",
                Array [
                  true,
                  null,
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    Array [
      null,
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 36,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 31,
            "loc": SourceLocation {
              "end": Position {
                "column": 31,
                "line": 1,
              },
              "start": Position {
                "column": 30,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 30,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 34,
            "loc": SourceLocation {
              "end": Position {
                "column": 34,
                "line": 1,
              },
              "start": Position {
                "column": 33,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 33,
            "type": "Literal",
            "value": 2,
          },
        ],
        "callee": Node {
          "body": Node {
            "body": Array [
              Node {
                "argument": Node {
                  "end": 25,
                  "left": Node {
                    "end": 21,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 21,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 20,
                        "line": 1,
                      },
                    },
                    "name": "x",
                    "start": 20,
                    "type": "Identifier",
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 25,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 20,
                      "line": 1,
                    },
                  },
                  "operator": "+",
                  "right": Node {
                    "end": 25,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 25,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 24,
                        "line": 1,
                      },
                    },
                    "name": "y",
                    "start": 24,
                    "type": "Identifier",
                  },
                  "start": 20,
                  "type": "BinaryExpression",
                },
                "end": 26,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 26,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 1,
                  },
                },
                "start": 13,
                "type": "ReturnStatement",
              },
            ],
            "end": 28,
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 1,
              },
              "start": Position {
                "column": 11,
                "line": 1,
              },
            },
            "start": 11,
            "type": "BlockStatement",
          },
          "end": 28,
          "expression": false,
          "generator": false,
          "id": null,
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "params": Array [
            Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "name": "x",
              "start": 2,
              "type": "Identifier",
            },
            Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "name": "y",
              "start": 5,
              "type": "Identifier",
            },
          ],
          "start": 1,
          "type": "ArrowFunctionExpression",
        },
        "end": 35,
        "loc": SourceLocation {
          "end": Position {
            "column": 35,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 36,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 36,
  "loc": SourceLocation {
    "end": Position {
      "column": 36,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 3 Test stdlib parser 1`] = `
Array [
  "application",
  Array [
    Array [
      "lambda_expression",
      Array [
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "name",
              Array [
                "y",
                null,
              ],
            ],
            null,
          ],
        ],
        Array [
          Array [
            "return_statement",
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  "+",
                  Array [
                    Array [
                      "name",
                      Array [
                        "x",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "name",
                        Array [
                          "y",
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    Array [
      Array [
        Array [
          "literal",
          Array [
            1,
            null,
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              2,
              null,
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 5,
      "expression": Node {
        "end": 4,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "raw": "true",
        "start": 0,
        "type": "Literal",
        "value": true,
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 5,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 4 Test stdlib parser 1`] = `
Array [
  "literal",
  Array [
    true,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 6,
      "expression": Node {
        "end": 5,
        "loc": SourceLocation {
          "end": Position {
            "column": 5,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "raw": "false",
        "start": 0,
        "type": "Literal",
        "value": false,
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 6,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "loc": SourceLocation {
    "end": Position {
      "column": 6,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 5 Test stdlib parser 1`] = `
Array [
  "literal",
  Array [
    false,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "directive": "a string \\"\\" \\\\'\\\\'",
      "end": 19,
      "expression": Node {
        "end": 18,
        "loc": SourceLocation {
          "end": Position {
            "column": 18,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "raw": "'a string \\"\\" \\\\'\\\\''",
        "start": 0,
        "type": "Literal",
        "value": "a string \\"\\" ''",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 19,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "loc": SourceLocation {
    "end": Position {
      "column": 19,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 6 Test stdlib parser 1`] = `
Array [
  "literal",
  Array [
    "a string \\"\\" ''",
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 33,
      "expression": Node {
        "end": 32,
        "left": Node {
          "end": 4,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "raw": "31.4",
          "start": 0,
          "type": "Literal",
          "value": 31.4,
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 32,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "+",
        "right": Node {
          "end": 32,
          "left": Node {
            "end": 26,
            "left": Node {
              "end": 22,
              "left": Node {
                "argument": Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "raw": "3.14e10",
                  "start": 9,
                  "type": "Literal",
                  "value": 31400000000,
                },
                "end": 16,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "operator": "-",
                "prefix": true,
                "start": 8,
                "type": "UnaryExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 22,
                  "line": 1,
                },
                "start": Position {
                  "column": 7,
                  "line": 1,
                },
              },
              "operator": "*",
              "right": Node {
                "argument": Node {
                  "end": 22,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 22,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 21,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 21,
                  "type": "Literal",
                  "value": 1,
                },
                "end": 22,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 22,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 20,
                    "line": 1,
                  },
                },
                "operator": "-",
                "prefix": true,
                "start": 20,
                "type": "UnaryExpression",
              },
              "start": 7,
              "type": "BinaryExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 26,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "operator": "%",
            "right": Node {
              "end": 26,
              "loc": SourceLocation {
                "end": Position {
                  "column": 26,
                  "line": 1,
                },
                "start": Position {
                  "column": 25,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 25,
              "type": "Literal",
              "value": 2,
            },
            "start": 7,
            "type": "BinaryExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 32,
              "line": 1,
            },
            "start": Position {
              "column": 7,
              "line": 1,
            },
          },
          "operator": "/",
          "right": Node {
            "end": 32,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 1,
              },
              "start": Position {
                "column": 29,
                "line": 1,
              },
            },
            "raw": "1.5",
            "start": 29,
            "type": "Literal",
            "value": 1.5,
          },
          "start": 7,
          "type": "BinaryExpression",
        },
        "start": 0,
        "type": "BinaryExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 33,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 33,
  "loc": SourceLocation {
    "end": Position {
      "column": 33,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 7 Test stdlib parser 1`] = `
Array [
  "binary_operator_combination",
  Array [
    "+",
    Array [
      Array [
        "literal",
        Array [
          31.4,
          null,
        ],
      ],
      Array [
        Array [
          "binary_operator_combination",
          Array [
            "/",
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  "%",
                  Array [
                    Array [
                      "binary_operator_combination",
                      Array [
                        "*",
                        Array [
                          Array [
                            "unary_operator_combination",
                            Array [
                              "-unary",
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    31400000000,
                                    null,
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                          Array [
                            Array [
                              "unary_operator_combination",
                              Array [
                                "-unary",
                                Array [
                                  Array [
                                    "literal",
                                    Array [
                                      1,
                                      null,
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          2,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1.5,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
        ],
        null,
      ],
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 55,
      "expression": Node {
        "end": 54,
        "left": Node {
          "end": 45,
          "left": Node {
            "end": 36,
            "left": Node {
              "end": 26,
              "left": Node {
                "end": 16,
                "left": Node {
                  "end": 7,
                  "left": Node {
                    "end": 1,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 1,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 0,
                        "line": 1,
                      },
                    },
                    "raw": "1",
                    "start": 0,
                    "type": "Literal",
                    "value": 1,
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 7,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 0,
                      "line": 1,
                    },
                  },
                  "operator": "===",
                  "right": Node {
                    "end": 7,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 7,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 6,
                        "line": 1,
                      },
                    },
                    "raw": "1",
                    "start": 6,
                    "type": "Literal",
                    "value": 1,
                  },
                  "start": 0,
                  "type": "BinaryExpression",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 0,
                    "line": 1,
                  },
                },
                "operator": "&&",
                "right": Node {
                  "end": 16,
                  "left": Node {
                    "end": 12,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 12,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 11,
                        "line": 1,
                      },
                    },
                    "raw": "1",
                    "start": 11,
                    "type": "Literal",
                    "value": 1,
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 11,
                      "line": 1,
                    },
                  },
                  "operator": "<",
                  "right": Node {
                    "end": 16,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 16,
                        "line": 1,
                      },
                      "start": Position {
                        "column": 15,
                        "line": 1,
                      },
                    },
                    "raw": "2",
                    "start": 15,
                    "type": "Literal",
                    "value": 2,
                  },
                  "start": 11,
                  "type": "BinaryExpression",
                },
                "start": 0,
                "type": "LogicalExpression",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 26,
                  "line": 1,
                },
                "start": Position {
                  "column": 0,
                  "line": 1,
                },
              },
              "operator": "&&",
              "right": Node {
                "end": 26,
                "left": Node {
                  "end": 21,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 21,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 20,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 20,
                  "type": "Literal",
                  "value": 1,
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 26,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 20,
                    "line": 1,
                  },
                },
                "operator": "<=",
                "right": Node {
                  "end": 26,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 26,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 25,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 25,
                  "type": "Literal",
                  "value": 2,
                },
                "start": 20,
                "type": "BinaryExpression",
              },
              "start": 0,
              "type": "LogicalExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 36,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "operator": "&&",
            "right": Node {
              "end": 36,
              "left": Node {
                "end": 31,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 31,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 30,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 30,
                "type": "Literal",
                "value": 2,
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 36,
                  "line": 1,
                },
                "start": Position {
                  "column": 30,
                  "line": 1,
                },
              },
              "operator": ">=",
              "right": Node {
                "end": 36,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 36,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 35,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 35,
                "type": "Literal",
                "value": 1,
              },
              "start": 30,
              "type": "BinaryExpression",
            },
            "start": 0,
            "type": "LogicalExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 45,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "operator": "&&",
          "right": Node {
            "end": 45,
            "left": Node {
              "end": 41,
              "loc": SourceLocation {
                "end": Position {
                  "column": 41,
                  "line": 1,
                },
                "start": Position {
                  "column": 40,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 40,
              "type": "Literal",
              "value": 2,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 45,
                "line": 1,
              },
              "start": Position {
                "column": 40,
                "line": 1,
              },
            },
            "operator": ">",
            "right": Node {
              "end": 45,
              "loc": SourceLocation {
                "end": Position {
                  "column": 45,
                  "line": 1,
                },
                "start": Position {
                  "column": 44,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 44,
              "type": "Literal",
              "value": 1,
            },
            "start": 40,
            "type": "BinaryExpression",
          },
          "start": 0,
          "type": "LogicalExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 54,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "operator": "||",
        "right": Node {
          "end": 54,
          "loc": SourceLocation {
            "end": Position {
              "column": 54,
              "line": 1,
            },
            "start": Position {
              "column": 49,
              "line": 1,
            },
          },
          "raw": "false",
          "start": 49,
          "type": "Literal",
          "value": false,
        },
        "start": 0,
        "type": "LogicalExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 55,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 55,
  "loc": SourceLocation {
    "end": Position {
      "column": 55,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 8 Test stdlib parser 1`] = `
Array [
  "logical_composition",
  Array [
    "||",
    Array [
      Array [
        "logical_composition",
        Array [
          "&&",
          Array [
            Array [
              "logical_composition",
              Array [
                "&&",
                Array [
                  Array [
                    "logical_composition",
                    Array [
                      "&&",
                      Array [
                        Array [
                          "logical_composition",
                          Array [
                            "&&",
                            Array [
                              Array [
                                "binary_operator_combination",
                                Array [
                                  "===",
                                  Array [
                                    Array [
                                      "literal",
                                      Array [
                                        1,
                                        null,
                                      ],
                                    ],
                                    Array [
                                      Array [
                                        "literal",
                                        Array [
                                          1,
                                          null,
                                        ],
                                      ],
                                      null,
                                    ],
                                  ],
                                ],
                              ],
                              Array [
                                Array [
                                  "binary_operator_combination",
                                  Array [
                                    "<",
                                    Array [
                                      Array [
                                        "literal",
                                        Array [
                                          1,
                                          null,
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "literal",
                                          Array [
                                            2,
                                            null,
                                          ],
                                        ],
                                        null,
                                      ],
                                    ],
                                  ],
                                ],
                                null,
                              ],
                            ],
                          ],
                        ],
                        Array [
                          Array [
                            "binary_operator_combination",
                            Array [
                              "<=",
                              Array [
                                Array [
                                  "literal",
                                  Array [
                                    1,
                                    null,
                                  ],
                                ],
                                Array [
                                  Array [
                                    "literal",
                                    Array [
                                      2,
                                      null,
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "binary_operator_combination",
                      Array [
                        ">=",
                        Array [
                          Array [
                            "literal",
                            Array [
                              2,
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                1,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  ">",
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          1,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              null,
            ],
          ],
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            false,
            null,
          ],
        ],
        null,
      ],
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 13,
      "expression": Node {
        "alternate": Node {
          "end": 12,
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 1,
            },
            "start": Position {
              "column": 11,
              "line": 1,
            },
          },
          "raw": "2",
          "start": 11,
          "type": "Literal",
          "value": 2,
        },
        "consequent": Node {
          "end": 8,
          "loc": SourceLocation {
            "end": Position {
              "column": 8,
              "line": 1,
            },
            "start": Position {
              "column": 7,
              "line": 1,
            },
          },
          "raw": "1",
          "start": 7,
          "type": "Literal",
          "value": 1,
        },
        "end": 12,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "test": Node {
          "end": 4,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "raw": "true",
          "start": 0,
          "type": "Literal",
          "value": true,
        },
        "type": "ConditionalExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 13,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "loc": SourceLocation {
    "end": Position {
      "column": 13,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 9 Test stdlib parser 1`] = `
Array [
  "conditional_expression",
  Array [
    Array [
      "literal",
      Array [
        true,
        null,
      ],
    ],
    Array [
      Array [
        "literal",
        Array [
          1,
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            2,
            null,
          ],
        ],
        null,
      ],
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10 Test 1 chapter below 1`] = `"Line 1: null literals are not allowed."`;

exports[`Syntaxes are allowed in the chapter they are introduced 10 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 5,
      "expression": Node {
        "end": 4,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "raw": "null",
        "start": 0,
        "type": "Literal",
        "value": null,
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 5,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 10 Test stdlib parser 1`] = `
Array [
  "literal",
  Array [
    null,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11 Test 1 chapter below 1`] = `"Line 1: null literals are not allowed."`;

exports[`Syntaxes are allowed in the chapter they are introduced 11 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 14,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 6,
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 5,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 5,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 12,
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "raw": "null",
            "start": 8,
            "type": "Literal",
            "value": null,
          },
        ],
        "callee": Node {
          "end": 4,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "name": "pair",
          "start": 0,
          "type": "Identifier",
        },
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 14,
  "loc": SourceLocation {
    "end": Position {
      "column": 14,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 11 Test stdlib parser 1`] = `
Array [
  "application",
  Array [
    Array [
      "name",
      Array [
        "pair",
        null,
      ],
    ],
    Array [
      Array [
        Array [
          "literal",
          Array [
            1,
            null,
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              null,
              null,
            ],
          ],
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12 Test 1 chapter below 1`] = `"Line 1: Export named declarations are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 12 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declaration": Node {
        "body": Node {
          "body": Array [
            Node {
              "argument": Node {
                "end": 33,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 2,
                  },
                },
                "name": "x",
                "start": 32,
                "type": "Identifier",
              },
              "end": 34,
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 2,
                },
                "start": Position {
                  "column": 2,
                  "line": 2,
                },
              },
              "start": 25,
              "type": "ReturnStatement",
            },
          ],
          "end": 36,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 3,
            },
            "start": Position {
              "column": 21,
              "line": 1,
            },
          },
          "start": 21,
          "type": "BlockStatement",
        },
        "end": 36,
        "expression": false,
        "generator": false,
        "id": Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 16,
              "line": 1,
            },
          },
          "name": "f",
          "start": 16,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 7,
            "line": 1,
          },
        },
        "params": Array [
          Node {
            "end": 19,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 1,
              },
              "start": Position {
                "column": 18,
                "line": 1,
              },
            },
            "name": "x",
            "start": 18,
            "type": "Identifier",
          },
        ],
        "start": 7,
        "type": "FunctionDeclaration",
      },
      "end": 36,
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "source": null,
      "specifiers": Array [],
      "start": 0,
      "type": "ExportNamedDeclaration",
    },
    Node {
      "end": 42,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 40,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 4,
              },
              "start": Position {
                "column": 2,
                "line": 4,
              },
            },
            "raw": "5",
            "start": 39,
            "type": "Literal",
            "value": 5,
          },
        ],
        "callee": Node {
          "end": 38,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 0,
              "line": 4,
            },
          },
          "name": "f",
          "start": 37,
          "type": "Identifier",
        },
        "end": 41,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 4,
          },
        },
        "start": 37,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "start": 37,
      "type": "ExpressionStatement",
    },
  ],
  "end": 42,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 4,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 12 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "export_named_declaration",
        Array [
          Array [
            "function_declaration",
            Array [
              Array [
                "name",
                Array [
                  "f",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  null,
                ],
                Array [
                  Array [
                    "return_statement",
                    Array [
                      Array [
                        "name",
                        Array [
                          "x",
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "application",
          Array [
            Array [
              "name",
              Array [
                "f",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "literal",
                  Array [
                    5,
                    null,
                  ],
                ],
                null,
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13 Test 1 chapter below 1`] = `"Line 1: Export named declarations are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 13 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declaration": Node {
        "declarations": Array [
          Node {
            "end": 18,
            "id": Node {
              "end": 14,
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 1,
                },
                "start": Position {
                  "column": 13,
                  "line": 1,
                },
              },
              "name": "x",
              "start": 13,
              "type": "Identifier",
            },
            "init": Node {
              "end": 18,
              "loc": SourceLocation {
                "end": Position {
                  "column": 18,
                  "line": 1,
                },
                "start": Position {
                  "column": 17,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 17,
              "type": "Literal",
              "value": 1,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 18,
                "line": 1,
              },
              "start": Position {
                "column": 13,
                "line": 1,
              },
            },
            "start": 13,
            "type": "VariableDeclarator",
          },
        ],
        "end": 19,
        "kind": "const",
        "loc": SourceLocation {
          "end": Position {
            "column": 19,
            "line": 1,
          },
          "start": Position {
            "column": 7,
            "line": 1,
          },
        },
        "start": 7,
        "type": "VariableDeclaration",
      },
      "end": 19,
      "loc": SourceLocation {
        "end": Position {
          "column": 19,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "source": null,
      "specifiers": Array [],
      "start": 0,
      "type": "ExportNamedDeclaration",
    },
    Node {
      "end": 22,
      "expression": Node {
        "end": 21,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "name": "x",
        "start": 20,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 20,
      "type": "ExpressionStatement",
    },
  ],
  "end": 22,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 13 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "export_named_declaration",
        Array [
          Array [
            "constant_declaration",
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "name",
          Array [
            "x",
            null,
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14 Test 1 chapter below 1`] = `
"Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 3: Assignment expressions are not allowed
Line 2: While statements are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 9,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "i",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 9,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 8,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 10,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "body": Node {
        "body": Array [
          Node {
            "end": 39,
            "expression": Node {
              "end": 38,
              "left": Node {
                "end": 30,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 3,
                  },
                },
                "name": "i",
                "start": 29,
                "type": "Identifier",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 3,
                },
                "start": Position {
                  "column": 2,
                  "line": 3,
                },
              },
              "operator": "=",
              "right": Node {
                "end": 38,
                "left": Node {
                  "end": 34,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 7,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 6,
                      "line": 3,
                    },
                  },
                  "name": "i",
                  "start": 33,
                  "type": "Identifier",
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "operator": "+",
                "right": Node {
                  "end": 38,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 11,
                      "line": 3,
                    },
                    "start": Position {
                      "column": 10,
                      "line": 3,
                    },
                  },
                  "raw": "1",
                  "start": 37,
                  "type": "Literal",
                  "value": 1,
                },
                "start": 33,
                "type": "BinaryExpression",
              },
              "start": 29,
              "type": "AssignmentExpression",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 3,
              },
              "start": Position {
                "column": 2,
                "line": 3,
              },
            },
            "start": 29,
            "type": "ExpressionStatement",
          },
        ],
        "end": 41,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 4,
          },
          "start": Position {
            "column": 14,
            "line": 2,
          },
        },
        "start": 25,
        "type": "BlockStatement",
      },
      "end": 41,
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 11,
      "test": Node {
        "end": 23,
        "left": Node {
          "end": 19,
          "loc": SourceLocation {
            "end": Position {
              "column": 8,
              "line": 2,
            },
            "start": Position {
              "column": 7,
              "line": 2,
            },
          },
          "name": "i",
          "start": 18,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 2,
          },
          "start": Position {
            "column": 7,
            "line": 2,
          },
        },
        "operator": "<",
        "right": Node {
          "end": 23,
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 2,
            },
            "start": Position {
              "column": 11,
              "line": 2,
            },
          },
          "raw": "5",
          "start": 22,
          "type": "Literal",
          "value": 5,
        },
        "start": 18,
        "type": "BinaryExpression",
      },
      "type": "WhileStatement",
    },
    Node {
      "end": 44,
      "expression": Node {
        "end": 43,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 5,
          },
          "start": Position {
            "column": 0,
            "line": 5,
          },
        },
        "name": "i",
        "start": 42,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 5,
        },
      },
      "start": 42,
      "type": "ExpressionStatement",
    },
  ],
  "end": 44,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 5,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 14 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "while_loop",
          Array [
            Array [
              "binary_operator_combination",
              Array [
                "<",
                Array [
                  Array [
                    "name",
                    Array [
                      "i",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        5,
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
            ],
            Array [
              Array [
                "assignment",
                Array [
                  Array [
                    "name",
                    Array [
                      "i",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "binary_operator_combination",
                      Array [
                        "+",
                        Array [
                          Array [
                            "name",
                            Array [
                              "i",
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                1,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15 Test 1 chapter below 1`] = `
"Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 2: Assignment expressions are not allowed
Line 2: For statements are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 9,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "i",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 9,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 8,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 10,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "body": Node {
        "body": Array [],
        "end": 44,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 30,
            "line": 2,
          },
        },
        "start": 41,
        "type": "BlockStatement",
      },
      "end": 44,
      "init": Node {
        "end": 21,
        "left": Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 6,
              "line": 2,
            },
            "start": Position {
              "column": 5,
              "line": 2,
            },
          },
          "name": "i",
          "start": 16,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 2,
          },
          "start": Position {
            "column": 5,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 21,
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 2,
            },
            "start": Position {
              "column": 9,
              "line": 2,
            },
          },
          "raw": "1",
          "start": 20,
          "type": "Literal",
          "value": 1,
        },
        "start": 16,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 11,
      "test": Node {
        "end": 28,
        "left": Node {
          "end": 24,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 2,
            },
            "start": Position {
              "column": 12,
              "line": 2,
            },
          },
          "name": "i",
          "start": 23,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 2,
          },
          "start": Position {
            "column": 12,
            "line": 2,
          },
        },
        "operator": "<",
        "right": Node {
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 2,
            },
            "start": Position {
              "column": 16,
              "line": 2,
            },
          },
          "raw": "5",
          "start": 27,
          "type": "Literal",
          "value": 5,
        },
        "start": 23,
        "type": "BinaryExpression",
      },
      "type": "ForStatement",
      "update": Node {
        "end": 39,
        "left": Node {
          "end": 31,
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 2,
            },
            "start": Position {
              "column": 19,
              "line": 2,
            },
          },
          "name": "i",
          "start": 30,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 28,
            "line": 2,
          },
          "start": Position {
            "column": 19,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 39,
          "left": Node {
            "end": 35,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 2,
              },
              "start": Position {
                "column": 23,
                "line": 2,
              },
            },
            "name": "i",
            "start": 34,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 28,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 39,
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 38,
            "type": "Literal",
            "value": 1,
          },
          "start": 34,
          "type": "BinaryExpression",
        },
        "start": 30,
        "type": "AssignmentExpression",
      },
    },
    Node {
      "end": 47,
      "expression": Node {
        "end": 46,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 4,
          },
        },
        "name": "i",
        "start": 45,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "start": 45,
      "type": "ExpressionStatement",
    },
  ],
  "end": 47,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 4,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 15 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "for_loop",
          Array [
            Array [
              "assignment",
              Array [
                Array [
                  "name",
                  Array [
                    "i",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  "<",
                  Array [
                    Array [
                      "name",
                      Array [
                        "i",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          5,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              Array [
                Array [
                  "assignment",
                  Array [
                    Array [
                      "name",
                      Array [
                        "i",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          "+",
                          Array [
                            Array [
                              "name",
                              Array [
                                "i",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  1,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                Array [
                  Array [
                    "sequence",
                    Array [
                      null,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
          ],
        ],
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16 Test 1 chapter below 1`] = `
"Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Assignment expressions are not allowed
Line 4: Continue statements are not allowed
Line 6: Assignment expressions are not allowed
Line 8: Break statements are not allowed
Line 7: Missing \\"else\\" in \\"if-else\\" statement.
Line 2: For statements are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 9,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "i",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 9,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 8,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 10,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "body": Node {
        "body": Array [
          Node {
            "alternate": Node {
              "body": Array [
                Node {
                  "end": 101,
                  "expression": Node {
                    "end": 100,
                    "left": Node {
                      "end": 92,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 5,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 4,
                          "line": 6,
                        },
                      },
                      "name": "i",
                      "start": 91,
                      "type": "Identifier",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 13,
                        "line": 6,
                      },
                      "start": Position {
                        "column": 4,
                        "line": 6,
                      },
                    },
                    "operator": "=",
                    "right": Node {
                      "end": 100,
                      "left": Node {
                        "end": 96,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 9,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 8,
                            "line": 6,
                          },
                        },
                        "name": "i",
                        "start": 95,
                        "type": "Identifier",
                      },
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 6,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 6,
                        },
                      },
                      "operator": "+",
                      "right": Node {
                        "end": 100,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 13,
                            "line": 6,
                          },
                          "start": Position {
                            "column": 12,
                            "line": 6,
                          },
                        },
                        "raw": "1",
                        "start": 99,
                        "type": "Literal",
                        "value": 1,
                      },
                      "start": 95,
                      "type": "BinaryExpression",
                    },
                    "start": 91,
                    "type": "AssignmentExpression",
                  },
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 14,
                      "line": 6,
                    },
                    "start": Position {
                      "column": 4,
                      "line": 6,
                    },
                  },
                  "start": 91,
                  "type": "ExpressionStatement",
                },
                Node {
                  "alternate": null,
                  "consequent": Node {
                    "body": Array [
                      Node {
                        "end": 131,
                        "label": null,
                        "loc": SourceLocation {
                          "end": Position {
                            "column": 12,
                            "line": 8,
                          },
                          "start": Position {
                            "column": 6,
                            "line": 8,
                          },
                        },
                        "start": 125,
                        "type": "BreakStatement",
                      },
                    ],
                    "end": 137,
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 5,
                        "line": 9,
                      },
                      "start": Position {
                        "column": 15,
                        "line": 7,
                      },
                    },
                    "start": 117,
                    "type": "BlockStatement",
                  },
                  "end": 137,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 5,
                      "line": 9,
                    },
                    "start": Position {
                      "column": 4,
                      "line": 7,
                    },
                  },
                  "start": 106,
                  "test": Node {
                    "end": 115,
                    "left": Node {
                      "end": 111,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 9,
                          "line": 7,
                        },
                        "start": Position {
                          "column": 8,
                          "line": 7,
                        },
                      },
                      "name": "j",
                      "start": 110,
                      "type": "Identifier",
                    },
                    "loc": SourceLocation {
                      "end": Position {
                        "column": 13,
                        "line": 7,
                      },
                      "start": Position {
                        "column": 8,
                        "line": 7,
                      },
                    },
                    "operator": ">",
                    "right": Node {
                      "end": 115,
                      "loc": SourceLocation {
                        "end": Position {
                          "column": 13,
                          "line": 7,
                        },
                        "start": Position {
                          "column": 12,
                          "line": 7,
                        },
                      },
                      "raw": "2",
                      "start": 114,
                      "type": "Literal",
                      "value": 2,
                    },
                    "start": 110,
                    "type": "BinaryExpression",
                  },
                  "type": "IfStatement",
                },
              ],
              "end": 141,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 10,
                },
                "start": Position {
                  "column": 9,
                  "line": 5,
                },
              },
              "start": 85,
              "type": "BlockStatement",
            },
            "consequent": Node {
              "body": Array [
                Node {
                  "end": 75,
                  "label": null,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 4,
                    },
                    "start": Position {
                      "column": 4,
                      "line": 4,
                    },
                  },
                  "start": 66,
                  "type": "ContinueStatement",
                },
              ],
              "end": 79,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 5,
                },
                "start": Position {
                  "column": 13,
                  "line": 3,
                },
              },
              "start": 60,
              "type": "BlockStatement",
            },
            "end": 141,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 10,
              },
              "start": Position {
                "column": 2,
                "line": 3,
              },
            },
            "start": 49,
            "test": Node {
              "end": 58,
              "left": Node {
                "end": 54,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 7,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 3,
                  },
                },
                "name": "j",
                "start": 53,
                "type": "Identifier",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 3,
                },
                "start": Position {
                  "column": 6,
                  "line": 3,
                },
              },
              "operator": "<",
              "right": Node {
                "end": 58,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 11,
                    "line": 3,
                  },
                  "start": Position {
                    "column": 10,
                    "line": 3,
                  },
                },
                "raw": "1",
                "start": 57,
                "type": "Literal",
                "value": 1,
              },
              "start": 53,
              "type": "BinaryExpression",
            },
            "type": "IfStatement",
          },
        ],
        "end": 143,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 11,
          },
          "start": Position {
            "column": 34,
            "line": 2,
          },
        },
        "start": 45,
        "type": "BlockStatement",
      },
      "end": 143,
      "init": Node {
        "declarations": Array [
          Node {
            "end": 25,
            "id": Node {
              "end": 21,
              "loc": SourceLocation {
                "end": Position {
                  "column": 10,
                  "line": 2,
                },
                "start": Position {
                  "column": 9,
                  "line": 2,
                },
              },
              "name": "j",
              "start": 20,
              "type": "Identifier",
            },
            "init": Node {
              "end": 25,
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 2,
                },
                "start": Position {
                  "column": 13,
                  "line": 2,
                },
              },
              "raw": "0",
              "start": 24,
              "type": "Literal",
              "value": 0,
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 14,
                "line": 2,
              },
              "start": Position {
                "column": 9,
                "line": 2,
              },
            },
            "start": 20,
            "type": "VariableDeclarator",
          },
        ],
        "end": 25,
        "kind": "let",
        "loc": SourceLocation {
          "end": Position {
            "column": 14,
            "line": 2,
          },
          "start": Position {
            "column": 5,
            "line": 2,
          },
        },
        "start": 16,
        "type": "VariableDeclaration",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 11,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 11,
      "test": Node {
        "end": 32,
        "left": Node {
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 2,
            },
            "start": Position {
              "column": 16,
              "line": 2,
            },
          },
          "name": "j",
          "start": 27,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 21,
            "line": 2,
          },
          "start": Position {
            "column": 16,
            "line": 2,
          },
        },
        "operator": "<",
        "right": Node {
          "end": 32,
          "loc": SourceLocation {
            "end": Position {
              "column": 21,
              "line": 2,
            },
            "start": Position {
              "column": 20,
              "line": 2,
            },
          },
          "raw": "5",
          "start": 31,
          "type": "Literal",
          "value": 5,
        },
        "start": 27,
        "type": "BinaryExpression",
      },
      "type": "ForStatement",
      "update": Node {
        "end": 43,
        "left": Node {
          "end": 35,
          "loc": SourceLocation {
            "end": Position {
              "column": 24,
              "line": 2,
            },
            "start": Position {
              "column": 23,
              "line": 2,
            },
          },
          "name": "j",
          "start": 34,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 32,
            "line": 2,
          },
          "start": Position {
            "column": 23,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 43,
          "left": Node {
            "end": 39,
            "loc": SourceLocation {
              "end": Position {
                "column": 28,
                "line": 2,
              },
              "start": Position {
                "column": 27,
                "line": 2,
              },
            },
            "name": "j",
            "start": 38,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 32,
              "line": 2,
            },
            "start": Position {
              "column": 27,
              "line": 2,
            },
          },
          "operator": "+",
          "right": Node {
            "end": 43,
            "loc": SourceLocation {
              "end": Position {
                "column": 32,
                "line": 2,
              },
              "start": Position {
                "column": 31,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 42,
            "type": "Literal",
            "value": 1,
          },
          "start": 38,
          "type": "BinaryExpression",
        },
        "start": 34,
        "type": "AssignmentExpression",
      },
    },
    Node {
      "end": 146,
      "expression": Node {
        "end": 145,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 12,
          },
          "start": Position {
            "column": 0,
            "line": 12,
          },
        },
        "name": "i",
        "start": 144,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 12,
        },
        "start": Position {
          "column": 0,
          "line": 12,
        },
      },
      "start": 144,
      "type": "ExpressionStatement",
    },
  ],
  "end": 146,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 12,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 16 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "for_loop",
          Array [
            Array [
              "variable_declaration",
              Array [
                Array [
                  "name",
                  Array [
                    "j",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      0,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "binary_operator_combination",
                Array [
                  "<",
                  Array [
                    Array [
                      "name",
                      Array [
                        "j",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          5,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
              ],
              Array [
                Array [
                  "assignment",
                  Array [
                    Array [
                      "name",
                      Array [
                        "j",
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          "+",
                          Array [
                            Array [
                              "name",
                              Array [
                                "j",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  1,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                Array [
                  Array [
                    "conditional_statement",
                    Array [
                      Array [
                        "binary_operator_combination",
                        Array [
                          "<",
                          Array [
                            Array [
                              "name",
                              Array [
                                "j",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  1,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                      ],
                      Array [
                        Array [
                          "continue_statement",
                          null,
                        ],
                        Array [
                          Array [
                            "sequence",
                            Array [
                              Array [
                                Array [
                                  "assignment",
                                  Array [
                                    Array [
                                      "name",
                                      Array [
                                        "i",
                                        null,
                                      ],
                                    ],
                                    Array [
                                      Array [
                                        "binary_operator_combination",
                                        Array [
                                          "+",
                                          Array [
                                            Array [
                                              "name",
                                              Array [
                                                "i",
                                                null,
                                              ],
                                            ],
                                            Array [
                                              Array [
                                                "literal",
                                                Array [
                                                  1,
                                                  null,
                                                ],
                                              ],
                                              null,
                                            ],
                                          ],
                                        ],
                                      ],
                                      null,
                                    ],
                                  ],
                                ],
                                Array [
                                  Array [
                                    "conditional_statement",
                                    Array [
                                      Array [
                                        "binary_operator_combination",
                                        Array [
                                          ">",
                                          Array [
                                            Array [
                                              "name",
                                              Array [
                                                "j",
                                                null,
                                              ],
                                            ],
                                            Array [
                                              Array [
                                                "literal",
                                                Array [
                                                  2,
                                                  null,
                                                ],
                                              ],
                                              null,
                                            ],
                                          ],
                                        ],
                                      ],
                                      Array [
                                        Array [
                                          "break_statement",
                                          null,
                                        ],
                                        Array [
                                          Array [
                                            "sequence",
                                            Array [
                                              null,
                                              null,
                                            ],
                                          ],
                                          null,
                                        ],
                                      ],
                                    ],
                                  ],
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                  ],
                  null,
                ],
              ],
            ],
          ],
        ],
        Array [
          Array [
            "name",
            Array [
              "i",
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17 Test 1 chapter below 1`] = `"Line 1: Array expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 17 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 3,
      "expression": Node {
        "elements": Array [],
        "end": 2,
        "loc": SourceLocation {
          "end": Position {
            "column": 2,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ArrayExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 3,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 3,
  "loc": SourceLocation {
    "end": Position {
      "column": 3,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 17 Test stdlib parser 1`] = `
Array [
  "array_expression",
  Array [
    null,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18 Test 1 chapter below 1`] = `"Line 1: Array expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 18 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 10,
      "expression": Node {
        "elements": Array [
          Node {
            "end": 2,
            "loc": SourceLocation {
              "end": Position {
                "column": 2,
                "line": 1,
              },
              "start": Position {
                "column": 1,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 1,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 4,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 8,
            "loc": SourceLocation {
              "end": Position {
                "column": 8,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 7,
            "type": "Literal",
            "value": 3,
          },
        ],
        "end": 9,
        "loc": SourceLocation {
          "end": Position {
            "column": 9,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ArrayExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 10,
  "loc": SourceLocation {
    "end": Position {
      "column": 10,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 18 Test stdlib parser 1`] = `
Array [
  "array_expression",
  Array [
    Array [
      Array [
        "literal",
        Array [
          1,
          null,
        ],
      ],
      Array [
        Array [
          "literal",
          Array [
            2,
            null,
          ],
        ],
        Array [
          Array [
            "literal",
            Array [
              3,
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19 Test 1 chapter below 1`] = `
"Line 1: Array expressions are not allowed
Line 1: Member expressions are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 13,
      "expression": Node {
        "computed": true,
        "end": 12,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "elements": Array [
            Node {
              "end": 2,
              "loc": SourceLocation {
                "end": Position {
                  "column": 2,
                  "line": 1,
                },
                "start": Position {
                  "column": 1,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 1,
              "type": "Literal",
              "value": 1,
            },
            Node {
              "end": 5,
              "loc": SourceLocation {
                "end": Position {
                  "column": 5,
                  "line": 1,
                },
                "start": Position {
                  "column": 4,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 4,
              "type": "Literal",
              "value": 2,
            },
            Node {
              "end": 8,
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 1,
                },
                "start": Position {
                  "column": 7,
                  "line": 1,
                },
              },
              "raw": "3",
              "start": 7,
              "type": "Literal",
              "value": 3,
            },
          ],
          "end": 9,
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "start": 0,
          "type": "ArrayExpression",
        },
        "property": Node {
          "end": 11,
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 10,
              "line": 1,
            },
          },
          "raw": "1",
          "start": 10,
          "type": "Literal",
          "value": 1,
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 13,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 13,
  "loc": SourceLocation {
    "end": Position {
      "column": 13,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 19 Test stdlib parser 1`] = `
Array [
  "object_access",
  Array [
    Array [
      "array_expression",
      Array [
        Array [
          Array [
            "literal",
            Array [
              1,
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                2,
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  3,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    Array [
      Array [
        "literal",
        Array [
          1,
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20 Test 1 chapter below 1`] = `
"Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 17,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "elements": Array [
              Node {
                "end": 10,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 9,
                "type": "Literal",
                "value": 1,
              },
              Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 12,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 12,
                "type": "Literal",
                "value": 2,
              },
              Node {
                "end": 16,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "raw": "3",
                "start": 15,
                "type": "Literal",
                "value": 3,
              },
            ],
            "end": 17,
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "start": 8,
            "type": "ArrayExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 18,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 24,
      "expression": Node {
        "computed": true,
        "end": 23,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "name": "x",
          "start": 19,
          "type": "Identifier",
        },
        "property": Node {
          "end": 22,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 2,
              "line": 2,
            },
          },
          "raw": "1",
          "start": 21,
          "type": "Literal",
          "value": 1,
        },
        "start": 19,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 19,
      "type": "ExpressionStatement",
    },
  ],
  "end": 24,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 20 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "array_expression",
              Array [
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          3,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "object_access",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21 Test 1 chapter below 1`] = `
"Line 1: Array expressions are not allowed
Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Member expressions are not allowed
Line 2: Assignment expressions are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 17,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "elements": Array [
              Node {
                "end": 10,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 9,
                "type": "Literal",
                "value": 1,
              },
              Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 12,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 12,
                "type": "Literal",
                "value": 2,
              },
              Node {
                "end": 16,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "raw": "3",
                "start": 15,
                "type": "Literal",
                "value": 3,
              },
            ],
            "end": 17,
            "loc": SourceLocation {
              "end": Position {
                "column": 17,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "start": 8,
            "type": "ArrayExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 18,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 28,
      "expression": Node {
        "end": 27,
        "left": Node {
          "computed": true,
          "end": 23,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "start": 19,
            "type": "Identifier",
          },
          "property": Node {
            "end": 22,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "raw": "1",
            "start": 21,
            "type": "Literal",
            "value": 1,
          },
          "start": 19,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 8,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 27,
          "loc": SourceLocation {
            "end": Position {
              "column": 8,
              "line": 2,
            },
            "start": Position {
              "column": 7,
              "line": 2,
            },
          },
          "raw": "4",
          "start": 26,
          "type": "Literal",
          "value": 4,
        },
        "start": 19,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 9,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 19,
      "type": "ExpressionStatement",
    },
  ],
  "end": 28,
  "loc": SourceLocation {
    "end": Position {
      "column": 9,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 21 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "array_expression",
              Array [
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "literal",
                      Array [
                        2,
                        null,
                      ],
                    ],
                    Array [
                      Array [
                        "literal",
                        Array [
                          3,
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "object_assignment",
          Array [
            Array [
              "object_access",
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      1,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  4,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22 Test 1 chapter below 1`] = `
"Line 1: Mutable variable declaration using keyword 'let' is not allowed.
Line 2: Mutable variable declaration using keyword 'let' is not allowed.
Line 3: Mutable variable declaration using keyword 'let' is not allowed.
Line 4: Assignment expressions are not allowed
Line 4: Assignment expressions are not allowed
Line 4: Assignment expressions are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 9,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 9,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 8,
            "type": "Literal",
            "value": 3,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 10,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "declarations": Array [
        Node {
          "end": 20,
          "id": Node {
            "end": 16,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 2,
              },
              "start": Position {
                "column": 4,
                "line": 2,
              },
            },
            "name": "y",
            "start": 15,
            "type": "Identifier",
          },
          "init": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 2,
              },
              "start": Position {
                "column": 8,
                "line": 2,
              },
            },
            "raw": "4",
            "start": 19,
            "type": "Literal",
            "value": 4,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 2,
            },
            "start": Position {
              "column": 4,
              "line": 2,
            },
          },
          "start": 15,
          "type": "VariableDeclarator",
        },
      ],
      "end": 21,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 11,
      "type": "VariableDeclaration",
    },
    Node {
      "declarations": Array [
        Node {
          "end": 31,
          "id": Node {
            "end": 27,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 3,
              },
              "start": Position {
                "column": 4,
                "line": 3,
              },
            },
            "name": "z",
            "start": 26,
            "type": "Identifier",
          },
          "init": Node {
            "end": 31,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 3,
              },
              "start": Position {
                "column": 8,
                "line": 3,
              },
            },
            "raw": "5",
            "start": 30,
            "type": "Literal",
            "value": 5,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 9,
              "line": 3,
            },
            "start": Position {
              "column": 4,
              "line": 3,
            },
          },
          "start": 26,
          "type": "VariableDeclarator",
        },
      ],
      "end": 32,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 10,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 3,
        },
      },
      "start": 22,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 47,
      "expression": Node {
        "end": 46,
        "left": Node {
          "end": 34,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 0,
              "line": 4,
            },
          },
          "name": "x",
          "start": 33,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 4,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 46,
          "left": Node {
            "end": 38,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 4,
              },
              "start": Position {
                "column": 4,
                "line": 4,
              },
            },
            "name": "y",
            "start": 37,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 4,
            },
            "start": Position {
              "column": 4,
              "line": 4,
            },
          },
          "operator": "=",
          "right": Node {
            "end": 46,
            "left": Node {
              "end": 42,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 4,
                },
                "start": Position {
                  "column": 8,
                  "line": 4,
                },
              },
              "name": "z",
              "start": 41,
              "type": "Identifier",
            },
            "loc": SourceLocation {
              "end": Position {
                "column": 13,
                "line": 4,
              },
              "start": Position {
                "column": 8,
                "line": 4,
              },
            },
            "operator": "=",
            "right": Node {
              "end": 46,
              "loc": SourceLocation {
                "end": Position {
                  "column": 13,
                  "line": 4,
                },
                "start": Position {
                  "column": 12,
                  "line": 4,
                },
              },
              "raw": "6",
              "start": 45,
              "type": "Literal",
              "value": 6,
            },
            "start": 41,
            "type": "AssignmentExpression",
          },
          "start": 37,
          "type": "AssignmentExpression",
        },
        "start": 33,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 14,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "start": 33,
      "type": "ExpressionStatement",
    },
    Node {
      "end": 50,
      "expression": Node {
        "end": 49,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 5,
          },
          "start": Position {
            "column": 0,
            "line": 5,
          },
        },
        "name": "x",
        "start": 48,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 5,
        },
      },
      "start": 48,
      "type": "ExpressionStatement",
    },
  ],
  "end": 50,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 5,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 22 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                3,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "variable_declaration",
          Array [
            Array [
              "name",
              Array [
                "y",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  4,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "variable_declaration",
            Array [
              Array [
                "name",
                Array [
                  "z",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    5,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "assignment",
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "assignment",
                    Array [
                      Array [
                        "name",
                        Array [
                          "y",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "assignment",
                          Array [
                            Array [
                              "name",
                              Array [
                                "z",
                                null,
                              ],
                            ],
                            Array [
                              Array [
                                "literal",
                                Array [
                                  6,
                                  null,
                                ],
                              ],
                              null,
                            ],
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23 Test 1 chapter below 1`] = `
"Line 1: Rest elements are not allowed
Line 4: Array expressions are not allowed
Line 4: Spread elements are not allowed"
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "body": Node {
        "body": Array [
          Node {
            "argument": Node {
              "end": 39,
              "left": Node {
                "end": 35,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 2,
                  },
                },
                "name": "x",
                "start": 34,
                "type": "Identifier",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 2,
                },
                "start": Position {
                  "column": 9,
                  "line": 2,
                },
              },
              "operator": "+",
              "right": Node {
                "end": 39,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 14,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 2,
                  },
                },
                "name": "y",
                "start": 38,
                "type": "Identifier",
              },
              "start": 34,
              "type": "BinaryExpression",
            },
            "end": 40,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "start": 27,
            "type": "ReturnStatement",
          },
        ],
        "end": 42,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 23,
            "line": 1,
          },
        },
        "start": 23,
        "type": "BlockStatement",
      },
      "end": 42,
      "expression": false,
      "generator": false,
      "id": Node {
        "end": 10,
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "name": "f",
        "start": 9,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "params": Array [
        Node {
          "end": 12,
          "loc": SourceLocation {
            "end": Position {
              "column": 12,
              "line": 1,
            },
            "start": Position {
              "column": 11,
              "line": 1,
            },
          },
          "name": "x",
          "start": 11,
          "type": "Identifier",
        },
        Node {
          "end": 15,
          "loc": SourceLocation {
            "end": Position {
              "column": 15,
              "line": 1,
            },
            "start": Position {
              "column": 14,
              "line": 1,
            },
          },
          "name": "y",
          "start": 14,
          "type": "Identifier",
        },
        Node {
          "argument": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "name": "z",
            "start": 20,
            "type": "Identifier",
          },
          "end": 21,
          "loc": SourceLocation {
            "end": Position {
              "column": 21,
              "line": 1,
            },
            "start": Position {
              "column": 17,
              "line": 1,
            },
          },
          "start": 17,
          "type": "RestElement",
        },
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
    Node {
      "end": 56,
      "expression": Node {
        "arguments": Array [
          Node {
            "argument": Node {
              "elements": Array [
                Node {
                  "end": 50,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 7,
                      "line": 4,
                    },
                    "start": Position {
                      "column": 6,
                      "line": 4,
                    },
                  },
                  "raw": "1",
                  "start": 49,
                  "type": "Literal",
                  "value": 1,
                },
                Node {
                  "end": 53,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 4,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 4,
                    },
                  },
                  "raw": "2",
                  "start": 52,
                  "type": "Literal",
                  "value": 2,
                },
              ],
              "end": 54,
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 4,
                },
                "start": Position {
                  "column": 5,
                  "line": 4,
                },
              },
              "start": 48,
              "type": "ArrayExpression",
            },
            "end": 54,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 4,
              },
              "start": Position {
                "column": 2,
                "line": 4,
              },
            },
            "start": 45,
            "type": "SpreadElement",
          },
        ],
        "callee": Node {
          "end": 44,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 0,
              "line": 4,
            },
          },
          "name": "f",
          "start": 43,
          "type": "Identifier",
        },
        "end": 55,
        "loc": SourceLocation {
          "end": Position {
            "column": 12,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 4,
          },
        },
        "start": 43,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 13,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "start": 43,
      "type": "ExpressionStatement",
    },
  ],
  "end": 56,
  "loc": SourceLocation {
    "end": Position {
      "column": 13,
      "line": 4,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 23 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "function_declaration",
        Array [
          Array [
            "name",
            Array [
              "f",
              null,
            ],
          ],
          Array [
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              Array [
                Array [
                  "name",
                  Array [
                    "y",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "rest_element",
                    Array [
                      Array [
                        "name",
                        Array [
                          "z",
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "return_statement",
                Array [
                  Array [
                    "binary_operator_combination",
                    Array [
                      "+",
                      Array [
                        Array [
                          "name",
                          Array [
                            "x",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "name",
                            Array [
                              "y",
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
      ],
      Array [
        Array [
          "application",
          Array [
            Array [
              "name",
              Array [
                "f",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "spread_element",
                  Array [
                    Array [
                      "array_expression",
                      Array [
                        Array [
                          Array [
                            "literal",
                            Array [
                              1,
                              null,
                            ],
                          ],
                          Array [
                            Array [
                              "literal",
                              Array [
                                2,
                                null,
                              ],
                            ],
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 24 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 5,
      "expression": Node {
        "end": 3,
        "loc": SourceLocation {
          "end": Position {
            "column": 3,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [],
        "start": 1,
        "type": "ObjectExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 5,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 24 Test stdlib parser 1`] = `
Array [
  "object_expression",
  Array [
    null,
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 25 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 15,
      "expression": Node {
        "end": 13,
        "loc": SourceLocation {
          "end": Position {
            "column": 13,
            "line": 1,
          },
          "start": Position {
            "column": 1,
            "line": 1,
          },
        },
        "properties": Array [
          Node {
            "computed": false,
            "end": 6,
            "key": Node {
              "end": 3,
              "loc": SourceLocation {
                "end": Position {
                  "column": 3,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "name": "a",
              "start": 2,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 6,
                "line": 1,
              },
              "start": Position {
                "column": 2,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 2,
            "type": "Property",
            "value": Node {
              "end": 6,
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 5,
                  "line": 1,
                },
              },
              "raw": "1",
              "start": 5,
              "type": "Literal",
              "value": 1,
            },
          },
          Node {
            "computed": false,
            "end": 12,
            "key": Node {
              "end": 9,
              "loc": SourceLocation {
                "end": Position {
                  "column": 9,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "name": "b",
              "start": 8,
              "type": "Identifier",
            },
            "kind": "init",
            "loc": SourceLocation {
              "end": Position {
                "column": 12,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "method": false,
            "shorthand": false,
            "start": 8,
            "type": "Property",
            "value": Node {
              "end": 12,
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 11,
                  "line": 1,
                },
              },
              "raw": "2",
              "start": 11,
              "type": "Literal",
              "value": 2,
            },
          },
        ],
        "start": 1,
        "type": "ObjectExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 15,
  "loc": SourceLocation {
    "end": Position {
      "column": 15,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 25 Test stdlib parser 1`] = `
Array [
  "object_expression",
  Array [
    Array [
      Array [
        "key_value_pair",
        Array [
          Array [
            "property",
            Array [
              "a",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "key_value_pair",
          Array [
            Array [
              "property",
              Array [
                "b",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  2,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 26 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 20,
      "expression": Node {
        "computed": true,
        "end": 19,
        "loc": SourceLocation {
          "end": Position {
            "column": 19,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 6,
              "key": Node {
                "end": 3,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "name": "a",
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 6,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 6,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 5,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 5,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 12,
              "key": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "name": "b",
                "start": 8,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 8,
              "type": "Property",
              "value": Node {
                "end": 12,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 12,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 11,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 11,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 18,
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 1,
            },
            "start": Position {
              "column": 15,
              "line": 1,
            },
          },
          "raw": "'a'",
          "start": 15,
          "type": "Literal",
          "value": "a",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 20,
  "loc": SourceLocation {
    "end": Position {
      "column": 20,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 26 Test stdlib parser 1`] = `
Array [
  "object_access",
  Array [
    Array [
      "object_expression",
      Array [
        Array [
          Array [
            "key_value_pair",
            Array [
              Array [
                "property",
                Array [
                  "a",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "property",
                  Array [
                    "b",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
    Array [
      Array [
        "literal",
        Array [
          "a",
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27 Test 1 chapter below 1`] = `
"Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed."
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 17,
      "expression": Node {
        "computed": false,
        "end": 16,
        "loc": SourceLocation {
          "end": Position {
            "column": 16,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 6,
              "key": Node {
                "end": 3,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "name": "a",
                "start": 2,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 6,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 6,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 5,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 5,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 12,
              "key": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "name": "b",
                "start": 8,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 8,
              "type": "Property",
              "value": Node {
                "end": 12,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 12,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 11,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 11,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 16,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 1,
            },
            "start": Position {
              "column": 15,
              "line": 1,
            },
          },
          "name": "a",
          "start": 15,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "loc": SourceLocation {
    "end": Position {
      "column": 17,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 27 Test stdlib parser 1`] = `
Array [
  "object_access",
  Array [
    Array [
      "object_expression",
      Array [
        Array [
          Array [
            "key_value_pair",
            Array [
              Array [
                "property",
                Array [
                  "a",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "property",
                  Array [
                    "b",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
    Array [
      Array [
        "property",
        Array [
          "a",
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28 Test 1 chapter below 1`] = `
"Line 1: Object expressions are not allowed
Line 1: Dot abbreviations are not allowed."
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 21,
      "expression": Node {
        "computed": false,
        "end": 20,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 8,
              "key": Node {
                "end": 5,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 5,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "raw": "'a'",
                "start": 2,
                "type": "Literal",
                "value": "a",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 8,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 8,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 8,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 7,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 7,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 16,
              "key": Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 10,
                    "line": 1,
                  },
                },
                "raw": "'b'",
                "start": 10,
                "type": "Literal",
                "value": "b",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 16,
                  "line": 1,
                },
                "start": Position {
                  "column": 10,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 10,
              "type": "Property",
              "value": Node {
                "end": 16,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 15,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 19,
              "line": 1,
            },
          },
          "name": "a",
          "start": 19,
          "type": "Identifier",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 21,
  "loc": SourceLocation {
    "end": Position {
      "column": 21,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 28 Test stdlib parser 1`] = `
Array [
  "object_access",
  Array [
    Array [
      "object_expression",
      Array [
        Array [
          Array [
            "key_value_pair",
            Array [
              Array [
                "literal",
                Array [
                  "a",
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "literal",
                  Array [
                    "b",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
    Array [
      Array [
        "property",
        Array [
          "a",
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 29 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 20,
      "expression": Node {
        "computed": true,
        "end": 19,
        "loc": SourceLocation {
          "end": Position {
            "column": 19,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "object": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 1,
              "line": 1,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 6,
              "key": Node {
                "end": 3,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 2,
                "type": "Literal",
                "value": 1,
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 1,
                },
                "start": Position {
                  "column": 2,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 2,
              "type": "Property",
              "value": Node {
                "end": 6,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 6,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 5,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 5,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 12,
              "key": Node {
                "end": 9,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 8,
                "type": "Literal",
                "value": 2,
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 1,
                },
                "start": Position {
                  "column": 8,
                  "line": 1,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 8,
              "type": "Property",
              "value": Node {
                "end": 12,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 12,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 11,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 11,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 1,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 18,
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 1,
            },
            "start": Position {
              "column": 15,
              "line": 1,
            },
          },
          "raw": "'1'",
          "start": 15,
          "type": "Literal",
          "value": "1",
        },
        "start": 0,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 20,
  "loc": SourceLocation {
    "end": Position {
      "column": 20,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 29 Test stdlib parser 1`] = `
Array [
  "object_access",
  Array [
    Array [
      "object_expression",
      Array [
        Array [
          Array [
            "key_value_pair",
            Array [
              Array [
                "literal",
                Array [
                  1,
                  null,
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    1,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          Array [
            Array [
              "key_value_pair",
              Array [
                Array [
                  "literal",
                  Array [
                    2,
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      2,
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
    Array [
      Array [
        "literal",
        Array [
          "1",
          null,
        ],
      ],
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30 Test 1 chapter below 1`] = `"Line 2: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 30 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 15,
          "id": Node {
            "end": 9,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 1,
              },
              "start": Position {
                "column": 6,
                "line": 1,
              },
            },
            "name": "key",
            "start": 6,
            "type": "Identifier",
          },
          "init": Node {
            "end": 15,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 12,
                "line": 1,
              },
            },
            "raw": "'a'",
            "start": 12,
            "type": "Literal",
            "value": "a",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 15,
              "line": 1,
            },
            "start": Position {
              "column": 6,
              "line": 1,
            },
          },
          "start": 6,
          "type": "VariableDeclarator",
        },
      ],
      "end": 16,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 37,
      "expression": Node {
        "computed": true,
        "end": 36,
        "loc": SourceLocation {
          "end": Position {
            "column": 19,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "object": Node {
          "end": 30,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 2,
            },
            "start": Position {
              "column": 1,
              "line": 2,
            },
          },
          "properties": Array [
            Node {
              "computed": false,
              "end": 23,
              "key": Node {
                "end": 20,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 3,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 2,
                    "line": 2,
                  },
                },
                "name": "a",
                "start": 19,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 6,
                  "line": 2,
                },
                "start": Position {
                  "column": 2,
                  "line": 2,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 19,
              "type": "Property",
              "value": Node {
                "end": 23,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 6,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 5,
                    "line": 2,
                  },
                },
                "raw": "1",
                "start": 22,
                "type": "Literal",
                "value": 1,
              },
            },
            Node {
              "computed": false,
              "end": 29,
              "key": Node {
                "end": 26,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 2,
                  },
                },
                "name": "b",
                "start": 25,
                "type": "Identifier",
              },
              "kind": "init",
              "loc": SourceLocation {
                "end": Position {
                  "column": 12,
                  "line": 2,
                },
                "start": Position {
                  "column": 8,
                  "line": 2,
                },
              },
              "method": false,
              "shorthand": false,
              "start": 25,
              "type": "Property",
              "value": Node {
                "end": 29,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 12,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 11,
                    "line": 2,
                  },
                },
                "raw": "2",
                "start": 28,
                "type": "Literal",
                "value": 2,
              },
            },
          ],
          "start": 18,
          "type": "ObjectExpression",
        },
        "property": Node {
          "end": 35,
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 2,
            },
            "start": Position {
              "column": 15,
              "line": 2,
            },
          },
          "name": "key",
          "start": 32,
          "type": "Identifier",
        },
        "start": 17,
        "type": "MemberExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 17,
      "type": "ExpressionStatement",
    },
  ],
  "end": 37,
  "loc": SourceLocation {
    "end": Position {
      "column": 20,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 30 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "constant_declaration",
        Array [
          Array [
            "name",
            Array [
              "key",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                "a",
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "object_access",
          Array [
            Array [
              "object_expression",
              Array [
                Array [
                  Array [
                    "key_value_pair",
                    Array [
                      Array [
                        "property",
                        Array [
                          "a",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            1,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "b",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              2,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
            Array [
              Array [
                "name",
                Array [
                  "key",
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31 Test 1 chapter below 1`] = `
"Line 1: Object expressions are not allowed
Line 2: Dot abbreviations are not allowed."
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 20,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "properties": Array [
              Node {
                "computed": false,
                "end": 13,
                "key": Node {
                  "end": 10,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "name": "a",
                  "start": 9,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 9,
                "type": "Property",
                "value": Node {
                  "end": 13,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 12,
                  "type": "Literal",
                  "value": 1,
                },
              },
              Node {
                "computed": false,
                "end": 19,
                "key": Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 15,
                      "line": 1,
                    },
                  },
                  "name": "b",
                  "start": 15,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 19,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 15,
                "type": "Property",
                "value": Node {
                  "end": 19,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 19,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 18,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 18,
                  "type": "Literal",
                  "value": 2,
                },
              },
            ],
            "start": 8,
            "type": "ObjectExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 21,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 30,
      "expression": Node {
        "end": 29,
        "left": Node {
          "computed": false,
          "end": 25,
          "loc": SourceLocation {
            "end": Position {
              "column": 3,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "start": 22,
            "type": "Identifier",
          },
          "property": Node {
            "end": 25,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "name": "a",
            "start": 24,
            "type": "Identifier",
          },
          "start": 22,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 7,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 29,
          "loc": SourceLocation {
            "end": Position {
              "column": 7,
              "line": 2,
            },
            "start": Position {
              "column": 6,
              "line": 2,
            },
          },
          "raw": "3",
          "start": 28,
          "type": "Literal",
          "value": 3,
        },
        "start": 22,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 8,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 22,
      "type": "ExpressionStatement",
    },
  ],
  "end": 30,
  "loc": SourceLocation {
    "end": Position {
      "column": 8,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 31 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "object_expression",
              Array [
                Array [
                  Array [
                    "key_value_pair",
                    Array [
                      Array [
                        "property",
                        Array [
                          "a",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            1,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "b",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              2,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "object_assignment",
          Array [
            Array [
              "object_access",
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "property",
                    Array [
                      "a",
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  3,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 32 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 32 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 20,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "properties": Array [
              Node {
                "computed": false,
                "end": 13,
                "key": Node {
                  "end": 10,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "name": "a",
                  "start": 9,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 9,
                "type": "Property",
                "value": Node {
                  "end": 13,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 12,
                  "type": "Literal",
                  "value": 1,
                },
              },
              Node {
                "computed": false,
                "end": 19,
                "key": Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 15,
                      "line": 1,
                    },
                  },
                  "name": "b",
                  "start": 15,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 19,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 15,
                "type": "Property",
                "value": Node {
                  "end": 19,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 19,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 18,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 18,
                  "type": "Literal",
                  "value": 2,
                },
              },
            ],
            "start": 8,
            "type": "ObjectExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 21,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 33,
      "expression": Node {
        "end": 32,
        "left": Node {
          "computed": true,
          "end": 28,
          "loc": SourceLocation {
            "end": Position {
              "column": 6,
              "line": 2,
            },
            "start": Position {
              "column": 0,
              "line": 2,
            },
          },
          "object": Node {
            "end": 23,
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 2,
              },
              "start": Position {
                "column": 0,
                "line": 2,
              },
            },
            "name": "x",
            "start": 22,
            "type": "Identifier",
          },
          "property": Node {
            "end": 27,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "raw": "'a'",
            "start": 24,
            "type": "Literal",
            "value": "a",
          },
          "start": 22,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 2,
          },
          "start": Position {
            "column": 0,
            "line": 2,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 32,
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 2,
            },
            "start": Position {
              "column": 9,
              "line": 2,
            },
          },
          "raw": "3",
          "start": 31,
          "type": "Literal",
          "value": 3,
        },
        "start": 22,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 22,
      "type": "ExpressionStatement",
    },
  ],
  "end": 33,
  "loc": SourceLocation {
    "end": Position {
      "column": 11,
      "line": 2,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 32 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "object_expression",
              Array [
                Array [
                  Array [
                    "key_value_pair",
                    Array [
                      Array [
                        "property",
                        Array [
                          "a",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            1,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "b",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              2,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "object_assignment",
          Array [
            Array [
              "object_access",
              Array [
                Array [
                  "name",
                  Array [
                    "x",
                    null,
                  ],
                ],
                Array [
                  Array [
                    "literal",
                    Array [
                      "a",
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  3,
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 33 Test 1 chapter below 1`] = `"Line 1: Object expressions are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 33 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 20,
          "id": Node {
            "end": 5,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 1,
              },
              "start": Position {
                "column": 4,
                "line": 1,
              },
            },
            "name": "x",
            "start": 4,
            "type": "Identifier",
          },
          "init": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 1,
              },
              "start": Position {
                "column": 8,
                "line": 1,
              },
            },
            "properties": Array [
              Node {
                "computed": false,
                "end": 13,
                "key": Node {
                  "end": 10,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 10,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 9,
                      "line": 1,
                    },
                  },
                  "name": "a",
                  "start": 9,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 9,
                "type": "Property",
                "value": Node {
                  "end": 13,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 12,
                      "line": 1,
                    },
                  },
                  "raw": "1",
                  "start": 12,
                  "type": "Literal",
                  "value": 1,
                },
              },
              Node {
                "computed": false,
                "end": 19,
                "key": Node {
                  "end": 16,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 15,
                      "line": 1,
                    },
                  },
                  "name": "b",
                  "start": 15,
                  "type": "Identifier",
                },
                "kind": "init",
                "loc": SourceLocation {
                  "end": Position {
                    "column": 19,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 15,
                    "line": 1,
                  },
                },
                "method": false,
                "shorthand": false,
                "start": 15,
                "type": "Property",
                "value": Node {
                  "end": 19,
                  "loc": SourceLocation {
                    "end": Position {
                      "column": 19,
                      "line": 1,
                    },
                    "start": Position {
                      "column": 18,
                      "line": 1,
                    },
                  },
                  "raw": "2",
                  "start": 18,
                  "type": "Literal",
                  "value": 2,
                },
              },
            ],
            "start": 8,
            "type": "ObjectExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 4,
              "line": 1,
            },
          },
          "start": 4,
          "type": "VariableDeclarator",
        },
      ],
      "end": 21,
      "kind": "let",
      "loc": SourceLocation {
        "end": Position {
          "column": 21,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "declarations": Array [
        Node {
          "end": 37,
          "id": Node {
            "end": 31,
            "loc": SourceLocation {
              "end": Position {
                "column": 9,
                "line": 2,
              },
              "start": Position {
                "column": 6,
                "line": 2,
              },
            },
            "name": "key",
            "start": 28,
            "type": "Identifier",
          },
          "init": Node {
            "end": 37,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 2,
              },
              "start": Position {
                "column": 12,
                "line": 2,
              },
            },
            "raw": "'a'",
            "start": 34,
            "type": "Literal",
            "value": "a",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 15,
              "line": 2,
            },
            "start": Position {
              "column": 6,
              "line": 2,
            },
          },
          "start": 28,
          "type": "VariableDeclarator",
        },
      ],
      "end": 38,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 16,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 22,
      "type": "VariableDeclaration",
    },
    Node {
      "end": 50,
      "expression": Node {
        "end": 49,
        "left": Node {
          "computed": true,
          "end": 45,
          "loc": SourceLocation {
            "end": Position {
              "column": 6,
              "line": 3,
            },
            "start": Position {
              "column": 0,
              "line": 3,
            },
          },
          "object": Node {
            "end": 40,
            "loc": SourceLocation {
              "end": Position {
                "column": 1,
                "line": 3,
              },
              "start": Position {
                "column": 0,
                "line": 3,
              },
            },
            "name": "x",
            "start": 39,
            "type": "Identifier",
          },
          "property": Node {
            "end": 44,
            "loc": SourceLocation {
              "end": Position {
                "column": 5,
                "line": 3,
              },
              "start": Position {
                "column": 2,
                "line": 3,
              },
            },
            "name": "key",
            "start": 41,
            "type": "Identifier",
          },
          "start": 39,
          "type": "MemberExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 3,
          },
          "start": Position {
            "column": 0,
            "line": 3,
          },
        },
        "operator": "=",
        "right": Node {
          "end": 49,
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 3,
            },
            "start": Position {
              "column": 9,
              "line": 3,
            },
          },
          "raw": "3",
          "start": 48,
          "type": "Literal",
          "value": 3,
        },
        "start": 39,
        "type": "AssignmentExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 11,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 3,
        },
      },
      "start": 39,
      "type": "ExpressionStatement",
    },
  ],
  "end": 50,
  "loc": SourceLocation {
    "end": Position {
      "column": 11,
      "line": 3,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 33 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "variable_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "object_expression",
              Array [
                Array [
                  Array [
                    "key_value_pair",
                    Array [
                      Array [
                        "property",
                        Array [
                          "a",
                          null,
                        ],
                      ],
                      Array [
                        Array [
                          "literal",
                          Array [
                            1,
                            null,
                          ],
                        ],
                        null,
                      ],
                    ],
                  ],
                  Array [
                    Array [
                      "key_value_pair",
                      Array [
                        Array [
                          "property",
                          Array [
                            "b",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "literal",
                            Array [
                              2,
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                    null,
                  ],
                ],
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "constant_declaration",
          Array [
            Array [
              "name",
              Array [
                "key",
                null,
              ],
            ],
            Array [
              Array [
                "literal",
                Array [
                  "a",
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
        Array [
          Array [
            "object_assignment",
            Array [
              Array [
                "object_access",
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  Array [
                    Array [
                      "name",
                      Array [
                        "key",
                        null,
                      ],
                    ],
                    null,
                  ],
                ],
              ],
              Array [
                Array [
                  "literal",
                  Array [
                    3,
                    null,
                  ],
                ],
                null,
              ],
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 34 Test 1 chapter below 1`] = `"Line 1: Import default specifiers are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 34 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 39,
      "loc": SourceLocation {
        "end": Position {
          "column": 39,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "source": Node {
        "end": 38,
        "loc": SourceLocation {
          "end": Position {
            "column": 38,
            "line": 1,
          },
          "start": Position {
            "column": 26,
            "line": 1,
          },
        },
        "raw": "\\"one_module\\"",
        "start": 26,
        "type": "Literal",
        "value": "one_module",
      },
      "specifiers": Array [
        Node {
          "end": 20,
          "loc": SourceLocation {
            "end": Position {
              "column": 20,
              "line": 1,
            },
            "start": Position {
              "column": 7,
              "line": 1,
            },
          },
          "local": Node {
            "end": 20,
            "loc": SourceLocation {
              "end": Position {
                "column": 20,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "name": "defaultExport",
            "start": 7,
            "type": "Identifier",
          },
          "start": 7,
          "type": "ImportDefaultSpecifier",
        },
      ],
      "start": 0,
      "type": "ImportDeclaration",
    },
  ],
  "end": 39,
  "loc": SourceLocation {
    "end": Position {
      "column": 39,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 34 Test stdlib parser 1`] = `
Array [
  "import_declaration",
  Array [
    Array [
      Array [
        "default",
        null,
      ],
      null,
    ],
    Array [
      "one_module",
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 35 Test 1 chapter below 1`] = `"Line 1: Export default declarations are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 35 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declaration": Node {
        "body": Node {
          "body": Array [
            Node {
              "argument": Node {
                "end": 41,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 2,
                  },
                },
                "name": "x",
                "start": 40,
                "type": "Identifier",
              },
              "end": 42,
              "loc": SourceLocation {
                "end": Position {
                  "column": 11,
                  "line": 2,
                },
                "start": Position {
                  "column": 2,
                  "line": 2,
                },
              },
              "start": 33,
              "type": "ReturnStatement",
            },
          ],
          "end": 44,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 3,
            },
            "start": Position {
              "column": 29,
              "line": 1,
            },
          },
          "start": 29,
          "type": "BlockStatement",
        },
        "end": 44,
        "expression": false,
        "generator": false,
        "id": Node {
          "end": 25,
          "loc": SourceLocation {
            "end": Position {
              "column": 25,
              "line": 1,
            },
            "start": Position {
              "column": 24,
              "line": 1,
            },
          },
          "name": "f",
          "start": 24,
          "type": "Identifier",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 15,
            "line": 1,
          },
        },
        "params": Array [
          Node {
            "end": 27,
            "loc": SourceLocation {
              "end": Position {
                "column": 27,
                "line": 1,
              },
              "start": Position {
                "column": 26,
                "line": 1,
              },
            },
            "name": "x",
            "start": 26,
            "type": "Identifier",
          },
        ],
        "start": 15,
        "type": "FunctionDeclaration",
      },
      "end": 44,
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "ExportDefaultDeclaration",
    },
    Node {
      "end": 50,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 48,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 4,
              },
              "start": Position {
                "column": 2,
                "line": 4,
              },
            },
            "raw": "5",
            "start": 47,
            "type": "Literal",
            "value": 5,
          },
        ],
        "callee": Node {
          "end": 46,
          "loc": SourceLocation {
            "end": Position {
              "column": 1,
              "line": 4,
            },
            "start": Position {
              "column": 0,
              "line": 4,
            },
          },
          "name": "f",
          "start": 45,
          "type": "Identifier",
        },
        "end": 49,
        "loc": SourceLocation {
          "end": Position {
            "column": 4,
            "line": 4,
          },
          "start": Position {
            "column": 0,
            "line": 4,
          },
        },
        "start": 45,
        "type": "CallExpression",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "start": 45,
      "type": "ExpressionStatement",
    },
  ],
  "end": 50,
  "loc": SourceLocation {
    "end": Position {
      "column": 5,
      "line": 4,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 35 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "export_default_declaration",
        Array [
          Array [
            "function_declaration",
            Array [
              Array [
                "name",
                Array [
                  "f",
                  null,
                ],
              ],
              Array [
                Array [
                  Array [
                    "name",
                    Array [
                      "x",
                      null,
                    ],
                  ],
                  null,
                ],
                Array [
                  Array [
                    "return_statement",
                    Array [
                      Array [
                        "name",
                        Array [
                          "x",
                          null,
                        ],
                      ],
                      null,
                    ],
                  ],
                  null,
                ],
              ],
            ],
          ],
          null,
        ],
      ],
      Array [
        Array [
          "application",
          Array [
            Array [
              "name",
              Array [
                "f",
                null,
              ],
            ],
            Array [
              Array [
                Array [
                  "literal",
                  Array [
                    5,
                    null,
                  ],
                ],
                null,
              ],
              null,
            ],
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 36 Test 1 chapter below 1`] = `"Line 2: Export default declarations are not allowed"`;

exports[`Syntaxes are allowed in the chapter they are introduced 36 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "declarations": Array [
        Node {
          "end": 11,
          "id": Node {
            "end": 7,
            "loc": SourceLocation {
              "end": Position {
                "column": 7,
                "line": 1,
              },
              "start": Position {
                "column": 6,
                "line": 1,
              },
            },
            "name": "x",
            "start": 6,
            "type": "Identifier",
          },
          "init": Node {
            "end": 11,
            "loc": SourceLocation {
              "end": Position {
                "column": 11,
                "line": 1,
              },
              "start": Position {
                "column": 10,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 10,
            "type": "Literal",
            "value": 1,
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 11,
              "line": 1,
            },
            "start": Position {
              "column": 6,
              "line": 1,
            },
          },
          "start": 6,
          "type": "VariableDeclarator",
        },
      ],
      "end": 12,
      "kind": "const",
      "loc": SourceLocation {
        "end": Position {
          "column": 12,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "start": 0,
      "type": "VariableDeclaration",
    },
    Node {
      "declaration": Node {
        "end": 29,
        "loc": SourceLocation {
          "end": Position {
            "column": 16,
            "line": 2,
          },
          "start": Position {
            "column": 15,
            "line": 2,
          },
        },
        "name": "x",
        "start": 28,
        "type": "Identifier",
      },
      "end": 30,
      "loc": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "start": 13,
      "type": "ExportDefaultDeclaration",
    },
    Node {
      "end": 33,
      "expression": Node {
        "end": 32,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 0,
            "line": 3,
          },
        },
        "name": "x",
        "start": 31,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 2,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 3,
        },
      },
      "start": 31,
      "type": "ExpressionStatement",
    },
  ],
  "end": 33,
  "loc": SourceLocation {
    "end": Position {
      "column": 2,
      "line": 3,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 36 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "constant_declaration",
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          Array [
            Array [
              "literal",
              Array [
                1,
                null,
              ],
            ],
            null,
          ],
        ],
      ],
      Array [
        Array [
          "export_default_declaration",
          Array [
            Array [
              "name",
              Array [
                "x",
                null,
              ],
            ],
            null,
          ],
        ],
        Array [
          Array [
            "name",
            Array [
              "x",
              null,
            ],
          ],
          null,
        ],
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 37 Test 1 chapter below 1`] = `"Line 4: Export default declarations are not allowed."`;

exports[`Syntaxes are allowed in the chapter they are introduced 37 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "body": Node {
        "body": Array [
          Node {
            "argument": Node {
              "end": 35,
              "left": Node {
                "end": 31,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 2,
                  },
                },
                "name": "x",
                "start": 30,
                "type": "Identifier",
              },
              "loc": SourceLocation {
                "end": Position {
                  "column": 14,
                  "line": 2,
                },
                "start": Position {
                  "column": 9,
                  "line": 2,
                },
              },
              "operator": "*",
              "right": Node {
                "end": 35,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 14,
                    "line": 2,
                  },
                  "start": Position {
                    "column": 13,
                    "line": 2,
                  },
                },
                "name": "x",
                "start": 34,
                "type": "Identifier",
              },
              "start": 30,
              "type": "BinaryExpression",
            },
            "end": 36,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 2,
              },
              "start": Position {
                "column": 2,
                "line": 2,
              },
            },
            "start": 23,
            "type": "ReturnStatement",
          },
        ],
        "end": 38,
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 3,
          },
          "start": Position {
            "column": 19,
            "line": 1,
          },
        },
        "start": 19,
        "type": "BlockStatement",
      },
      "end": 38,
      "expression": false,
      "generator": false,
      "id": Node {
        "end": 15,
        "loc": SourceLocation {
          "end": Position {
            "column": 15,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "name": "square",
        "start": 9,
        "type": "Identifier",
      },
      "loc": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 3,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "params": Array [
        Node {
          "end": 17,
          "loc": SourceLocation {
            "end": Position {
              "column": 17,
              "line": 1,
            },
            "start": Position {
              "column": 16,
              "line": 1,
            },
          },
          "name": "x",
          "start": 16,
          "type": "Identifier",
        },
      ],
      "start": 0,
      "type": "FunctionDeclaration",
    },
    Node {
      "declaration": null,
      "end": 68,
      "loc": SourceLocation {
        "end": Position {
          "column": 29,
          "line": 4,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "source": null,
      "specifiers": Array [
        Node {
          "end": 65,
          "exported": Node {
            "end": 65,
            "loc": SourceLocation {
              "end": Position {
                "column": 26,
                "line": 4,
              },
              "start": Position {
                "column": 19,
                "line": 4,
              },
            },
            "name": "default",
            "start": 58,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 26,
              "line": 4,
            },
            "start": Position {
              "column": 9,
              "line": 4,
            },
          },
          "local": Node {
            "end": 54,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 4,
              },
              "start": Position {
                "column": 9,
                "line": 4,
              },
            },
            "name": "square",
            "start": 48,
            "type": "Identifier",
          },
          "start": 48,
          "type": "ExportSpecifier",
        },
      ],
      "start": 39,
      "type": "ExportNamedDeclaration",
    },
  ],
  "end": 68,
  "loc": SourceLocation {
    "end": Position {
      "column": 29,
      "line": 4,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 37 Test stdlib parser 1`] = `
Array [
  "sequence",
  Array [
    Array [
      Array [
        "function_declaration",
        Array [
          Array [
            "name",
            Array [
              "square",
              null,
            ],
          ],
          Array [
            Array [
              Array [
                "name",
                Array [
                  "x",
                  null,
                ],
              ],
              null,
            ],
            Array [
              Array [
                "return_statement",
                Array [
                  Array [
                    "binary_operator_combination",
                    Array [
                      "*",
                      Array [
                        Array [
                          "name",
                          Array [
                            "x",
                            null,
                          ],
                        ],
                        Array [
                          Array [
                            "name",
                            Array [
                              "x",
                              null,
                            ],
                          ],
                          null,
                        ],
                      ],
                    ],
                  ],
                  null,
                ],
              ],
              null,
            ],
          ],
        ],
      ],
      Array [
        Array [
          "export_named_declaration",
          Array [
            Array [
              Array [
                "name",
                Array [
                  "default",
                  null,
                ],
              ],
            ],
            null,
          ],
        ],
        null,
      ],
    ],
    null,
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 38 Test 1 chapter below 1`] = `"Line 1: Import default specifiers are not allowed."`;

exports[`Syntaxes are allowed in the chapter they are introduced 38 Test regular parser 1`] = `
Node {
  "body": Array [
    Node {
      "end": 42,
      "loc": SourceLocation {
        "end": Position {
          "column": 42,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "source": Node {
        "end": 41,
        "loc": SourceLocation {
          "end": Position {
            "column": 41,
            "line": 1,
          },
          "start": Position {
            "column": 29,
            "line": 1,
          },
        },
        "raw": "'one_module'",
        "start": 29,
        "type": "Literal",
        "value": "one_module",
      },
      "specifiers": Array [
        Node {
          "end": 21,
          "imported": Node {
            "end": 16,
            "loc": SourceLocation {
              "end": Position {
                "column": 16,
                "line": 1,
              },
              "start": Position {
                "column": 9,
                "line": 1,
              },
            },
            "name": "default",
            "start": 9,
            "type": "Identifier",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 21,
              "line": 1,
            },
            "start": Position {
              "column": 9,
              "line": 1,
            },
          },
          "local": Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "name": "x",
            "start": 20,
            "type": "Identifier",
          },
          "start": 9,
          "type": "ImportSpecifier",
        },
      ],
      "start": 0,
      "type": "ImportDeclaration",
    },
  ],
  "end": 42,
  "loc": SourceLocation {
    "end": Position {
      "column": 42,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`Syntaxes are allowed in the chapter they are introduced 38 Test stdlib parser 1`] = `
Array [
  "import_declaration",
  Array [
    Array [
      Array [
        "name",
        Array [
          "default",
          null,
        ],
      ],
      null,
    ],
    Array [
      "one_module",
      null,
    ],
  ],
]
`;

exports[`Syntaxes are allowed in the chapter they are introduced 39 Test 1 chapter below 1`] = `"Line 1: Namespace imports are not allowed"`;
