// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`primitive opcodes binary handler: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(math_pow(2,3));",
  "displayResult": Array [
    "8",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes concurrent CLEAR fails for ill-typed arguments: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "clear(1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected array, got number for clear.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected array, got number for clear.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes concurrent CLEAR works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = list(true);
display(head(x));
clear(x);
display(head(x));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes concurrent TEST_AND_SET fails for ill-typed arguments: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "test_and_set(1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected array, got number for test_and_set.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected array, got number for test_and_set.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes concurrent TEST_AND_SET works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = list(false);
display(head(x));
test_and_set(x);
display(head(x));",
  "displayResult": Array [
    "false",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes math constants: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(Infinity);
display(NaN);",
  "displayResult": Array [
    "Infinity",
    "NaN",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented ARRAY_LEN fails for ill-typed argument: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "array_length(1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected array, got number for array_length.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected array, got number for array_length.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented ARRAY_LEN works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const arr = [];
const arr1 = [1,2,3];
const p = pair(1,2);
display(array_length(arr));
display(array_length(arr1));
arr[100] = 100;
display(array_length(arr));
display(array_length(p));",
  "displayResult": Array [
    "0",
    "3",
    "101",
    "2",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented ERROR works: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "error(123);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: 123],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: 123",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_ARRAY works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_array([1,2]));
display(is_array(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_BOOL works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_boolean(true));
display(is_boolean(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_FUNC works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_function(() => {}));
display(is_function(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_NULL works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_null(null));
display(is_null(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_NUMBER works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_number(1));
display(is_number(false));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_STRING works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_string(\\"string\\"));
display(is_string(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented IS_UNDEFINED works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(is_undefined(undefined));
display(is_undefined(1));",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented MATH_HYPOT works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(math_hypot(3,4));",
  "displayResult": Array [
    "5",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented list works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(list(1,2,3,4));",
  "displayResult": Array [
    "[1, [2, [3, [4, null]]]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes self-implemented stream_tail fails for ill-typed arguments: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "stream_tail(1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: "stream_tail(xs) expects a pair as argument xs, but encountered 1"],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: \\"stream_tail(xs) expects a pair as argument xs, but encountered 1\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`primitive opcodes unary handler: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(math_abs(-1));",
  "displayResult": Array [
    "1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes ADDG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1+undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected string and string or number and number, got number and undefined for +.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected string and string or number and number, got number and undefined for +.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes ADDG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(-1+1);",
  "displayResult": Array [
    "0",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes ADDG works for strings: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(\\"first\\"+\\"second\\");",
  "displayResult": Array [
    "\\"firstsecond\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes BRF works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (true) {
  display('did not BRF');
} else {}
if (false) {} else {
  display('BRF');
}",
  "displayResult": Array [
    "\\"did not BRF\\"",
    "\\"BRF\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes DIVG fails for division by 0: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "128/0;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: division by 0],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: division by 0",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes DIVG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1/undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number and number, got number and undefined for /.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number and number, got number and undefined for /.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes DIVG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(128/32);",
  "displayResult": Array [
    "4",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes EQG works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = [1,2];
const f = () => {};
const y = test_and_set;
const z = list;
display(undefined === undefined &&
null === null &&
null !== undefined &&
true === true &&
false === false &&
false !== true &&
1 === 1 &&
-1 === -1 &&
x !== [1,2] &&
x === x &&
f === f &&
f !== (() => {}) &&
'stringa' === 'stringa' &&
'stringa' !== 'stringb' &&
true !== null &&
y !== z &&
z === list &&
y === test_and_set &&
0 !== \\"0\\");",
  "displayResult": Array [
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GEG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1>=undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected string and string or number and number, got number and undefined for >=.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected string and string or number and number, got number and undefined for >=.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GEG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(5 >= 10);
display(5 >= 5);
display(10 >= 5);",
  "displayResult": Array [
    "false",
    "true",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GEG works for numbers: expectDisplayResult 2`] = `
Object {
  "alertResult": Array [],
  "code": "display('abc' >= 'bcd');
display('abc' >= 'abc');
display('bcd' >= 'abc');",
  "displayResult": Array [
    "false",
    "true",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GTG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1>undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected string and string or number and number, got number and undefined for >.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected string and string or number and number, got number and undefined for >.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GTG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(5 > 10); display(10 > 5);",
  "displayResult": Array [
    "false",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes GTG works for strings: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(\\"abc\\" > \\"bcd\\"); display(\\"bcd\\" > \\"abc\\");",
  "displayResult": Array [
    "false",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LDAG fails for ill-typed argument: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const arr = []; arr[\\"hi\\"];",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number, got string for array index.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number, got string for array index.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LDAG fails for non-array: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1[0];",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected array, got number for array access.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected array, got number for array access.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LDPG and STPG work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 1;
display(x);
function f() {
  x = 3;
}
f();
display(x);",
  "displayResult": Array [
    "1",
    "3",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LEG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1<=undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected string and string or number and number, got number and undefined for <=.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected string and string or number and number, got number and undefined for <=.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LEG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(5 <= 10);
display(5 <= 5);
display(10 <= 5);",
  "displayResult": Array [
    "true",
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LEG works for strings: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display('abc' <= 'bcd');
display('abc' <= 'abc');
display('bcd' <= 'abc');",
  "displayResult": Array [
    "true",
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCB0 works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(false);",
  "displayResult": Array [
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCB1 works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(true);",
  "displayResult": Array [
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCF64 works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(1.5);",
  "displayResult": Array [
    "1.5",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCI works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(123);",
  "displayResult": Array [
    "123",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCN works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(null);",
  "displayResult": Array [
    "null",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCS works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(\\"test string\\");",
  "displayResult": Array [
    "\\"test string\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LGCU works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(undefined);",
  "displayResult": Array [
    "undefined",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LTG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1<undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected string and string or number and number, got number and undefined for <.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected string and string or number and number, got number and undefined for <.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LTG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(5 < 10); display(10 < 5);",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes LTG works for strings: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(\\"abc\\" < \\"bcd\\"); display(\\"bcd\\" < \\"abc\\");",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes MODG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1%undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected undefined, got undefined for undefined.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected undefined, got undefined for undefined.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes MODG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(128%31);",
  "displayResult": Array [
    "4",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes MULG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1*undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number and number, got number and undefined for *.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number and number, got number and undefined for *.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes MULG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(123*2);",
  "displayResult": Array [
    "246",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes NEGG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "-\\"hi\\";",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number, got string for -.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number, got string for -.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes NEGG works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(-1);display(-(-1));",
  "displayResult": Array [
    "-1",
    "1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes NOTG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "!1;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected boolean, got number for !.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected boolean, got number for !.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes NOTG works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(!false);display(!true);",
  "displayResult": Array [
    "true",
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes STAG fails for ill-typed argument: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const arr = []; arr[\\"hi\\"] = 1;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number, got string for array index.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number, got string for array index.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes STAG fails for non-array: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "0[1] = 1;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected array, got number for array access.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected array, got number for array access.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes STLG and LDLG works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = 1; display(x);",
  "displayResult": Array [
    "1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes SUBG fails for ill-typed operands: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "1-undefined;",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected number and number, got number and undefined for -.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected number and number, got number and undefined for -.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes SUBG works for numbers: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(123-124);",
  "displayResult": Array [
    "-1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes array opcodes work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = [1,2,,1]; display(x[1]); display(x[8]);",
  "displayResult": Array [
    "2",
    "undefined",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes function and function calls work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) {
  display(x);
  return 1;
}
display(f(3));
display(f);",
  "displayResult": Array [
    "3",
    "1",
    "\\"<Function>\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard opcodes while loops works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 0;
const y = 'before NEWENV';
display(y);
while (x < 1) {
  const y = 'after NEWENV';
  display(y);
  x = x + 1;
  display('before BR');
}
display('after POPENV');
display('after BR');",
  "displayResult": Array [
    "\\"before NEWENV\\"",
    "\\"after NEWENV\\"",
    "\\"before BR\\"",
    "\\"after POPENV\\"",
    "\\"after BR\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution arrow function definitions work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = x => {
  display(x);
  return 1;
};
const g = x => display(x);
f(3);
g(true);",
  "displayResult": Array [
    "3",
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution block scoping works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = 1;
function f(y) {
  display(-x);
}
{
  const x = 2;
  function f(y) {
    display(-x);
  }
  {
    const x = 3;
    if (true) {
      display(x);
    } else {
      error('should not reach here');
    }
    display(x);
    f(1);
  }
  display(x);
}
display(x);",
  "displayResult": Array [
    "3",
    "3",
    "-2",
    "2",
    "1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution call non function value throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let x = 0; x(1,2);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: calling non-function value 0.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: calling non-function value 0.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution closures declared in for loops work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "let f = null;
f = () => { display(-1); };
for(let i = 0; i < 5; i = i + 1) {
  if (i === 3) {
    f = () => { display(i); };
  } else {}
}
f();",
  "displayResult": Array [
    "3",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution const assignment throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = 1;
x = 2;",
  "displayResult": Array [],
  "errors": Array [
    ConstAssignment {
      "location": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 2,
        },
        "start": Position {
          "column": 0,
          "line": 2,
        },
      },
      "name": "x",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 2: Cannot assign new value to constant x.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution continue and break works: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "while(true) {
  break;
  display(1);
}
let i = 0;
for (i; i < 2; i = i + 1) {
  if (i === 1) {
    continue;
  } else {
    display(i);
  }
}",
  "displayResult": Array [
    "0",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution list functions work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function permutations(xs) {
    return is_null(xs)
           ? list(null)
           : accumulate(append,
                        null,
                        map(x => map(p => pair(x, p),
                                     permutations(remove(x,xs))),
                            xs));
}

display(permutations(list(1,2,3)));",
  "displayResult": Array [
    "[ [1, [2, [3, null]]],
[ [1, [3, [2, null]]],
[ [2, [1, [3, null]]],
[[2, [3, [1, null]]], [[3, [1, [2, null]]], [[3, [2, [1, null]]], null]]] ] ] ]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution logical operators work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "display(!(true && (false || (true && !false))));",
  "displayResult": Array [
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution program always returns all threads terminated: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "1 + 1;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution program times out: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "while(true) {}",
  "displayResult": Array [],
  "errors": Array [
    PotentialInfiniteLoopError {
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Potential infinite loop detected.
    If you are certain your program is correct, press run again without editing your program.
      The time limit will be increased from 1 to 10 seconds.
      This page may be unresponsive for up to 10 seconds if you do so.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution return in loop throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
  while(true) {
    return 1;
  }
}
f();",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: return not allowed in loops],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: return not allowed in loops",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution stream functions work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function interleave_stream_append(s1,s2) {
  return is_null(s1)
         ? s2
         : pair(head(s1), () => interleave_stream_append(s2,
                                  stream_tail(s1)));
}

function stream_pairs(s) {
    return (is_null(s) || is_null(stream_tail(s)))
           ? null
           : pair(pair(head(s), head(stream_tail(s))),
                  () => interleave_stream_append(
                            stream_map(x => pair(head(s), x),
                                       stream_tail(stream_tail(s))),
                        stream_pairs(stream_tail(s))));
}

const ints = integers_from(1);
const s = stream_pairs(ints);
display(eval_stream(s, 10));",
  "displayResult": Array [
    "[ [1, 2],
[ [1, 3],
[ [2, 3],
[[1, 4], [[2, 4], [[1, 5], [[3, 4], [[1, 6], [[2, 5], [[1, 7], null]]]]]]] ] ] ]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution tail call for internal functions work: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
  return test_and_set(list(true));
}
display(f());",
  "displayResult": Array [
    "true",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution treat internal functions as first-class: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = test_and_set;
const xs = list(false);
display(x(xs));",
  "displayResult": Array [
    "false",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution treat primitive functions as first-class: expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = list;
display(x(1,2));",
  "displayResult": Array [
    "[1, [2, null]]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": "all threads terminated",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution wrong number of arguments for internal functions throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const x = list(false);
test_and_set(x, 1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected 1 arguments, but got 2.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected 1 arguments, but got 2.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution wrong number of arguments for normal functions throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "((x, y) => 1)(1);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected 2 arguments, but got 1.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected 2 arguments, but got 1.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`standard program execution wrong number of arguments for primitive functions throws error: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "math_sin(1,2);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: execution aborted: Expected 1 arguments, but got 2.],
      "location": Object {
        "end": Object {
          "column": -1,
          "line": -1,
        },
        "start": Object {
          "column": -1,
          "line": -1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line -1: Error: execution aborted: Expected 1 arguments, but got 2.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;
