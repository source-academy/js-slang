#+LATEX_HEADER: \newcommand{\qed}{$\Box$}
#+LATEX_HEADER: \newcommand{\Rule}[2]{\genfrac{}{}{0.7pt}{}{{\setlength{\fboxrule}{0pt}\setlength{\fboxsep}{3mm}\fbox{$#1$}}}{{\setlength{\fboxrule}{0pt}\setlength{\fboxsep}{3mm}\fbox{$#2$}}}}
#+LATEX_HEADER: \newcommand{\Rulee}[3]{\genfrac{}{}{0.7pt}{}{{\setlength{\fboxrule}{0pt}\setlength{\fboxsep}{3mm}\fbox{$#1$}}}{{\setlength{\fboxrule}{0pt}\setlength{\fboxsep}{3mm}\fbox{$#2$}}}[#3]}
#+LATEX_HEADER: \newcommand{\transition}{\rightrightarrows_s}
#+LATEX_HEADER: \newcommand{\translate}{\twoheadrightarrow}
#+LATEX_HEADER: \newcommand{\translateaux}{\hookrightarrow}

** Overview
This concurrent system consists of concurrently executing (potentially multiple) code in multiple threads. Communication between threads is achieved by updating the values of memory shared between threads. Each thread is a nullary function, so the concurrent system executes each thread by running the code in the body of the nullary function.

The design of this system is inspired by [[https://doi.org/10.1007/978-1-4757-3472-0_2][Dijkstra's =cobegin= / =coend= constructs]], of which a good overview and comparison with =fork= / =join= can be found in section 7.2.2 of [[https://doi.org/10.1145/359576.359585][Hoare's Communicating Sequential Processes]].

However, this design departs from Dijkstra's constructs, as the system does not execute parallel threads. Instead, it executes concurrent threads.

** Usage
This concurrent system provides three primitive functions:
0. $\texttt{concurrent\_execute}(f_1, \cdots ,f_n)$, where $f_1, \cdots ,f_n$ are nullary functions.
0. $\texttt{test\_and\_set}(l)$, where $l$ is a list, whose head is a boolean.
0. $\texttt{clear}(l)$, where $l$ is a list, whose head is a boolean.

An example using these three functions is:
#+BEGIN_SRC
let x = 0;
let y = 0;
function make_mutex() {
    const cell = list(false);
    function the_mutex(m) {
        return m === "acquire"
               ? (test_and_set(cell)
                 ? the_mutex("acquire")
                 : true )
               : m === "release"
                 ? clear(cell)
                 : error("Unknown request in mutex", m); }
    return the_mutex;
}
const m = make_mutex();

function f() {
    for (let i = 0; i < 100; i = i + 1) {
        m("acquire");
        x = x + 1;
        m("release");
    }
}

function g() {
    for (let i = 0; i < 100; i = i + 1) {
        y = y + 1;
    }
}

concurrent_execute(f, f, f);
concurrent_execute(g, g, g);
display(x);
display(y);
#+END_SRC

** $\texttt{EXECUTE}$ Rules

*** Notes
0. for simplicity, heap is not represented in the rules
0. $g$ represents garbage value: its value is not important to the rule

*** Compiling
$\Rule{E_1 \translateaux s_1 \qquad \cdots \qquad E_n \translateaux s_n}{\texttt{concurrent\_execute}(E_1, \cdots , E_n) \translateaux s_1. \cdots .s_n.\texttt{EXECUTE n}}\\$
Each of $s_1. \cdots .s_n$ is a string of VM instruction that loads a closure onto the operand stack.

*** Running
There are additional structures in our VM:
0. $\textit{tq}$, a register which is a queue of thread suspensions
0. $\textit{to}$, a register initialized with $0$, that indicates how many instructions are left for a thread to run
0. $\textit{seq}$, a register initialized with $\langle \rangle$, that represents an empty sequential runtime stack. When entering the concurrent context, $\textit{os}$, $\textit{pc}$, $\textit{e}$, and $\textit{rs}$ are copied onto $\textit{seq}$, and when exiting the concurrent context, they are popped from $\textit{seq}$.
The tuple representing our VM will have three more corresponding structures:
$(\textit{os}, \textit{pc}, \textit{e}, \textit{rs}, \textit{tq}, \textit{to}, \textit{seq})\\$

**** Starting $\texttt{EXECUTE}$, loading thread frames into register $\textit{tq}$
$\Rule{s(\textit{pc}) = \texttt{EXECUTE} n}{(\textit{os}, \textit{pc}, \textit{e}, \textit{rs}, \langle \rangle, 0, \langle \rangle) \transition (g, \langle \rangle, g, g, ((\langle \rangle, \textit{pc}_1, \textit{e}_1).\langle \rangle). \cdots .((\langle \rangle, \textit{pc}_n, \textit{e}_n).\langle \rangle), 0, (\textit{os}, \textit{pc}, \textit{e}).\textit{rs})}\\$
Each thread is a four-tuple of $\textit{os}$, $\textit{pc}$, $\textit{e}$, and $\textit{rs}$. Initially, threads have empty $\textit{os}$ and empty $\textit{rs}$. Note the transition from empty $\textit{seq}$ to nonempty $\textit{seq}$: this disambiguates concurrent execution rules from sequential execution rules, so that we know we are executing in the concurrent context.

**** Beginning thread execution
$\Rule{}{(g, \langle \rangle, g, g, ((\textit{os}, \textit{pc}, \textit{e}).\textit{trs}).\textit{tq}, 0, \textit{seq}) \transition (\textit{os}, \textit{pc}, \textit{e}, \textit{rs}, \textit{tq}, c, \textit{seq})}\\$
where $c$ is a constant timeout value. Note: $\textit{pc}$ is $\langle \rangle$ to disambiguate this rule from the thread timeout rule.

**** Running thread
$\Rule{s(\textit{pc}) \neq \texttt{RET} \qquad \textit{to} \ge 0}{(\textit{os}, \textit{pc}, \textit{e}, \textit{trs}, \textit{tq}, \textit{to}, \textit{seq}) \transition (\textit{os'}, \textit{pc'}, \textit{e'}, \textit{trs'}, \textit{tq}, \textit{to}-1, \textit{seq})}\\$
where the primed values are just like normal VM code execution.

**** Running thread, returning from function
$\Rule{s(\textit{pc}) = \texttt{RET} \qquad \textit{to} \ge 0 \qquad \textit{trs} \neq \langle \rangle}{(\textit{os}, \textit{pc}, \textit{e}, \textit{trs}, \textit{tq}, \textit{to}, \textit{seq}) \transition (\textit{os'}, \textit{pc'}, \textit{e'}, \textit{trs'}, \textit{tq}, \textit{to}-1, \textit{seq})}\\$
where the primed values are just like normal VM code execution. Note: the thread may execute the =RET= statement inside a function, and the thread does the normal thing of popping =trs= and so on.

**** Thread timeout
$\Rule{}{(\textit{os}, \textit{pc}, \textit{e}, \textit{trs}, \textit{tq}, 0, \textit{seq}) \transition (g, \langle \rangle, g, g, \textit{tq}.((\textit{os}, \textit{pc}, \textit{e}).\textit{trs}), 0, \textit{seq})}\\$
When a thread times out and has not finished execution (has not executed the =RET= statement), then it is queued on the thread queue.

**** Returning from thread
$\Rule{s(\textit{pc}) = \texttt{RET} \qquad \textit{to} \ge 0 \qquad \textit{trs} = \langle \rangle}{(\textit{os}, \textit{pc}, \textit{e}, \textit{rs}, \langle \rangle, 0, \langle \rangle) \transition (g, \langle \rangle, g, g, \textit{tq}, 0, \textit{seq})}\\$
When a thread executes the $\texttt{RET}$ statement, and there are no more thread runtime stacks, the thread is not added back to the thread queue,

**** Ending $\texttt{EXECUTE}$
$\Rule{}{(g, \langle \rangle, g, g, \langle \rangle, 0, (\textit{os}, \textit{pc}, \textit{e}).\textit{rs}) \transition (\textit{os}, \textit{pc}, \textit{e}, \textit{rs}, \langle \rangle, 0, \langle \rangle)}\\$
When the thread queue is empty, we restore normal sequential execution.

** $\texttt{TEST\_AND\_SET}$ and $\texttt{CLEAR}$ Rules

*** Notes
0. for simplicity, $\textit{e}$, $\textit{rs}$, $\textit{p}$, $\textit{n}$ and $\textit{seq}$ registers, and heap are not represented in the rules
0. $\textit{test\_and\_set}$ is an atomic operation

*** Compiling
$\Rule{E \translateaux s}{\texttt{test\_and\_set}(E) \translateaux s.\texttt{TEST\_AND\_SET}}\\$
where $E$ is a list, whose head is a boolean.

$\Rule{E \translateaux s}{\texttt{clear}(E) \translateaux s.\texttt{CLEAR}}\\$
where $E$ is a list, whose head is a boolean.

*** Running
$\Rule{s(\textit{pc}) = \texttt{TEST\_AND\_SET}}{(p.\textit{os},\textit{pc}) \transition (b.\textit{os},\textit{pc} + 1)}\\$
where $p$ is the address of a list stored on the heap. The head of this list is initially $b$, where $b$ is a boolean. After this rule executes, the head of this list is set to $\textit{true}$.

$\Rule{s(\textit{pc}) = \texttt{CLEAR}}{(p.\textit{os},\textit{pc}) \transition (\textit{os},\textit{pc} + 1)}\\$
where $p$ is the address of a list stored on the heap. The head of this list is updated to $\textit{false}$.
