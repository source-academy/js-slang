// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Alpha renaming Avoiding naming conflicts 1`] = `
"const f = (x_1, x_3, x_2) => g();const g = () => x_1 + x_3 + x_2;const x_1 = 1;const x_3 = 3;const x_2 = 2;f(0, 1, 2);
[noMarker] Start of evaluation

const f = (x_1, x_3, x_2) => g();const g = () => x_1 + x_3 + x_2;const x_1 = 1;const x_3 = 3;const x_2 = 2;f(0, 1, 2);
[beforeMarker] Constant f declared and substituted into the rest of block

const g = () => x_1 + x_3 + x_2;const x_1 = 1;const x_3 = 3;const x_2 = 2;((x_1, x_3, x_2) => g())(0, 1, 2);
[afterMarker] Constant f declared and substituted into the rest of block

const g = () => x_1 + x_3 + x_2;const x_1 = 1;const x_3 = 3;const x_2 = 2;((x_1, x_3, x_2) => g())(0, 1, 2);
[beforeMarker] Constant g declared and substituted into the rest of block

const x_1 = 1;const x_3 = 3;const x_2 = 2;((x2, x4, x3) => (() => x_1 + x_3 + x_2)())(0, 1, 2);
[afterMarker] Constant g declared and substituted into the rest of block

const x_1 = 1;const x_3 = 3;const x_2 = 2;((x2, x4, x3) => (() => x_1 + x_3 + x_2)())(0, 1, 2);
[beforeMarker] Constant x_1 declared and substituted into the rest of block

const x_3 = 3;const x_2 = 2;((x2, x4, x3) => (() => 1 + x_3 + x_2)())(0, 1, 2);
[afterMarker] Constant x_1 declared and substituted into the rest of block

const x_3 = 3;const x_2 = 2;((x2, x4, x3) => (() => 1 + x_3 + x_2)())(0, 1, 2);
[beforeMarker] Constant x_3 declared and substituted into the rest of block

const x_2 = 2;((x2, x4, x3) => (() => 1 + 3 + x_2)())(0, 1, 2);
[afterMarker] Constant x_3 declared and substituted into the rest of block

const x_2 = 2;((x2, x4, x3) => (() => 1 + 3 + x_2)())(0, 1, 2);
[beforeMarker] Constant x_2 declared and substituted into the rest of block

((x2, x4, x3) => (() => 1 + 3 + 2)())(0, 1, 2);
[afterMarker] Constant x_2 declared and substituted into the rest of block

((x2, x4, x3) => (() => 1 + 3 + 2)())(0, 1, 2);
[beforeMarker] 0, 1, 2 substituted into x2, x4, x3 of (x2, x4, x3) => (() => 1 + 3 + 2)()

(() => 1 + 3 + 2)();
[afterMarker] 0, 1, 2 substituted into x2, x4, x3 of (x2, x4, x3) => (() => 1 + 3 + 2)()

(() => 1 + 3 + 2)();
[beforeMarker] () => 1 + 3 + 2 runs

1 + 3 + 2;
[afterMarker] () => 1 + 3 + 2 runs

1 + 3 + 2;
[beforeMarker] Binary expression 1 + 3 evaluated

4 + 2;
[afterMarker] Binary expression 1 + 3 evaluated

4 + 2;
[beforeMarker] Binary expression 4 + 2 evaluated

6;
[afterMarker] Binary expression 4 + 2 evaluated

6;
[noMarker] Evaluation complete
"
`;

exports[`Alpha renaming Basic 1`] = `
"const f = x => g();const g = () => x;const x = 1;f(0);
[noMarker] Start of evaluation

const f = x => g();const g = () => x;const x = 1;f(0);
[beforeMarker] Constant f declared and substituted into the rest of block

const g = () => x;const x = 1;(x => g())(0);
[afterMarker] Constant f declared and substituted into the rest of block

const g = () => x;const x = 1;(x => g())(0);
[beforeMarker] Constant g declared and substituted into the rest of block

const x = 1;(x_1 => (() => x)())(0);
[afterMarker] Constant g declared and substituted into the rest of block

const x = 1;(x_1 => (() => x)())(0);
[beforeMarker] Constant x declared and substituted into the rest of block

(x_1 => (() => 1)())(0);
[afterMarker] Constant x declared and substituted into the rest of block

(x_1 => (() => 1)())(0);
[beforeMarker] 0 substituted into x_1 of x_1 => (() => 1)()

(() => 1)();
[afterMarker] 0 substituted into x_1 of x_1 => (() => 1)()

(() => 1)();
[beforeMarker] () => 1 runs

1;
[afterMarker] () => 1 runs

1;
[noMarker] Evaluation complete
"
`;

exports[`Expressions No extra step for UnaryExpression 1`] = `
"-(1 + 2);
[noMarker] Start of evaluation
-(1 + 2);
[beforeMarker] Binary expression 1 + 2 evaluated
-3;
[afterMarker] Binary expression 1 + 2 evaluated
-3;
[noMarker] Evaluation complete
"
`;

exports[`Function declaration with if else block 1`] = `
"function f() { const x = 2; if (true) { 5 + x; return 2; } else {}}f();
[noMarker] Start of evaluation

function f() { const x = 2; if (true) { 5 + x; return 2; } else {}}f();
[beforeMarker] Function f declared, parameter(s)  required

(() => { const x = 2; if (true) { 5 + x; return 2; } else {}})();
[afterMarker] Function f declared, parameter(s)  required

(() => { const x = 2; if (true) { 5 + x; return 2; } else {}})();
[beforeMarker] () => {...} runs

{ const x = 2; if (true) { 5 + x; return 2; } else {}};
[afterMarker] () => {...} runs

{ const x = 2; if (true) { 5 + x; return 2; } else {}};
[beforeMarker] Constant x declared and substituted into the rest of block

{ if (true) { 5 + 2; return 2; } else {}};
[afterMarker] Constant x declared and substituted into the rest of block

{ if (true) { 5 + 2; return 2; } else {}};
[beforeMarker] ...

{ { undefined; 5 + 2; return 2; }};
[afterMarker] ...

{ { undefined; 5 + 2; return 2; }};
[beforeMarker] Binary expression 5 + 2 evaluated

{ { undefined; 7; return 2; }};
[afterMarker] Binary expression 5 + 2 evaluated

{ { undefined; 7; return 2; }};
[beforeMarker] undefined finished evaluating

{ { 7; return 2; }};
[afterMarker] undefined finished evaluating

{ { 7; return 2; }};
[beforeMarker] 7 finished evaluating

{ { return 2; }};
[afterMarker] 7 finished evaluating

{ { return 2; }};
[beforeMarker] return 2; finished evaluating

{ return 2;};
[afterMarker] return 2; finished evaluating

{ return 2;};
[beforeMarker] 2 returned

2;
[afterMarker] 2 returned

2;
[noMarker] Evaluation complete
"
`;

exports[`Lambda expression Recursive function call 1`] = `
"const factorial = n => n === 0 ? 1 : n * factorial(n - 1);factorial(2);
[noMarker] Start of evaluation

const factorial = n => n === 0 ? 1 : n * factorial(n - 1);factorial(2);
[beforeMarker] Constant factorial declared and substituted into the rest of block

(n => n === 0 ? 1 : n * factorial(n - 1))(2);
[afterMarker] Constant factorial declared and substituted into the rest of block

(n => n === 0 ? 1 : n * factorial(n - 1))(2);
[beforeMarker] 2 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 === 0 ? 1 : 2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[afterMarker] 2 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 === 0 ? 1 : 2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[beforeMarker] Binary expression 2 === 0 evaluated

false ? 1 : 2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[afterMarker] Binary expression 2 === 0 evaluated

false ? 1 : 2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

2 * (n => n === 0 ? 1 : n * factorial(n - 1))(2 - 1);
[beforeMarker] Binary expression 2 - 1 evaluated

2 * (n => n === 0 ? 1 : n * factorial(n - 1))(1);
[afterMarker] Binary expression 2 - 1 evaluated

2 * (n => n === 0 ? 1 : n * factorial(n - 1))(1);
[beforeMarker] 1 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 * (1 === 0 ? 1 : 1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[afterMarker] 1 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 * (1 === 0 ? 1 : 1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[beforeMarker] Binary expression 1 === 0 evaluated

2 * (false ? 1 : 1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[afterMarker] Binary expression 1 === 0 evaluated

2 * (false ? 1 : 1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

2 * (1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

2 * (1 * (n => n === 0 ? 1 : n * factorial(n - 1))(1 - 1));
[beforeMarker] Binary expression 1 - 1 evaluated

2 * (1 * (n => n === 0 ? 1 : n * factorial(n - 1))(0));
[afterMarker] Binary expression 1 - 1 evaluated

2 * (1 * (n => n === 0 ? 1 : n * factorial(n - 1))(0));
[beforeMarker] 0 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 * (1 * (0 === 0 ? 1 : 0 * (n => n === 0 ? 1 : n * factorial(n - 1))(0 - 1)));
[afterMarker] 0 substituted into n of n => n === 0 ? 1 : n * factorial(n - 1)

2 * (1 * (0 === 0 ? 1 : 0 * (n => n === 0 ? 1 : n * factorial(n - 1))(0 - 1)));
[beforeMarker] Binary expression 0 === 0 evaluated

2 * (1 * (true ? 1 : 0 * (n => n === 0 ? 1 : n * factorial(n - 1))(0 - 1)));
[afterMarker] Binary expression 0 === 0 evaluated

2 * (1 * (true ? 1 : 0 * (n => n === 0 ? 1 : n * factorial(n - 1))(0 - 1)));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

2 * (1 * 1);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

2 * (1 * 1);
[beforeMarker] Binary expression 1 * 1 evaluated

2 * 1;
[afterMarker] Binary expression 1 * 1 evaluated

2 * 1;
[beforeMarker] Binary expression 2 * 1 evaluated

2;
[afterMarker] Binary expression 2 * 1 evaluated

2;
[noMarker] Evaluation complete
"
`;

exports[`List operations Append on list of null 1`] = `
"const a = list(null);append(a, a);
[noMarker] Start of evaluation

const a = list(null);append(a, a);
[beforeMarker] list runs

const a = [null, null];append(a, a);
[afterMarker] list runs

const a = [null, null];append(a, a);
[beforeMarker] Constant a declared and substituted into the rest of block

append([null, null], [null, null]);
[afterMarker] Constant a declared and substituted into the rest of block

append([null, null], [null, null]);
[beforeMarker] append runs

$append([null, null], [null, null], xs => xs);
[afterMarker] append runs

$append([null, null], [null, null], xs => xs);
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, null], [null, null], xs => xs);
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, null], [null, null], xs => xs);
[beforeMarker] [null, null], [null, null], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([null, null]) ? (xs => xs)([null, null]) : $append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[afterMarker] [null, null], [null, null], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([null, null]) ? (xs => xs)([null, null]) : $append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[beforeMarker] is_null runs

false ? (xs => xs)([null, null]) : $append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[afterMarker] is_null runs

false ? (xs => xs)([null, null]) : $append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([null, null]), [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[beforeMarker] tail runs

$append(null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[afterMarker] tail runs

$append(null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)));
[beforeMarker] null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]) : $append(tail(null), [null, null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
[afterMarker] null, [null, null], zs => (xs => xs)(pair(head([null, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]) : $append(tail(null), [null, null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
[beforeMarker] is_null runs

true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]) : $append(tail(null), [null, null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
[afterMarker] is_null runs

true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]) : $append(tail(null), [null, null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs)));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(zs => (xs => xs)(pair(head([null, null]), zs)))([null, null]);
[beforeMarker] [null, null] substituted into zs of zs => (xs => xs)(pair(head([null, null]), zs))

(xs => xs)(pair(head([null, null]), [null, null]));
[afterMarker] [null, null] substituted into zs of zs => (xs => xs)(pair(head([null, null]), zs))

(xs => xs)(pair(head([null, null]), [null, null]));
[beforeMarker] head runs

(xs => xs)(pair(null, [null, null]));
[afterMarker] head runs

(xs => xs)(pair(null, [null, null]));
[beforeMarker] pair runs

(xs => xs)([null, [null, null]]);
[afterMarker] pair runs

(xs => xs)([null, [null, null]]);
[beforeMarker] [null, [null, null]] substituted into xs of xs => xs

[null, [null, null]];
[afterMarker] [null, [null, null]] substituted into xs of xs => xs

[null, [null, null]];
[noMarker] Evaluation complete
"
`;

exports[`List operations accumulate on list 1`] = `
"accumulate((x, y) => x + y, 0, list(1, 2, 3));
[noMarker] Start of evaluation

accumulate((x, y) => x + y, 0, list(1, 2, 3));
[beforeMarker] list runs

accumulate((x, y) => x + y, 0, [1, [2, [3, null]]]);
[afterMarker] list runs

accumulate((x, y) => x + y, 0, [1, [2, [3, null]]]);
[beforeMarker] accumulate runs

$accumulate((x, y) => x + y, 0, [1, [2, [3, null]]], x => x);
[afterMarker] accumulate runs

$accumulate((x, y) => x + y, 0, [1, [2, [3, null]]], x => x);
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [1, [2, [3, null]]], x => x);
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [1, [2, [3, null]]], x => x);
[beforeMarker] (x, y) => x + y, 0, [1, [2, [3, null]]], x => x substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([1, [2, [3, null]]]) ? (x => x)(0) : $accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[afterMarker] (x, y) => x + y, 0, [1, [2, [3, null]]], x => x substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([1, [2, [3, null]]]) ? (x => x)(0) : $accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[beforeMarker] is_null runs

false ? (x => x)(0) : $accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[afterMarker] is_null runs

false ? (x => x)(0) : $accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([1, [2, [3, null]]]), x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[beforeMarker] tail runs

$accumulate((x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[afterMarker] tail runs

$accumulate((x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)));
[beforeMarker] (x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([2, [3, null]]) ? (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[afterMarker] (x, y) => x + y, 0, [2, [3, null]], x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([2, [3, null]]) ? (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[beforeMarker] is_null runs

false ? (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[afterMarker] is_null runs

false ? (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([2, [3, null]]), x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[beforeMarker] tail runs

$accumulate((x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[afterMarker] tail runs

$accumulate((x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)));
[beforeMarker] (x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([3, null]) ? (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[afterMarker] (x, y) => x + y, 0, [3, null], x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([3, null]) ? (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[beforeMarker] is_null runs

false ? (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[afterMarker] is_null runs

false ? (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(0) : $accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((x, y) => x + y, 0, tail([3, null]), x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[beforeMarker] tail runs

$accumulate((x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[afterMarker] tail runs

$accumulate((x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)));
[beforeMarker] (x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null(null) ? (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0) : $accumulate((x, y) => x + y, 0, tail(null), x => (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(((x, y) => x + y)(head(null), x)));
[afterMarker] (x, y) => x + y, 0, null, x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null(null) ? (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0) : $accumulate((x, y) => x + y, 0, tail(null), x => (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(((x, y) => x + y)(head(null), x)));
[beforeMarker] is_null runs

true ? (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0) : $accumulate((x, y) => x + y, 0, tail(null), x => (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(((x, y) => x + y)(head(null), x)));
[afterMarker] is_null runs

true ? (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0) : $accumulate((x, y) => x + y, 0, tail(null), x => (x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(((x, y) => x + y)(head(null), x)));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x)))(0);
[beforeMarker] 0 substituted into x of x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x))

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), 0));
[afterMarker] 0 substituted into x of x => (x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), x))

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(head([3, null]), 0));
[beforeMarker] head runs

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(3, 0));
[afterMarker] head runs

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(((x, y) => x + y)(3, 0));
[beforeMarker] 3, 0 substituted into x, y of (x, y) => x + y

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(3 + 0);
[afterMarker] 3, 0 substituted into x, y of (x, y) => x + y

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(3 + 0);
[beforeMarker] Binary expression 3 + 0 evaluated

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(3);
[afterMarker] Binary expression 3 + 0 evaluated

(x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x)))(3);
[beforeMarker] 3 substituted into x of x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x))

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), 3));
[afterMarker] 3 substituted into x of x => (x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), x))

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(head([2, [3, null]]), 3));
[beforeMarker] head runs

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(2, 3));
[afterMarker] head runs

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(((x, y) => x + y)(2, 3));
[beforeMarker] 2, 3 substituted into x, y of (x, y) => x + y

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(2 + 3);
[afterMarker] 2, 3 substituted into x, y of (x, y) => x + y

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(2 + 3);
[beforeMarker] Binary expression 2 + 3 evaluated

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(5);
[afterMarker] Binary expression 2 + 3 evaluated

(x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x)))(5);
[beforeMarker] 5 substituted into x of x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x))

(x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), 5));
[afterMarker] 5 substituted into x of x => (x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), x))

(x => x)(((x, y) => x + y)(head([1, [2, [3, null]]]), 5));
[beforeMarker] head runs

(x => x)(((x, y) => x + y)(1, 5));
[afterMarker] head runs

(x => x)(((x, y) => x + y)(1, 5));
[beforeMarker] 1, 5 substituted into x, y of (x, y) => x + y

(x => x)(1 + 5);
[afterMarker] 1, 5 substituted into x, y of (x, y) => x + y

(x => x)(1 + 5);
[beforeMarker] Binary expression 1 + 5 evaluated

(x => x)(6);
[afterMarker] Binary expression 1 + 5 evaluated

(x => x)(6);
[beforeMarker] 6 substituted into x of x => x

6;
[afterMarker] 6 substituted into x of x => x

6;
[noMarker] Evaluation complete
"
`;

exports[`List operations filter on list 1`] = `
"filter(x => x % 2 === 1, list(1, 2, 3));
[noMarker] Start of evaluation

filter(x => x % 2 === 1, list(1, 2, 3));
[beforeMarker] list runs

filter(x => x % 2 === 1, [1, [2, [3, null]]]);
[afterMarker] list runs

filter(x => x % 2 === 1, [1, [2, [3, null]]]);
[beforeMarker] filter runs

$filter(x => x % 2 === 1, [1, [2, [3, null]]], null);
[afterMarker] filter runs

$filter(x => x % 2 === 1, [1, [2, [3, null]]], null);
[beforeMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [1, [2, [3, null]]], null);
[afterMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [1, [2, [3, null]]], null);
[beforeMarker] x => x % 2 === 1, [1, [2, [3, null]]], null substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([1, [2, [3, null]]]) ? reverse(null) : (x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] x => x % 2 === 1, [1, [2, [3, null]]], null substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([1, [2, [3, null]]]) ? reverse(null) : (x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] is_null runs

false ? reverse(null) : (x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] is_null runs

false ? reverse(null) : (x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([1, [2, [3, null]]])) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] head runs

(x => x % 2 === 1)(1) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] head runs

(x => x % 2 === 1)(1) ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] 1 substituted into x of x => x % 2 === 1

1 % 2 === 1 ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] 1 substituted into x of x => x % 2 === 1

1 % 2 === 1 ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] Binary expression 1 % 2 evaluated

1 === 1 ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] Binary expression 1 % 2 evaluated

1 === 1 ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] Binary expression 1 === 1 evaluated

true ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[afterMarker] Binary expression 1 === 1 evaluated

true ? $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null)) : $filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), null);
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

$filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

$filter(x => x % 2 === 1, tail([1, [2, [3, null]]]), pair(head([1, [2, [3, null]]]), null));
[beforeMarker] tail runs

$filter(x => x % 2 === 1, [2, [3, null]], pair(head([1, [2, [3, null]]]), null));
[afterMarker] tail runs

$filter(x => x % 2 === 1, [2, [3, null]], pair(head([1, [2, [3, null]]]), null));
[beforeMarker] head runs

$filter(x => x % 2 === 1, [2, [3, null]], pair(1, null));
[afterMarker] head runs

$filter(x => x % 2 === 1, [2, [3, null]], pair(1, null));
[beforeMarker] pair runs

$filter(x => x % 2 === 1, [2, [3, null]], [1, null]);
[afterMarker] pair runs

$filter(x => x % 2 === 1, [2, [3, null]], [1, null]);
[beforeMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [2, [3, null]], [1, null]);
[afterMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [2, [3, null]], [1, null]);
[beforeMarker] x => x % 2 === 1, [2, [3, null]], [1, null] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([2, [3, null]]) ? reverse([1, null]) : (x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] x => x % 2 === 1, [2, [3, null]], [1, null] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([2, [3, null]]) ? reverse([1, null]) : (x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] is_null runs

false ? reverse([1, null]) : (x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] is_null runs

false ? reverse([1, null]) : (x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([2, [3, null]])) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] head runs

(x => x % 2 === 1)(2) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] head runs

(x => x % 2 === 1)(2) ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] 2 substituted into x of x => x % 2 === 1

2 % 2 === 1 ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] 2 substituted into x of x => x % 2 === 1

2 % 2 === 1 ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] Binary expression 2 % 2 evaluated

0 === 1 ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] Binary expression 2 % 2 evaluated

0 === 1 ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] Binary expression 0 === 1 evaluated

false ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] Binary expression 0 === 1 evaluated

false ? $filter(x => x % 2 === 1, tail([2, [3, null]]), pair(head([2, [3, null]]), [1, null])) : $filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$filter(x => x % 2 === 1, tail([2, [3, null]]), [1, null]);
[beforeMarker] tail runs

$filter(x => x % 2 === 1, [3, null], [1, null]);
[afterMarker] tail runs

$filter(x => x % 2 === 1, [3, null], [1, null]);
[beforeMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [3, null], [1, null]);
[afterMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, [3, null], [1, null]);
[beforeMarker] x => x % 2 === 1, [3, null], [1, null] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([3, null]) ? reverse([1, null]) : (x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] x => x % 2 === 1, [3, null], [1, null] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null([3, null]) ? reverse([1, null]) : (x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] is_null runs

false ? reverse([1, null]) : (x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] is_null runs

false ? reverse([1, null]) : (x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x % 2 === 1)(head([3, null])) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] head runs

(x => x % 2 === 1)(3) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] head runs

(x => x % 2 === 1)(3) ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] 3 substituted into x of x => x % 2 === 1

3 % 2 === 1 ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] 3 substituted into x of x => x % 2 === 1

3 % 2 === 1 ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] Binary expression 3 % 2 evaluated

1 === 1 ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] Binary expression 3 % 2 evaluated

1 === 1 ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] Binary expression 1 === 1 evaluated

true ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[afterMarker] Binary expression 1 === 1 evaluated

true ? $filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null])) : $filter(x => x % 2 === 1, tail([3, null]), [1, null]);
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

$filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null]));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

$filter(x => x % 2 === 1, tail([3, null]), pair(head([3, null]), [1, null]));
[beforeMarker] tail runs

$filter(x => x % 2 === 1, null, pair(head([3, null]), [1, null]));
[afterMarker] tail runs

$filter(x => x % 2 === 1, null, pair(head([3, null]), [1, null]));
[beforeMarker] head runs

$filter(x => x % 2 === 1, null, pair(3, [1, null]));
[afterMarker] head runs

$filter(x => x % 2 === 1, null, pair(3, [1, null]));
[beforeMarker] pair runs

$filter(x => x % 2 === 1, null, [3, [1, null]]);
[afterMarker] pair runs

$filter(x => x % 2 === 1, null, [3, [1, null]]);
[beforeMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, null, [3, [1, null]]);
[afterMarker] $filter runs

((pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc))(x => x % 2 === 1, null, [3, [1, null]]);
[beforeMarker] x => x % 2 === 1, null, [3, [1, null]] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null(null) ? reverse([3, [1, null]]) : (x => x % 2 === 1)(head(null)) ? $filter(x => x % 2 === 1, tail(null), pair(head(null), [3, [1, null]])) : $filter(x => x % 2 === 1, tail(null), [3, [1, null]]);
[afterMarker] x => x % 2 === 1, null, [3, [1, null]] substituted into pred, xs, acc of (pred, xs, acc) => is_null(xs) ? reverse(acc) : pred(head(xs)) ? $filter(pred, tail(xs), pair(head(xs), acc)) : $filter(pred, tail(xs), acc)

is_null(null) ? reverse([3, [1, null]]) : (x => x % 2 === 1)(head(null)) ? $filter(x => x % 2 === 1, tail(null), pair(head(null), [3, [1, null]])) : $filter(x => x % 2 === 1, tail(null), [3, [1, null]]);
[beforeMarker] is_null runs

true ? reverse([3, [1, null]]) : (x => x % 2 === 1)(head(null)) ? $filter(x => x % 2 === 1, tail(null), pair(head(null), [3, [1, null]])) : $filter(x => x % 2 === 1, tail(null), [3, [1, null]]);
[afterMarker] is_null runs

true ? reverse([3, [1, null]]) : (x => x % 2 === 1)(head(null)) ? $filter(x => x % 2 === 1, tail(null), pair(head(null), [3, [1, null]])) : $filter(x => x % 2 === 1, tail(null), [3, [1, null]]);
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

reverse([3, [1, null]]);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

reverse([3, [1, null]]);
[beforeMarker] reverse runs

$reverse([3, [1, null]], null);
[afterMarker] reverse runs

$reverse([3, [1, null]], null);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([3, [1, null]], null);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([3, [1, null]], null);
[beforeMarker] [3, [1, null]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([3, [1, null]]) ? null : $reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[afterMarker] [3, [1, null]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([3, [1, null]]) ? null : $reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[beforeMarker] is_null runs

false ? null : $reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[afterMarker] is_null runs

false ? null : $reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([3, [1, null]]), pair(head([3, [1, null]]), null));
[beforeMarker] tail runs

$reverse([1, null], pair(head([3, [1, null]]), null));
[afterMarker] tail runs

$reverse([1, null], pair(head([3, [1, null]]), null));
[beforeMarker] head runs

$reverse([1, null], pair(3, null));
[afterMarker] head runs

$reverse([1, null], pair(3, null));
[beforeMarker] pair runs

$reverse([1, null], [3, null]);
[afterMarker] pair runs

$reverse([1, null], [3, null]);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([1, null], [3, null]);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([1, null], [3, null]);
[beforeMarker] [1, null], [3, null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([1, null]) ? [3, null] : $reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[afterMarker] [1, null], [3, null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([1, null]) ? [3, null] : $reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[beforeMarker] is_null runs

false ? [3, null] : $reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[afterMarker] is_null runs

false ? [3, null] : $reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([1, null]), pair(head([1, null]), [3, null]));
[beforeMarker] tail runs

$reverse(null, pair(head([1, null]), [3, null]));
[afterMarker] tail runs

$reverse(null, pair(head([1, null]), [3, null]));
[beforeMarker] head runs

$reverse(null, pair(1, [3, null]));
[afterMarker] head runs

$reverse(null, pair(1, [3, null]));
[beforeMarker] pair runs

$reverse(null, [1, [3, null]]);
[afterMarker] pair runs

$reverse(null, [1, [3, null]]);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [1, [3, null]]);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [1, [3, null]]);
[beforeMarker] null, [1, [3, null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null(null) ? [1, [3, null]] : $reverse(tail(null), pair(head(null), [1, [3, null]]));
[afterMarker] null, [1, [3, null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null(null) ? [1, [3, null]] : $reverse(tail(null), pair(head(null), [1, [3, null]]));
[beforeMarker] is_null runs

true ? [1, [3, null]] : $reverse(tail(null), pair(head(null), [1, [3, null]]));
[afterMarker] is_null runs

true ? [1, [3, null]] : $reverse(tail(null), pair(head(null), [1, [3, null]]));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

[1, [3, null]];
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

[1, [3, null]];
[noMarker] Evaluation complete
"
`;

exports[`List operations flatmap 1`] = `
"const flatMap = (f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs);flatMap(x => list(x, x + 1), list(2, 3, 4));
[noMarker] Start of evaluation

const flatMap = (f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs);flatMap(x => list(x, x + 1), list(2, 3, 4));
[beforeMarker] Constant flatMap declared and substituted into the rest of block

((f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs))(x => list(x, x + 1), list(2, 3, 4));
[afterMarker] Constant flatMap declared and substituted into the rest of block

((f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs))(x => list(x, x + 1), list(2, 3, 4));
[beforeMarker] list runs

((f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs))(x => list(x, x + 1), [2, [3, [4, null]]]);
[afterMarker] list runs

((f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs))(x => list(x, x + 1), [2, [3, [4, null]]]);
[beforeMarker] x => list(x, x + 1), [2, [3, [4, null]]] substituted into f, xs of (f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs)

accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]]);
[afterMarker] x => list(x, x + 1), [2, [3, [4, null]]] substituted into f, xs of (f, xs) => accumulate((acc, init) => append(f(acc), init), null, xs)

accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]]);
[beforeMarker] accumulate runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x);
[afterMarker] accumulate runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x);
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x);
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x);
[beforeMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([2, [3, [4, null]]]) ? (x => x)(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[afterMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [2, [3, [4, null]]], x => x substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([2, [3, [4, null]]]) ? (x => x)(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[beforeMarker] is_null runs

false ? (x => x)(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[afterMarker] is_null runs

false ? (x => x)(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([2, [3, [4, null]]]), x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[beforeMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[afterMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)));
[beforeMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([3, [4, null]]) ? (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[afterMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [3, [4, null]], x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([3, [4, null]]) ? (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[beforeMarker] is_null runs

false ? (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[afterMarker] is_null runs

false ? (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([3, [4, null]]), x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[beforeMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[afterMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)));
[beforeMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([4, null]) ? (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[afterMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, [4, null], x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null([4, null]) ? (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[beforeMarker] is_null runs

false ? (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[afterMarker] is_null runs

false ? (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail([4, null]), x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[beforeMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[afterMarker] tail runs

$accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[beforeMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[afterMarker] $accumulate runs

((f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x))))((acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)));
[beforeMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null(null) ? (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail(null), x => (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head(null), x)));
[afterMarker] (acc, init) => append((x => list(x, x + 1))(acc), init), null, null, x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)) substituted into f, initial, xs, cont of (f, initial, xs, cont) => is_null(xs) ? cont(initial) : $accumulate(f, initial, tail(xs), x => cont(f(head(xs), x)))

is_null(null) ? (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail(null), x => (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head(null), x)));
[beforeMarker] is_null runs

true ? (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail(null), x => (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head(null), x)));
[afterMarker] is_null runs

true ? (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null) : $accumulate((acc, init) => append((x => list(x, x + 1))(acc), init), null, tail(null), x => (x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head(null), x)));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x)))(null);
[beforeMarker] null substituted into x of x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), null));
[afterMarker] null substituted into x of x => (x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), x))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([4, null]), null));
[beforeMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(4, null));
[afterMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(4, null));
[beforeMarker] 4, null substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append((x => list(x, x + 1))(4), null));
[afterMarker] 4, null substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append((x => list(x, x + 1))(4), null));
[beforeMarker] 4 substituted into x of x => list(x, x + 1)

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append(list(4, 4 + 1), null));
[afterMarker] 4 substituted into x of x => list(x, x + 1)

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append(list(4, 4 + 1), null));
[beforeMarker] Binary expression 4 + 1 evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append(list(4, 5), null));
[afterMarker] Binary expression 4 + 1 evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append(list(4, 5), null));
[beforeMarker] list runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append([4, [5, null]], null));
[afterMarker] list runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(append([4, [5, null]], null));
[beforeMarker] append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append([4, [5, null]], null, xs => xs));
[afterMarker] append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append([4, [5, null]], null, xs => xs));
[beforeMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([4, [5, null]], null, xs => xs));
[afterMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([4, [5, null]], null, xs => xs));
[beforeMarker] [4, [5, null]], null, xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null([4, [5, null]]) ? (xs => xs)(null) : $append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[afterMarker] [4, [5, null]], null, xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null([4, [5, null]]) ? (xs => xs)(null) : $append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[beforeMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(false ? (xs => xs)(null) : $append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[afterMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(false ? (xs => xs)(null) : $append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(tail([4, [5, null]]), null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[beforeMarker] tail runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append([5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[afterMarker] tail runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append([5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[beforeMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[afterMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs))));
[beforeMarker] [5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null([5, null]) ? (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(null) : $append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[afterMarker] [5, null], null, zs => (xs => xs)(pair(head([4, [5, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null([5, null]) ? (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(null) : $append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[beforeMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(false ? (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(null) : $append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[afterMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(false ? (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(null) : $append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(tail([5, null]), null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[beforeMarker] tail runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[afterMarker] tail runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))($append(null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[beforeMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[afterMarker] $append runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))));
[beforeMarker] null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null) : $append(tail(null), null, zs => (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(pair(head(null), zs))));
[afterMarker] null, null, zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null) : $append(tail(null), null, zs => (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(pair(head(null), zs))));
[beforeMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(true ? (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null) : $append(tail(null), null, zs => (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(pair(head(null), zs))));
[afterMarker] is_null runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))(true ? (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null) : $append(tail(null), null, zs => (zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(pair(head(null), zs))));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs)))(null));
[beforeMarker] null substituted into zs of zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), null)));
[afterMarker] null substituted into zs of zs => (zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), zs))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(head([5, null]), null)));
[beforeMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(5, null)));
[afterMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))(pair(5, null)));
[beforeMarker] pair runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))([5, null]));
[afterMarker] pair runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((zs => (xs => xs)(pair(head([4, [5, null]]), zs)))([5, null]));
[beforeMarker] [5, null] substituted into zs of zs => (xs => xs)(pair(head([4, [5, null]]), zs))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)(pair(head([4, [5, null]]), [5, null])));
[afterMarker] [5, null] substituted into zs of zs => (xs => xs)(pair(head([4, [5, null]]), zs))

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)(pair(head([4, [5, null]]), [5, null])));
[beforeMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)(pair(4, [5, null])));
[afterMarker] head runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)(pair(4, [5, null])));
[beforeMarker] pair runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)([4, [5, null]]));
[afterMarker] pair runs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))((xs => xs)([4, [5, null]]));
[beforeMarker] [4, [5, null]] substituted into xs of xs => xs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))([4, [5, null]]);
[afterMarker] [4, [5, null]] substituted into xs of xs => xs

(x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x)))([4, [5, null]]);
[beforeMarker] [4, [5, null]] substituted into x of x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), [4, [5, null]]));
[afterMarker] [4, [5, null]] substituted into x of x => (x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), x))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([3, [4, null]]), [4, [5, null]]));
[beforeMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(3, [4, [5, null]]));
[afterMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((acc, init) => append((x => list(x, x + 1))(acc), init))(3, [4, [5, null]]));
[beforeMarker] 3, [4, [5, null]] substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append((x => list(x, x + 1))(3), [4, [5, null]]));
[afterMarker] 3, [4, [5, null]] substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append((x => list(x, x + 1))(3), [4, [5, null]]));
[beforeMarker] 3 substituted into x of x => list(x, x + 1)

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append(list(3, 3 + 1), [4, [5, null]]));
[afterMarker] 3 substituted into x of x => list(x, x + 1)

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append(list(3, 3 + 1), [4, [5, null]]));
[beforeMarker] Binary expression 3 + 1 evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append(list(3, 4), [4, [5, null]]));
[afterMarker] Binary expression 3 + 1 evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append(list(3, 4), [4, [5, null]]));
[beforeMarker] list runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append([3, [4, null]], [4, [5, null]]));
[afterMarker] list runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(append([3, [4, null]], [4, [5, null]]));
[beforeMarker] append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append([3, [4, null]], [4, [5, null]], xs => xs));
[afterMarker] append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append([3, [4, null]], [4, [5, null]], xs => xs));
[beforeMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([3, [4, null]], [4, [5, null]], xs => xs));
[afterMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([3, [4, null]], [4, [5, null]], xs => xs));
[beforeMarker] [3, [4, null]], [4, [5, null]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null([3, [4, null]]) ? (xs => xs)([4, [5, null]]) : $append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[afterMarker] [3, [4, null]], [4, [5, null]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null([3, [4, null]]) ? (xs => xs)([4, [5, null]]) : $append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[beforeMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(false ? (xs => xs)([4, [5, null]]) : $append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[afterMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(false ? (xs => xs)([4, [5, null]]) : $append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(tail([3, [4, null]]), [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[beforeMarker] tail runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append([4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[afterMarker] tail runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append([4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[beforeMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[afterMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs))));
[beforeMarker] [4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null([4, null]) ? (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [5, null]]) : $append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[afterMarker] [4, null], [4, [5, null]], zs => (xs => xs)(pair(head([3, [4, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null([4, null]) ? (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [5, null]]) : $append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[beforeMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(false ? (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [5, null]]) : $append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[afterMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(false ? (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [5, null]]) : $append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(tail([4, null]), [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[beforeMarker] tail runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[afterMarker] tail runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))($append(null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[beforeMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[afterMarker] $append runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))));
[beforeMarker] null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]) : $append(tail(null), [4, [5, null]], zs => (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))(pair(head(null), zs))));
[afterMarker] null, [4, [5, null]], zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]) : $append(tail(null), [4, [5, null]], zs => (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))(pair(head(null), zs))));
[beforeMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(true ? (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]) : $append(tail(null), [4, [5, null]], zs => (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))(pair(head(null), zs))));
[afterMarker] is_null runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))(true ? (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]) : $append(tail(null), [4, [5, null]], zs => (zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))(pair(head(null), zs))));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs)))([4, [5, null]]));
[beforeMarker] [4, [5, null]] substituted into zs of zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), [4, [5, null]])));
[afterMarker] [4, [5, null]] substituted into zs of zs => (zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), zs))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(head([4, null]), [4, [5, null]])));
[beforeMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(4, [4, [5, null]])));
[afterMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))(pair(4, [4, [5, null]])));
[beforeMarker] pair runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [4, [5, null]]]));
[afterMarker] pair runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((zs => (xs => xs)(pair(head([3, [4, null]]), zs)))([4, [4, [5, null]]]));
[beforeMarker] [4, [4, [5, null]]] substituted into zs of zs => (xs => xs)(pair(head([3, [4, null]]), zs))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)(pair(head([3, [4, null]]), [4, [4, [5, null]]])));
[afterMarker] [4, [4, [5, null]]] substituted into zs of zs => (xs => xs)(pair(head([3, [4, null]]), zs))

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)(pair(head([3, [4, null]]), [4, [4, [5, null]]])));
[beforeMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)(pair(3, [4, [4, [5, null]]])));
[afterMarker] head runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)(pair(3, [4, [4, [5, null]]])));
[beforeMarker] pair runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)([3, [4, [4, [5, null]]]]));
[afterMarker] pair runs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))((xs => xs)([3, [4, [4, [5, null]]]]));
[beforeMarker] [3, [4, [4, [5, null]]]] substituted into xs of xs => xs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))([3, [4, [4, [5, null]]]]);
[afterMarker] [3, [4, [4, [5, null]]]] substituted into xs of xs => xs

(x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x)))([3, [4, [4, [5, null]]]]);
[beforeMarker] [3, [4, [4, [5, null]]]] substituted into x of x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x))

(x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), [3, [4, [4, [5, null]]]]));
[afterMarker] [3, [4, [4, [5, null]]]] substituted into x of x => (x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), x))

(x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(head([2, [3, [4, null]]]), [3, [4, [4, [5, null]]]]));
[beforeMarker] head runs

(x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(2, [3, [4, [4, [5, null]]]]));
[afterMarker] head runs

(x => x)(((acc, init) => append((x => list(x, x + 1))(acc), init))(2, [3, [4, [4, [5, null]]]]));
[beforeMarker] 2, [3, [4, [4, [5, null]]]] substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => x)(append((x => list(x, x + 1))(2), [3, [4, [4, [5, null]]]]));
[afterMarker] 2, [3, [4, [4, [5, null]]]] substituted into acc, init of (acc, init) => append((x => list(x, x + 1))(acc), init)

(x => x)(append((x => list(x, x + 1))(2), [3, [4, [4, [5, null]]]]));
[beforeMarker] 2 substituted into x of x => list(x, x + 1)

(x => x)(append(list(2, 2 + 1), [3, [4, [4, [5, null]]]]));
[afterMarker] 2 substituted into x of x => list(x, x + 1)

(x => x)(append(list(2, 2 + 1), [3, [4, [4, [5, null]]]]));
[beforeMarker] Binary expression 2 + 1 evaluated

(x => x)(append(list(2, 3), [3, [4, [4, [5, null]]]]));
[afterMarker] Binary expression 2 + 1 evaluated

(x => x)(append(list(2, 3), [3, [4, [4, [5, null]]]]));
[beforeMarker] list runs

(x => x)(append([2, [3, null]], [3, [4, [4, [5, null]]]]));
[afterMarker] list runs

(x => x)(append([2, [3, null]], [3, [4, [4, [5, null]]]]));
[beforeMarker] append runs

(x => x)($append([2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs));
[afterMarker] append runs

(x => x)($append([2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs));
[beforeMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs));
[afterMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs));
[beforeMarker] [2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null([2, [3, null]]) ? (xs => xs)([3, [4, [4, [5, null]]]]) : $append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[afterMarker] [2, [3, null]], [3, [4, [4, [5, null]]]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null([2, [3, null]]) ? (xs => xs)([3, [4, [4, [5, null]]]]) : $append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[beforeMarker] is_null runs

(x => x)(false ? (xs => xs)([3, [4, [4, [5, null]]]]) : $append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[afterMarker] is_null runs

(x => x)(false ? (xs => xs)([3, [4, [4, [5, null]]]]) : $append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x)($append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x)($append(tail([2, [3, null]]), [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[beforeMarker] tail runs

(x => x)($append([3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[afterMarker] tail runs

(x => x)($append([3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[beforeMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[afterMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs))));
[beforeMarker] [3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null([3, null]) ? (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[afterMarker] [3, null], [3, [4, [4, [5, null]]]], zs => (xs => xs)(pair(head([2, [3, null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null([3, null]) ? (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[beforeMarker] is_null runs

(x => x)(false ? (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[afterMarker] is_null runs

(x => x)(false ? (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x)($append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

(x => x)($append(tail([3, null]), [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[beforeMarker] tail runs

(x => x)($append(null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[afterMarker] tail runs

(x => x)($append(null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[beforeMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[afterMarker] $append runs

(x => x)(((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))));
[beforeMarker] null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail(null), [3, [4, [4, [5, null]]]], zs => (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))(pair(head(null), zs))));
[afterMarker] null, [3, [4, [4, [5, null]]]], zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

(x => x)(is_null(null) ? (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail(null), [3, [4, [4, [5, null]]]], zs => (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))(pair(head(null), zs))));
[beforeMarker] is_null runs

(x => x)(true ? (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail(null), [3, [4, [4, [5, null]]]], zs => (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))(pair(head(null), zs))));
[afterMarker] is_null runs

(x => x)(true ? (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]) : $append(tail(null), [3, [4, [4, [5, null]]]], zs => (zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))(pair(head(null), zs))));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => x)((zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(x => x)((zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs)))([3, [4, [4, [5, null]]]]));
[beforeMarker] [3, [4, [4, [5, null]]]] substituted into zs of zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), [3, [4, [4, [5, null]]]])));
[afterMarker] [3, [4, [4, [5, null]]]] substituted into zs of zs => (zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), zs))

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(head([3, null]), [3, [4, [4, [5, null]]]])));
[beforeMarker] head runs

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(3, [3, [4, [4, [5, null]]]])));
[afterMarker] head runs

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))(pair(3, [3, [4, [4, [5, null]]]])));
[beforeMarker] pair runs

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [3, [4, [4, [5, null]]]]]));
[afterMarker] pair runs

(x => x)((zs => (xs => xs)(pair(head([2, [3, null]]), zs)))([3, [3, [4, [4, [5, null]]]]]));
[beforeMarker] [3, [3, [4, [4, [5, null]]]]] substituted into zs of zs => (xs => xs)(pair(head([2, [3, null]]), zs))

(x => x)((xs => xs)(pair(head([2, [3, null]]), [3, [3, [4, [4, [5, null]]]]])));
[afterMarker] [3, [3, [4, [4, [5, null]]]]] substituted into zs of zs => (xs => xs)(pair(head([2, [3, null]]), zs))

(x => x)((xs => xs)(pair(head([2, [3, null]]), [3, [3, [4, [4, [5, null]]]]])));
[beforeMarker] head runs

(x => x)((xs => xs)(pair(2, [3, [3, [4, [4, [5, null]]]]])));
[afterMarker] head runs

(x => x)((xs => xs)(pair(2, [3, [3, [4, [4, [5, null]]]]])));
[beforeMarker] pair runs

(x => x)((xs => xs)([2, [3, [3, [4, [4, [5, null]]]]]]));
[afterMarker] pair runs

(x => x)((xs => xs)([2, [3, [3, [4, [4, [5, null]]]]]]));
[beforeMarker] [2, [3, [3, [4, [4, [5, null]]]]]] substituted into xs of xs => xs

(x => x)([2, [3, [3, [4, [4, [5, null]]]]]]);
[afterMarker] [2, [3, [3, [4, [4, [5, null]]]]]] substituted into xs of xs => xs

(x => x)([2, [3, [3, [4, [4, [5, null]]]]]]);
[beforeMarker] [2, [3, [3, [4, [4, [5, null]]]]]] substituted into x of x => x

[2, [3, [3, [4, [4, [5, null]]]]]];
[afterMarker] [2, [3, [3, [4, [4, [5, null]]]]]] substituted into x of x => x

[2, [3, [3, [4, [4, [5, null]]]]]];
[noMarker] Evaluation complete
"
`;

exports[`List operations is_null 1`] = `
"is_null(tail(list(1)));
[noMarker] Start of evaluation

is_null(tail(list(1)));
[beforeMarker] list runs

is_null(tail([1, null]));
[afterMarker] list runs

is_null(tail([1, null]));
[beforeMarker] tail runs

is_null(null);
[afterMarker] tail runs

is_null(null);
[beforeMarker] is_null runs

true;
[afterMarker] is_null runs

true;
[noMarker] Evaluation complete
"
`;

exports[`List operations map on list 1`] = `
"map(x => list(x, 1), list(1, 2, 3));
[noMarker] Start of evaluation

map(x => list(x, 1), list(1, 2, 3));
[beforeMarker] list runs

map(x => list(x, 1), [1, [2, [3, null]]]);
[afterMarker] list runs

map(x => list(x, 1), [1, [2, [3, null]]]);
[beforeMarker] map runs

$map(x => list(x, 1), [1, [2, [3, null]]], null);
[afterMarker] map runs

$map(x => list(x, 1), [1, [2, [3, null]]], null);
[beforeMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [1, [2, [3, null]]], null);
[afterMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [1, [2, [3, null]]], null);
[beforeMarker] x => list(x, 1), [1, [2, [3, null]]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([1, [2, [3, null]]]) ? reverse(null) : $map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[afterMarker] x => list(x, 1), [1, [2, [3, null]]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([1, [2, [3, null]]]) ? reverse(null) : $map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[beforeMarker] is_null runs

false ? reverse(null) : $map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[afterMarker] is_null runs

false ? reverse(null) : $map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([1, [2, [3, null]]]), pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[beforeMarker] tail runs

$map(x => list(x, 1), [2, [3, null]], pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[afterMarker] tail runs

$map(x => list(x, 1), [2, [3, null]], pair((x => list(x, 1))(head([1, [2, [3, null]]])), null));
[beforeMarker] head runs

$map(x => list(x, 1), [2, [3, null]], pair((x => list(x, 1))(1), null));
[afterMarker] head runs

$map(x => list(x, 1), [2, [3, null]], pair((x => list(x, 1))(1), null));
[beforeMarker] 1 substituted into x of x => list(x, 1)

$map(x => list(x, 1), [2, [3, null]], pair(list(1, 1), null));
[afterMarker] 1 substituted into x of x => list(x, 1)

$map(x => list(x, 1), [2, [3, null]], pair(list(1, 1), null));
[beforeMarker] list runs

$map(x => list(x, 1), [2, [3, null]], pair([1, [1, null]], null));
[afterMarker] list runs

$map(x => list(x, 1), [2, [3, null]], pair([1, [1, null]], null));
[beforeMarker] pair runs

$map(x => list(x, 1), [2, [3, null]], [[1, [1, null]], null]);
[afterMarker] pair runs

$map(x => list(x, 1), [2, [3, null]], [[1, [1, null]], null]);
[beforeMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [2, [3, null]], [[1, [1, null]], null]);
[afterMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [2, [3, null]], [[1, [1, null]], null]);
[beforeMarker] x => list(x, 1), [2, [3, null]], [[1, [1, null]], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([2, [3, null]]) ? reverse([[1, [1, null]], null]) : $map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[afterMarker] x => list(x, 1), [2, [3, null]], [[1, [1, null]], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([2, [3, null]]) ? reverse([[1, [1, null]], null]) : $map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[beforeMarker] is_null runs

false ? reverse([[1, [1, null]], null]) : $map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[afterMarker] is_null runs

false ? reverse([[1, [1, null]], null]) : $map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([2, [3, null]]), pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[beforeMarker] tail runs

$map(x => list(x, 1), [3, null], pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[afterMarker] tail runs

$map(x => list(x, 1), [3, null], pair((x => list(x, 1))(head([2, [3, null]])), [[1, [1, null]], null]));
[beforeMarker] head runs

$map(x => list(x, 1), [3, null], pair((x => list(x, 1))(2), [[1, [1, null]], null]));
[afterMarker] head runs

$map(x => list(x, 1), [3, null], pair((x => list(x, 1))(2), [[1, [1, null]], null]));
[beforeMarker] 2 substituted into x of x => list(x, 1)

$map(x => list(x, 1), [3, null], pair(list(2, 1), [[1, [1, null]], null]));
[afterMarker] 2 substituted into x of x => list(x, 1)

$map(x => list(x, 1), [3, null], pair(list(2, 1), [[1, [1, null]], null]));
[beforeMarker] list runs

$map(x => list(x, 1), [3, null], pair([2, [1, null]], [[1, [1, null]], null]));
[afterMarker] list runs

$map(x => list(x, 1), [3, null], pair([2, [1, null]], [[1, [1, null]], null]));
[beforeMarker] pair runs

$map(x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]]);
[afterMarker] pair runs

$map(x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]]);
[beforeMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]]);
[afterMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]]);
[beforeMarker] x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([3, null]) ? reverse([[2, [1, null]], [[1, [1, null]], null]]) : $map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] x => list(x, 1), [3, null], [[2, [1, null]], [[1, [1, null]], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null([3, null]) ? reverse([[2, [1, null]], [[1, [1, null]], null]]) : $map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] is_null runs

false ? reverse([[2, [1, null]], [[1, [1, null]], null]]) : $map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] is_null runs

false ? reverse([[2, [1, null]], [[1, [1, null]], null]]) : $map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$map(x => list(x, 1), tail([3, null]), pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] tail runs

$map(x => list(x, 1), null, pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] tail runs

$map(x => list(x, 1), null, pair((x => list(x, 1))(head([3, null])), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] head runs

$map(x => list(x, 1), null, pair((x => list(x, 1))(3), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] head runs

$map(x => list(x, 1), null, pair((x => list(x, 1))(3), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] 3 substituted into x of x => list(x, 1)

$map(x => list(x, 1), null, pair(list(3, 1), [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] 3 substituted into x of x => list(x, 1)

$map(x => list(x, 1), null, pair(list(3, 1), [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] list runs

$map(x => list(x, 1), null, pair([3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]));
[afterMarker] list runs

$map(x => list(x, 1), null, pair([3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]));
[beforeMarker] pair runs

$map(x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[afterMarker] pair runs

$map(x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[beforeMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[afterMarker] $map runs

((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[beforeMarker] x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null(null) ? reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) : $map(x => list(x, 1), tail(null), pair((x => list(x, 1))(head(null)), [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]));
[afterMarker] x => list(x, 1), null, [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

is_null(null) ? reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) : $map(x => list(x, 1), tail(null), pair((x => list(x, 1))(head(null)), [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]));
[beforeMarker] is_null runs

true ? reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) : $map(x => list(x, 1), tail(null), pair((x => list(x, 1))(head(null)), [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]));
[afterMarker] is_null runs

true ? reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) : $map(x => list(x, 1), tail(null), pair((x => list(x, 1))(head(null)), [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]);
[beforeMarker] reverse runs

$reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null);
[afterMarker] reverse runs

$reverse([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null);
[beforeMarker] [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) ? null : $reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[afterMarker] [[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]) ? null : $reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[beforeMarker] is_null runs

false ? null : $reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[afterMarker] is_null runs

false ? null : $reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[beforeMarker] tail runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[afterMarker] tail runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], pair(head([[3, [1, null]], [[2, [1, null]], [[1, [1, null]], null]]]), null));
[beforeMarker] head runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], pair([3, [1, null]], null));
[afterMarker] head runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], pair([3, [1, null]], null));
[beforeMarker] pair runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null]);
[afterMarker] pair runs

$reverse([[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null]);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null]);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null]);
[beforeMarker] [[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[2, [1, null]], [[1, [1, null]], null]]) ? [[3, [1, null]], null] : $reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[afterMarker] [[2, [1, null]], [[1, [1, null]], null]], [[3, [1, null]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[2, [1, null]], [[1, [1, null]], null]]) ? [[3, [1, null]], null] : $reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[beforeMarker] is_null runs

false ? [[3, [1, null]], null] : $reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[afterMarker] is_null runs

false ? [[3, [1, null]], null] : $reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[2, [1, null]], [[1, [1, null]], null]]), pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[beforeMarker] tail runs

$reverse([[1, [1, null]], null], pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[afterMarker] tail runs

$reverse([[1, [1, null]], null], pair(head([[2, [1, null]], [[1, [1, null]], null]]), [[3, [1, null]], null]));
[beforeMarker] head runs

$reverse([[1, [1, null]], null], pair([2, [1, null]], [[3, [1, null]], null]));
[afterMarker] head runs

$reverse([[1, [1, null]], null], pair([2, [1, null]], [[3, [1, null]], null]));
[beforeMarker] pair runs

$reverse([[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]]);
[afterMarker] pair runs

$reverse([[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]]);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]]);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]]);
[beforeMarker] [[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[1, [1, null]], null]) ? [[2, [1, null]], [[3, [1, null]], null]] : $reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[afterMarker] [[1, [1, null]], null], [[2, [1, null]], [[3, [1, null]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null([[1, [1, null]], null]) ? [[2, [1, null]], [[3, [1, null]], null]] : $reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[beforeMarker] is_null runs

false ? [[2, [1, null]], [[3, [1, null]], null]] : $reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[afterMarker] is_null runs

false ? [[2, [1, null]], [[3, [1, null]], null]] : $reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$reverse(tail([[1, [1, null]], null]), pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[beforeMarker] tail runs

$reverse(null, pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[afterMarker] tail runs

$reverse(null, pair(head([[1, [1, null]], null]), [[2, [1, null]], [[3, [1, null]], null]]));
[beforeMarker] head runs

$reverse(null, pair([1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]));
[afterMarker] head runs

$reverse(null, pair([1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]));
[beforeMarker] pair runs

$reverse(null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]);
[afterMarker] pair runs

$reverse(null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]);
[beforeMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]);
[afterMarker] $reverse runs

((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]);
[beforeMarker] null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null(null) ? [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] : $reverse(tail(null), pair(head(null), [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]));
[afterMarker] null, [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

is_null(null) ? [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] : $reverse(tail(null), pair(head(null), [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]));
[beforeMarker] is_null runs

true ? [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] : $reverse(tail(null), pair(head(null), [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]));
[afterMarker] is_null runs

true ? [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]] : $reverse(tail(null), pair(head(null), [[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]]));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

[[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]];
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

[[1, [1, null]], [[2, [1, null]], [[3, [1, null]], null]]];
[noMarker] Evaluation complete
"
`;

exports[`List operations subsets 1`] = `
"function subsets(s) { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }}subsets(list(1, 2, 3));
[noMarker] Start of evaluation

function subsets(s) { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }}subsets(list(1, 2, 3));
[beforeMarker] Function subsets declared, parameter(s) s required

(s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }})(list(1, 2, 3));
[afterMarker] Function subsets declared, parameter(s) s required

(s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }})(list(1, 2, 3));
[beforeMarker] list runs

(s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }})([1, [2, [3, null]]]);
[afterMarker] list runs

(s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); }})([1, [2, [3, null]]]);
[beforeMarker] Function subsets, defined as s => {...}, takes in s as input [1, [2, [3, null]]]

{ if (is_null([1, [2, [3, null]]])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Function subsets, defined as s => {...}, takes in s as input [1, [2, [3, null]]]

{ if (is_null([1, [2, [3, null]]])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] ...

{ { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] ...

{ { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([1, [2, [3, null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })([2, [3, null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })([2, [3, null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Function subsets, defined as s => {...}, takes in s as input [2, [3, null]]

{ { undefined; const rest = { if (is_null([2, [3, null]])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Function subsets, defined as s => {...}, takes in s as input [2, [3, null]]

{ { undefined; const rest = { if (is_null([2, [3, null]])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] ...

{ { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] ...

{ { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([2, [3, null]])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })([3, null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })([3, null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Function subsets, defined as s => {...}, takes in s as input [3, null]

{ { undefined; const rest = { { undefined; const rest = { if (is_null([3, null])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Function subsets, defined as s => {...}, takes in s as input [3, null]

{ { undefined; const rest = { { undefined; const rest = { if (is_null([3, null])) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = { if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = { if (false) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] ...

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] ...

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail([3, null])); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(null); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(null); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Function subsets, defined as s => {...}, takes in s as input null

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { if (is_null(null)) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail(null)); return append(rest, map(x => pair(head(null), x), rest)); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Function subsets, defined as s => {...}, takes in s as input null

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { if (is_null(null)) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail(null)); return append(rest, map(x => pair(head(null), x), rest)); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { if (true) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail(null)); return append(rest, map(x => pair(head(null), x), rest)); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { if (true) { return list(null); } else { const rest = (s => { if (is_null(s)) { return list(null); } else { const rest = subsets(tail(s)); return append(rest, map(x => pair(head(s), x), rest)); } })(tail(null)); return append(rest, map(x => pair(head(null), x), rest)); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] ...

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { { undefined; return list(null); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] ...

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { { undefined; return list(null); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] undefined finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { { return list(null); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] undefined finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { { return list(null); } }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] return list(null); finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { return list(null); }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] return list(null); finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = { return list(null); }; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] list(null) returned

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = list(null); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] list(null) returned

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = list(null); return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] list runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = [null, null]; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] list runs

{ { undefined; const rest = { { undefined; const rest = { { undefined; const rest = [null, null]; return append(rest, map(x => pair(head([3, null]), x), rest)); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Constant rest declared and substituted into the rest of block

{ { undefined; const rest = { { undefined; const rest = { { undefined; return append([null, null], map(x => pair(head([3, null]), x), [null, null])); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Constant rest declared and substituted into the rest of block

{ { undefined; const rest = { { undefined; const rest = { { undefined; return append([null, null], map(x => pair(head([3, null]), x), [null, null])); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] undefined finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { return append([null, null], map(x => pair(head([3, null]), x), [null, null])); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] undefined finished evaluating

{ { undefined; const rest = { { undefined; const rest = { { return append([null, null], map(x => pair(head([3, null]), x), [null, null])); } }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] return append([null, null], map(x => pair(head([3, null]), x), [null, null])); finished evaluating

{ { undefined; const rest = { { undefined; const rest = { return append([null, null], map(x => pair(head([3, null]), x), [null, null])); }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] return append([null, null], map(x => pair(head([3, null]), x), [null, null])); finished evaluating

{ { undefined; const rest = { { undefined; const rest = { return append([null, null], map(x => pair(head([3, null]), x), [null, null])); }; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] append([null, null], map(x => pair(head([3, null]), x), [null, null])) returned

{ { undefined; const rest = { { undefined; const rest = append([null, null], map(x => pair(head([3, null]), x), [null, null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] append([null, null], map(x => pair(head([3, null]), x), [null, null])) returned

{ { undefined; const rest = { { undefined; const rest = append([null, null], map(x => pair(head([3, null]), x), [null, null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), [null, null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), [null, null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([3, null]), x), [null, null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([3, null]), x), [null, null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] x => pair(head([3, null]), x), [null, null], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null([null, null]) ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] x => pair(head([3, null]), x), [null, null], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null([null, null]) ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], false ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], false ? reverse(null) : $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), tail([null, null]), pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(head([null, null])), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair((x => pair(head([3, null]), x))(null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null substituted into x of x => pair(head([3, null]), x)

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(head([3, null]), null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null substituted into x of x => pair(head([3, null]), x)

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(head([3, null]), null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(3, null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair(pair(3, null), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair([3, null], null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, pair([3, null], null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $map(x => pair(head([3, null]), x), null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([3, null]), x), null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $map runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([3, null]), x), null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] x => pair(head([3, null]), x), null, [[3, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null(null) ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] x => pair(head([3, null]), x), null, [[3, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null(null) ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], true ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], true ? reverse([[3, null], null]) : $map(x => pair(head([3, null]), x), tail(null), pair((x => pair(head([3, null]), x))(head(null)), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], reverse([[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], reverse([[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse([[3, null], null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse([[3, null], null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[3, null], null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[3, null], null], null)); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[3, null], null], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null([[3, null], null]) ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[3, null], null], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null([[3, null], null]) ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], false ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], false ? null : $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(tail([[3, null], null]), pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, pair(head([[3, null], null]), null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, pair([3, null], null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, pair([3, null], null))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], $reverse(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $reverse runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null, [[3, null], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null(null) ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null, [[3, null], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = { { undefined; const rest = append([null, null], is_null(null) ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], true ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = append([null, null], true ? [[3, null], null] : $reverse(tail(null), pair(head(null), [[3, null], null]))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], [[3, null], null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = append([null, null], [[3, null], null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] append runs

{ { undefined; const rest = { { undefined; const rest = $append([null, null], [[3, null], null], xs => xs); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] append runs

{ { undefined; const rest = { { undefined; const rest = $append([null, null], [[3, null], null], xs => xs); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $append runs

{ { undefined; const rest = { { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, null], [[3, null], null], xs => xs); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $append runs

{ { undefined; const rest = { { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, null], [[3, null], null], xs => xs); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [null, null], [[3, null], null], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = { { undefined; const rest = is_null([null, null]) ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [null, null], [[3, null], null], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = { { undefined; const rest = is_null([null, null]) ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = false ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = false ? (xs => xs)([[3, null], null]) : $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = { { undefined; const rest = $append(tail([null, null]), [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = $append(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = { { undefined; const rest = $append(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $append runs

{ { undefined; const rest = { { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $append runs

{ { undefined; const rest = { { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = { { undefined; const rest = is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null, [[3, null], null], zs => (xs => xs)(pair(head([null, null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = { { undefined; const rest = is_null(null) ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = { { undefined; const rest = true ? (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]) : $append(tail(null), [[3, null], null], zs => (zs => (xs => xs)(pair(head([null, null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = { { undefined; const rest = (zs => (xs => xs)(pair(head([null, null]), zs)))([[3, null], null]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[3, null], null] substituted into zs of zs => (xs => xs)(pair(head([null, null]), zs))

{ { undefined; const rest = { { undefined; const rest = (xs => xs)(pair(head([null, null]), [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[3, null], null] substituted into zs of zs => (xs => xs)(pair(head([null, null]), zs))

{ { undefined; const rest = { { undefined; const rest = (xs => xs)(pair(head([null, null]), [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = { { undefined; const rest = (xs => xs)(pair(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = { { undefined; const rest = (xs => xs)(pair(null, [[3, null], null])); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = (xs => xs)([null, [[3, null], null]]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = { { undefined; const rest = (xs => xs)([null, [[3, null], null]]); return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [null, [[3, null], null]] substituted into xs of xs => xs

{ { undefined; const rest = { { undefined; const rest = [null, [[3, null], null]]; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [null, [[3, null], null]] substituted into xs of xs => xs

{ { undefined; const rest = { { undefined; const rest = [null, [[3, null], null]]; return append(rest, map(x => pair(head([2, [3, null]]), x), rest)); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Constant rest declared and substituted into the rest of block

{ { undefined; const rest = { { undefined; return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Constant rest declared and substituted into the rest of block

{ { undefined; const rest = { { undefined; return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] undefined finished evaluating

{ { undefined; const rest = { { return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] undefined finished evaluating

{ { undefined; const rest = { { return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); } }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); finished evaluating

{ { undefined; const rest = { return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); finished evaluating

{ { undefined; const rest = { return append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); }; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])) returned

{ { undefined; const rest = append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])) returned

{ { undefined; const rest = append([null, [[3, null], null]], map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] map runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] map runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([null, [[3, null], null]]) ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] x => pair(head([2, [3, null]]), x), [null, [[3, null], null]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([null, [[3, null], null]]) ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? reverse(null) : $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([null, [[3, null], null]]), pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(head([null, [[3, null], null]])), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair((x => pair(head([2, [3, null]]), x))(null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null substituted into x of x => pair(head([2, [3, null]]), x)

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(head([2, [3, null]]), null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null substituted into x of x => pair(head([2, [3, null]]), x)

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(head([2, [3, null]]), null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(2, null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair(pair(2, null), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair([2, null], null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], pair([2, null], null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[3, null], null]) ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] x => pair(head([2, [3, null]]), x), [[3, null], null], [[2, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[3, null], null]) ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? reverse([[2, null], null]) : $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), tail([[3, null], null]), pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))(head([[3, null], null])), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))([3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair((x => pair(head([2, [3, null]]), x))([3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [3, null] substituted into x of x => pair(head([2, [3, null]]), x)

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(head([2, [3, null]]), [3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [3, null] substituted into x of x => pair(head([2, [3, null]]), x)

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(head([2, [3, null]]), [3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(2, [3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair(pair(2, [3, null]), [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair([2, [3, null]], [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, pair([2, [3, null]], [[2, null], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $map(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $map runs

{ { undefined; const rest = append([null, [[3, null], null]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null(null) ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] x => pair(head([2, [3, null]]), x), null, [[2, [3, null]], [[2, null], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

{ { undefined; const rest = append([null, [[3, null], null]], is_null(null) ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], true ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], true ? reverse([[2, [3, null]], [[2, null], null]]) : $map(x => pair(head([2, [3, null]]), x), tail(null), pair((x => pair(head([2, [3, null]]), x))(head(null)), [[2, [3, null]], [[2, null], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = append([null, [[3, null], null]], reverse([[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = append([null, [[3, null], null]], reverse([[2, [3, null]], [[2, null], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, [3, null]], [[2, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, [3, null]], [[2, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, [3, null]], [[2, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, [3, null]], [[2, null], null]], null)); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[2, [3, null]], [[2, null], null]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[2, [3, null]], [[2, null], null]]) ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[2, [3, null]], [[2, null], null]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[2, [3, null]], [[2, null], null]]) ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? null : $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(tail([[2, [3, null]], [[2, null], null]]), pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair(head([[2, [3, null]], [[2, null], null]]), null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair([2, [3, null]], null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], pair([2, [3, null]], null))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], [[2, [3, null]], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse([[2, null], null], [[2, [3, null]], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, null], null], [[2, [3, null]], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[2, null], null], [[2, [3, null]], null])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[2, null], null], [[2, [3, null]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[2, null], null]) ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[2, null], null], [[2, [3, null]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null([[2, null], null]) ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], false ? [[2, [3, null]], null] : $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(tail([[2, null], null]), pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, pair(head([[2, null], null]), [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, pair([2, null], [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, pair([2, null], [[2, [3, null]], null]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = append([null, [[3, null], null]], $reverse(null, [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $reverse runs

{ { undefined; const rest = append([null, [[3, null], null]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null, [[2, null], [[2, [3, null]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null(null) ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null, [[2, null], [[2, [3, null]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

{ { undefined; const rest = append([null, [[3, null], null]], is_null(null) ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], true ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = append([null, [[3, null], null]], true ? [[2, null], [[2, [3, null]], null]] : $reverse(tail(null), pair(head(null), [[2, null], [[2, [3, null]], null]]))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] append runs

{ { undefined; const rest = $append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] append runs

{ { undefined; const rest = $append([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null([null, [[3, null], null]]) ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [null, [[3, null], null]], [[2, null], [[2, [3, null]], null]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null([null, [[3, null], null]]) ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = false ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = false ? (xs => xs)([[2, null], [[2, [3, null]], null]]) : $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = $append(tail([null, [[3, null], null]]), [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = $append([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = $append([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null([[3, null], null]) ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[3, null], null], [[2, null], [[2, [3, null]], null]], zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null([[3, null], null]) ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = false ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = false ? (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

{ { undefined; const rest = $append(tail([[3, null], null]), [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] tail runs

{ { undefined; const rest = $append(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] tail runs

{ { undefined; const rest = $append(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] $append runs

{ { undefined; const rest = ((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null(null) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] null, [[2, null], [[2, [3, null]], null]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

{ { undefined; const rest = is_null(null) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] is_null runs

{ { undefined; const rest = true ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] is_null runs

{ { undefined; const rest = true ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]) : $append(tail(null), [[2, null], [[2, [3, null]], null]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))(pair(head(null), zs))); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

{ { undefined; const rest = (zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs)))([[2, null], [[2, [3, null]], null]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[2, null], [[2, [3, null]], null]] substituted into zs of zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[2, null], [[2, [3, null]], null]] substituted into zs of zs => (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), zs))

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair(head([[3, null], null]), [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], null]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[3, null], [[2, null], [[2, [3, null]], null]]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = (zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs)))([[3, null], [[2, null], [[2, [3, null]], null]]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [[3, null], [[2, null], [[2, [3, null]], null]]] substituted into zs of zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))

{ { undefined; const rest = (xs => xs)(pair(head([null, [[3, null], null]]), [[3, null], [[2, null], [[2, [3, null]], null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [[3, null], [[2, null], [[2, [3, null]], null]]] substituted into zs of zs => (xs => xs)(pair(head([null, [[3, null], null]]), zs))

{ { undefined; const rest = (xs => xs)(pair(head([null, [[3, null], null]]), [[3, null], [[2, null], [[2, [3, null]], null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] head runs

{ { undefined; const rest = (xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] head runs

{ { undefined; const rest = (xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], null]]])); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] pair runs

{ { undefined; const rest = (xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] pair runs

{ { undefined; const rest = (xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]); return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] [null, [[3, null], [[2, null], [[2, [3, null]], null]]]] substituted into xs of xs => xs

{ { undefined; const rest = [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[afterMarker] [null, [[3, null], [[2, null], [[2, [3, null]], null]]]] substituted into xs of xs => xs

{ { undefined; const rest = [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]; return append(rest, map(x => pair(head([1, [2, [3, null]]]), x), rest)); }};
[beforeMarker] Constant rest declared and substituted into the rest of block

{ { undefined; return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); }};
[afterMarker] Constant rest declared and substituted into the rest of block

{ { undefined; return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); }};
[beforeMarker] undefined finished evaluating

{ { return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); }};
[afterMarker] undefined finished evaluating

{ { return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); }};
[beforeMarker] return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); finished evaluating

{ return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));};
[afterMarker] return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])); finished evaluating

{ return append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));};
[beforeMarker] append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])) returned

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));
[afterMarker] append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]])) returned

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]]));
[beforeMarker] map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));
[afterMarker] map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));
[beforeMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));
[afterMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null));
[beforeMarker] x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[afterMarker] x => pair(head([1, [2, [3, null]]]), x), [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], null substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse(null) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]])), null)));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(null), null)));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair((x => pair(head([1, [2, [3, null]]]), x))(null), null)));
[beforeMarker] null substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(head([1, [2, [3, null]]]), null), null)));
[afterMarker] null substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(head([1, [2, [3, null]]]), null), null)));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(1, null), null)));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair(pair(1, null), null)));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair([1, null], null)));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], pair([1, null], null)));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));
[beforeMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));
[afterMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null]));
[beforeMarker] x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[afterMarker] x => pair(head([1, [2, [3, null]]]), x), [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], null] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, null], null]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[3, null], [[2, null], [[2, [3, null]], null]]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[3, null], [[2, null], [[2, [3, null]], null]]])), [[1, null], null])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))([3, null]), [[1, null], null])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair((x => pair(head([1, [2, [3, null]]]), x))([3, null]), [[1, null], null])));
[beforeMarker] [3, null] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(head([1, [2, [3, null]]]), [3, null]), [[1, null], null])));
[afterMarker] [3, null] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(head([1, [2, [3, null]]]), [3, null]), [[1, null], null])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(1, [3, null]), [[1, null], null])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair(pair(1, [3, null]), [[1, null], null])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair([1, [3, null]], [[1, null], null])));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], pair([1, [3, null]], [[1, null], null])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));
[beforeMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));
[afterMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]]));
[beforeMarker] x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, null], [[2, [3, null]], null]]) ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[afterMarker] x => pair(head([1, [2, [3, null]]]), x), [[2, null], [[2, [3, null]], null]], [[1, [3, null]], [[1, null], null]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, null], [[2, [3, null]], null]]) ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [3, null]], [[1, null], null]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, null], [[2, [3, null]], null]]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, null], [[2, [3, null]], null]])), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))([2, null]), [[1, [3, null]], [[1, null], null]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair((x => pair(head([1, [2, [3, null]]]), x))([2, null]), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] [2, null] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(head([1, [2, [3, null]]]), [2, null]), [[1, [3, null]], [[1, null], null]])));
[afterMarker] [2, null] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(head([1, [2, [3, null]]]), [2, null]), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(1, [2, null]), [[1, [3, null]], [[1, null], null]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair(pair(1, [2, null]), [[1, [3, null]], [[1, null], null]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair([1, [2, null]], [[1, [3, null]], [[1, null], null]])));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], pair([1, [2, null]], [[1, [3, null]], [[1, null], null]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));
[beforeMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));
[afterMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]));
[beforeMarker] x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, [3, null]], null]) ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] x => pair(head([1, [2, [3, null]]]), x), [[2, [3, null]], null], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[2, [3, null]], null]) ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), tail([[2, [3, null]], null]), pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))(head([[2, [3, null]], null])), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))([2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair((x => pair(head([1, [2, [3, null]]]), x))([2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] [2, [3, null]] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(head([1, [2, [3, null]]]), [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] [2, [3, null]] substituted into x of x => pair(head([1, [2, [3, null]]]), x)

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(head([1, [2, [3, null]]]), [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(1, [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair(pair(1, [2, [3, null]]), [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair([1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, pair([1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $map(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[beforeMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[afterMarker] $map runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc)))(x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[beforeMarker] x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));
[afterMarker] x => pair(head([1, [2, [3, null]]]), x), null, [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]] substituted into f, xs, acc of (f, xs, acc) => is_null(xs) ? reverse(acc) : $map(f, tail(xs), pair(f(head(xs)), acc))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) : $map(x => pair(head([1, [2, [3, null]]]), x), tail(null), pair((x => pair(head([1, [2, [3, null]]]), x))(head(null)), [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]])));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]));
[beforeMarker] reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));
[afterMarker] reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));
[beforeMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));
[afterMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null));
[beforeMarker] [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[afterMarker] [[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]], null substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]) ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? null : $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair(head([[1, [2, [3, null]]], [[1, [2, null]], [[1, [3, null]], [[1, null], null]]]]), null)));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair([1, [2, [3, null]]], null)));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], pair([1, [2, [3, null]]], null)));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));
[beforeMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));
[afterMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null]));
[beforeMarker] [[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[afterMarker] [[1, [2, null]], [[1, [3, null]], [[1, null], null]]], [[1, [2, [3, null]]], null] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]) ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, [3, null]]], null] : $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair(head([[1, [2, null]], [[1, [3, null]], [[1, null], null]]]), [[1, [2, [3, null]]], null])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair([1, [2, null]], [[1, [2, [3, null]]], null])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], pair([1, [2, null]], [[1, [2, [3, null]]], null])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));
[beforeMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));
[afterMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]));
[beforeMarker] [[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [3, null]], [[1, null], null]]) ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[afterMarker] [[1, [3, null]], [[1, null], null]], [[1, [2, null]], [[1, [2, [3, null]]], null]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, [3, null]], [[1, null], null]]) ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [2, null]], [[1, [2, [3, null]]], null]] : $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, [3, null]], [[1, null], null]]), pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair(head([[1, [3, null]], [[1, null], null]]), [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair([1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], pair([1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));
[beforeMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));
[afterMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))([[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]));
[beforeMarker] [[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, null], null]) ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[afterMarker] [[1, null], null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null([[1, null], null]) ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], false ? [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]] : $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(tail([[1, null], null]), pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[beforeMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[afterMarker] tail runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair(head([[1, null], null]), [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[beforeMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair([1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[afterMarker] head runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, pair([1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]])));
[beforeMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[afterMarker] pair runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], $reverse(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[beforeMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[afterMarker] $reverse runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], ((original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed)))(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[beforeMarker] null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));
[afterMarker] null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] substituted into original, reversed of (original, reversed) => is_null(original) ? reversed : $reverse(tail(original), pair(head(original), reversed))

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], is_null(null) ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));
[beforeMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));
[afterMarker] is_null runs

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], true ? [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] : $reverse(tail(null), pair(head(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]])));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);
[beforeMarker] append runs

$append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);
[afterMarker] append runs

$append([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs);
[beforeMarker] [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[afterMarker] [null, [[3, null], [[2, null], [[2, [3, null]], null]]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], xs => xs substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]) ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[beforeMarker] is_null runs

false ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[afterMarker] is_null runs

false ? (xs => xs)([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[beforeMarker] tail runs

$append([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[afterMarker] tail runs

$append([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)));
[beforeMarker] [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[afterMarker] [[3, null], [[2, null], [[2, [3, null]], null]]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[3, null], [[2, null], [[2, [3, null]], null]]]) ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[beforeMarker] is_null runs

false ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[afterMarker] is_null runs

false ? (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[3, null], [[2, null], [[2, [3, null]], null]]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[beforeMarker] tail runs

$append([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[afterMarker] tail runs

$append([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)));
[beforeMarker] [[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[2, null], [[2, [3, null]], null]]) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[afterMarker] [[2, null], [[2, [3, null]], null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[2, null], [[2, [3, null]], null]]) ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[beforeMarker] is_null runs

false ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[afterMarker] is_null runs

false ? (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[2, null], [[2, [3, null]], null]]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[beforeMarker] tail runs

$append([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[afterMarker] tail runs

$append([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))([[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)));
[beforeMarker] [[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[2, [3, null]], null]) ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[afterMarker] [[2, [3, null]], null], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null([[2, [3, null]], null]) ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[beforeMarker] is_null runs

false ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[afterMarker] is_null runs

false ? (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[beforeMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[afterMarker] Conditional expression evaluated, condition is false, alternate evaluated

$append(tail([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[beforeMarker] tail runs

$append(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[afterMarker] tail runs

$append(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[beforeMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[afterMarker] $append runs

((xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs))))(null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)));
[beforeMarker] null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null(null) ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));
[afterMarker] null, [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)) substituted into xs, ys, cont of (xs, ys, cont) => is_null(xs) ? cont(ys) : $append(tail(xs), ys, zs => cont(pair(head(xs), zs)))

is_null(null) ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));
[beforeMarker] is_null runs

true ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));
[afterMarker] is_null runs

true ? (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]) : $append(tail(null), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]], zs => (zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))(pair(head(null), zs)));
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

(zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

(zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs)))([[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]);
[beforeMarker] [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] substituted into zs of zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs))

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[afterMarker] [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]] substituted into zs of zs => (zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), zs))

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair(head([[2, [3, null]], null]), [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[beforeMarker] head runs

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair([2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[afterMarker] head runs

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))(pair([2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]));
[beforeMarker] pair runs

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]);
[afterMarker] pair runs

(zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs)))([[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]);
[beforeMarker] [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]] substituted into zs of zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs))

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));
[afterMarker] [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]] substituted into zs of zs => (zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), zs))

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair(head([[2, null], [[2, [3, null]], null]]), [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));
[beforeMarker] head runs

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair([2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));
[afterMarker] head runs

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))(pair([2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]));
[beforeMarker] pair runs

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]);
[afterMarker] pair runs

(zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs)))([[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]);
[beforeMarker] [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]] substituted into zs of zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs))

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));
[afterMarker] [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]] substituted into zs of zs => (zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), zs))

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair(head([[3, null], [[2, null], [[2, [3, null]], null]]]), [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));
[beforeMarker] head runs

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));
[afterMarker] head runs

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))(pair([3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]));
[beforeMarker] pair runs

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]);
[afterMarker] pair runs

(zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs)))([[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]);
[beforeMarker] [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]] substituted into zs of zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs))

(xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));
[afterMarker] [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]] substituted into zs of zs => (xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), zs))

(xs => xs)(pair(head([null, [[3, null], [[2, null], [[2, [3, null]], null]]]]), [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));
[beforeMarker] head runs

(xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));
[afterMarker] head runs

(xs => xs)(pair(null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]));
[beforeMarker] pair runs

(xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]]);
[afterMarker] pair runs

(xs => xs)([null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]]);
[beforeMarker] [null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]] substituted into xs of xs => xs

[null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]];
[afterMarker] [null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]] substituted into xs of xs => xs

[null, [[3, null], [[2, null], [[2, [3, null]], [[1, null], [[1, [3, null]], [[1, [2, null]], [[1, [2, [3, null]]], null]]]]]]]];
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 1 + math_sin 1`] = `
"1 + math_sin;
[noMarker] Start of evaluation

1 + math_sin;
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 Even odd mutual 1`] = `
"const odd = n => n === 0 ? false : even(n - 1);const even = n => n === 0 || odd(n - 1);even(1);
[noMarker] Start of evaluation

const odd = n => n === 0 ? false : even(n - 1);const even = n => n === 0 || odd(n - 1);even(1);
[beforeMarker] Constant odd declared and substituted into the rest of block

const even = n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1);even(1);
[afterMarker] Constant odd declared and substituted into the rest of block

const even = n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1);even(1);
[beforeMarker] Constant even declared and substituted into the rest of block

(n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(1);
[afterMarker] Constant even declared and substituted into the rest of block

(n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(1);
[beforeMarker] 1 substituted into n of n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1)

1 === 0 || (n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[afterMarker] 1 substituted into n of n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1)

1 === 0 || (n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[beforeMarker] Binary expression 1 === 0 evaluated

false || (n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[afterMarker] Binary expression 1 === 0 evaluated

false || (n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[beforeMarker] OR operation evaluated, left of operator is false, continue evaluating right of operator

(n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[afterMarker] OR operation evaluated, left of operator is false, continue evaluating right of operator

(n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(1 - 1);
[beforeMarker] Binary expression 1 - 1 evaluated

(n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(0);
[afterMarker] Binary expression 1 - 1 evaluated

(n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1))(0);
[beforeMarker] 0 substituted into n of n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1)

0 === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(0 - 1);
[afterMarker] 0 substituted into n of n => n === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(n - 1)

0 === 0 ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(0 - 1);
[beforeMarker] Binary expression 0 === 0 evaluated

true ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(0 - 1);
[afterMarker] Binary expression 0 === 0 evaluated

true ? false : (n => n === 0 || (n => n === 0 ? false : even(n - 1))(n - 1))(0 - 1);
[beforeMarker] Conditional expression evaluated, condition is true, consequent evaluated

false;
[afterMarker] Conditional expression evaluated, condition is true, consequent evaluated

false;
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 Infinite recursion 1`] = `
"function f() { return f();}f();
[noMarker] Start of evaluation

function f() { return f();}f();
[beforeMarker] Function f declared, parameter(s)  required

(() => { return f();})();
[afterMarker] Function f declared, parameter(s)  required

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[beforeMarker] () => {...} runs

(() => { return f();})();
[afterMarker] () => {...} runs

(() => { return f();})();
[noMarker] Maximum number of steps exceeded

(() => { return f();})();
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 expmod 1`] = `
"function is_even(n) { return n % 2 === 0;}function expmod(base, exp, m) { if (exp === 0) { return 1; } else { if (is_even(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }}expmod(4, 3, 5);
[noMarker] Start of evaluation

function is_even(n) { return n % 2 === 0;}function expmod(base, exp, m) { if (exp === 0) { return 1; } else { if (is_even(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }}expmod(4, 3, 5);
[beforeMarker] Function is_even declared, parameter(s) n required

function expmod(base, exp, m) { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }}expmod(4, 3, 5);
[afterMarker] Function is_even declared, parameter(s) n required

function expmod(base, exp, m) { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }}expmod(4, 3, 5);
[beforeMarker] Function expmod declared, parameter(s) base,exp,m required

((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 3, 5);
[afterMarker] Function expmod declared, parameter(s) base,exp,m required

((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 3, 5);
[beforeMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 3, 5

{ if (3 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 3, 5

{ if (3 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] Binary expression 3 === 0 evaluated

{ if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] Binary expression 3 === 0 evaluated

{ if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] ...

{ { undefined; if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] ...

{ { undefined; if ((n => { return n % 2 === 0; })(3)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] Function is_even, defined as n => {...}, takes in n as input 3

{ { undefined; if (3 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] Function is_even, defined as n => {...}, takes in n as input 3

{ { undefined; if (3 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] Binary expression 3 % 2 evaluated

{ { undefined; if (1 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] Binary expression 3 % 2 evaluated

{ { undefined; if (1 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] Binary expression 1 === 0 evaluated

{ { undefined; if (false) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] Binary expression 1 === 0 evaluated

{ { undefined; if (false) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] ...

{ { undefined; { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] ...

{ { undefined; { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] undefined finished evaluating

{ { undefined; { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[afterMarker] undefined finished evaluating

{ { undefined; { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; } }};
[beforeMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5; finished evaluating

{ { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; }};
[afterMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5; finished evaluating

{ { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; }};
[beforeMarker] undefined finished evaluating

{ { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; }};
[afterMarker] undefined finished evaluating

{ { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5; }};
[beforeMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5; finished evaluating

{ return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5;};
[afterMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5; finished evaluating

{ return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 3 - 1, 5) % 5;};
[beforeMarker] 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5 returned

4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 3 - 1, 5) % 5;
[afterMarker] 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 3 - 1, 5) % 5 returned

4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 3 - 1, 5) % 5;
[beforeMarker] Binary expression 3 - 1 evaluated

4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 2, 5) % 5;
[afterMarker] Binary expression 3 - 1 evaluated

4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } }})(4, 2, 5) % 5;
[beforeMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 2, 5

4 * { if (2 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 2, 5

4 * { if (2 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] Binary expression 2 === 0 evaluated

4 * { if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] Binary expression 2 === 0 evaluated

4 * { if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] ...

4 * { { undefined; if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] ...

4 * { { undefined; if ((n => { return n % 2 === 0; })(2)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] Function is_even, defined as n => {...}, takes in n as input 2

4 * { { undefined; if (2 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] Function is_even, defined as n => {...}, takes in n as input 2

4 * { { undefined; if (2 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] Binary expression 2 % 2 evaluated

4 * { { undefined; if (0 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] Binary expression 2 % 2 evaluated

4 * { { undefined; if (0 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] Binary expression 0 === 0 evaluated

4 * { { undefined; if (true) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[afterMarker] Binary expression 0 === 0 evaluated

4 * { { undefined; if (true) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 - 1, 5) % 5; } }} % 5;
[beforeMarker] ...

4 * { { undefined; { undefined; const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } }} % 5;
[afterMarker] ...

4 * { { undefined; { undefined; const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 2 / 2, 5); return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 2 / 2 evaluated

4 * { { undefined; { undefined; const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1, 5); return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 2 / 2 evaluated

4 * { { undefined; { undefined; const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1, 5); return to_half * to_half % 5; } }} % 5;
[beforeMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 1, 5

4 * { { undefined; { undefined; const to_half = { if (1 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 1, 5

4 * { { undefined; { undefined; const to_half = { if (1 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 1 === 0 evaluated

4 * { { undefined; { undefined; const to_half = { if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 1 === 0 evaluated

4 * { { undefined; { undefined; const to_half = { if (false) { return 1; } else { if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] ...

4 * { { undefined; { undefined; const to_half = { { undefined; if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] ...

4 * { { undefined; { undefined; const to_half = { { undefined; if ((n => { return n % 2 === 0; })(1)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Function is_even, defined as n => {...}, takes in n as input 1

4 * { { undefined; { undefined; const to_half = { { undefined; if (1 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] Function is_even, defined as n => {...}, takes in n as input 1

4 * { { undefined; { undefined; const to_half = { { undefined; if (1 % 2 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 1 % 2 evaluated

4 * { { undefined; { undefined; const to_half = { { undefined; if (1 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 1 % 2 evaluated

4 * { { undefined; { undefined; const to_half = { { undefined; if (1 === 0) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 1 === 0 evaluated

4 * { { undefined; { undefined; const to_half = { { undefined; if (false) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 1 === 0 evaluated

4 * { { undefined; { undefined; const to_half = { { undefined; if (false) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] ...

4 * { { undefined; { undefined; const to_half = { { undefined; { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] ...

4 * { { undefined; { undefined; const to_half = { { undefined; { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = { { undefined; { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = { { undefined; { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5; finished evaluating

4 * { { undefined; { undefined; const to_half = { { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5; finished evaluating

4 * { { undefined; { undefined; const to_half = { { undefined; return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = { { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } }; return to_half * to_half % 5; } }} % 5;
[afterMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = { { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; } }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5; finished evaluating

4 * { { undefined; { undefined; const to_half = { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; }; return to_half * to_half % 5; } }} % 5;
[afterMarker] return 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5; finished evaluating

4 * { { undefined; { undefined; const to_half = { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; }; return to_half * to_half % 5; } }} % 5;
[beforeMarker] 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5 returned

4 * { { undefined; { undefined; const to_half = 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] 4 * ((base, exp, m) => {
  if (exp === 0) {
    return 1;
  } else {
    if ((n => {
      return n % 2 === 0;
    })(exp)) {
      const to_half = expmod(base, exp / 2, m);
      return to_half * to_half % m;
    } else {
      return base * expmod(base, exp - 1, m) % m;
    }
  }
})(4, 1 - 1, 5) % 5 returned

4 * { { undefined; { undefined; const to_half = 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 1 - 1, 5) % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 1 - 1 evaluated

4 * { { undefined; { undefined; const to_half = 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0, 5) % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 1 - 1 evaluated

4 * { { undefined; { undefined; const to_half = 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0, 5) % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 0, 5

4 * { { undefined; { undefined; const to_half = 4 * { if (0 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(0)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 - 1, 5) % 5; } } } % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] Function expmod, defined as base, exp, m => {...}, takes in base, exp, m as input 4, 0, 5

4 * { { undefined; { undefined; const to_half = 4 * { if (0 === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(0)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 - 1, 5) % 5; } } } % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 0 === 0 evaluated

4 * { { undefined; { undefined; const to_half = 4 * { if (true) { return 1; } else { if ((n => { return n % 2 === 0; })(0)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 - 1, 5) % 5; } } } % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 0 === 0 evaluated

4 * { { undefined; { undefined; const to_half = 4 * { if (true) { return 1; } else { if ((n => { return n % 2 === 0; })(0)) { const to_half = ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 / 2, 5); return to_half * to_half % 5; } else { return 4 * ((base, exp, m) => { if (exp === 0) { return 1; } else { if ((n => { return n % 2 === 0; })(exp)) { const to_half = expmod(base, exp / 2, m); return to_half * to_half % m; } else { return base * expmod(base, exp - 1, m) % m; } } })(4, 0 - 1, 5) % 5; } } } % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] ...

4 * { { undefined; { undefined; const to_half = 4 * { { undefined; return 1; } } % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] ...

4 * { { undefined; { undefined; const to_half = 4 * { { undefined; return 1; } } % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = 4 * { { return 1; } } % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] undefined finished evaluating

4 * { { undefined; { undefined; const to_half = 4 * { { return 1; } } % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] return 1; finished evaluating

4 * { { undefined; { undefined; const to_half = 4 * { return 1; } % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] return 1; finished evaluating

4 * { { undefined; { undefined; const to_half = 4 * { return 1; } % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] 1 returned

4 * { { undefined; { undefined; const to_half = 4 * 1 % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] 1 returned

4 * { { undefined; { undefined; const to_half = 4 * 1 % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 4 * 1 evaluated

4 * { { undefined; { undefined; const to_half = 4 % 5; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 4 * 1 evaluated

4 * { { undefined; { undefined; const to_half = 4 % 5; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Binary expression 4 % 5 evaluated

4 * { { undefined; { undefined; const to_half = 4; return to_half * to_half % 5; } }} % 5;
[afterMarker] Binary expression 4 % 5 evaluated

4 * { { undefined; { undefined; const to_half = 4; return to_half * to_half % 5; } }} % 5;
[beforeMarker] Constant to_half declared and substituted into the rest of block

4 * { { undefined; { undefined; return 4 * 4 % 5; } }} % 5;
[afterMarker] Constant to_half declared and substituted into the rest of block

4 * { { undefined; { undefined; return 4 * 4 % 5; } }} % 5;
[beforeMarker] undefined finished evaluating

4 * { { undefined; { return 4 * 4 % 5; } }} % 5;
[afterMarker] undefined finished evaluating

4 * { { undefined; { return 4 * 4 % 5; } }} % 5;
[beforeMarker] return 4 * 4 % 5; finished evaluating

4 * { { undefined; return 4 * 4 % 5; }} % 5;
[afterMarker] return 4 * 4 % 5; finished evaluating

4 * { { undefined; return 4 * 4 % 5; }} % 5;
[beforeMarker] undefined finished evaluating

4 * { { return 4 * 4 % 5; }} % 5;
[afterMarker] undefined finished evaluating

4 * { { return 4 * 4 % 5; }} % 5;
[beforeMarker] return 4 * 4 % 5; finished evaluating

4 * { return 4 * 4 % 5;} % 5;
[afterMarker] return 4 * 4 % 5; finished evaluating

4 * { return 4 * 4 % 5;} % 5;
[beforeMarker] 4 * 4 % 5 returned

4 * (4 * 4 % 5) % 5;
[afterMarker] 4 * 4 % 5 returned

4 * (4 * 4 % 5) % 5;
[beforeMarker] Binary expression 4 * 4 evaluated

4 * (16 % 5) % 5;
[afterMarker] Binary expression 4 * 4 evaluated

4 * (16 % 5) % 5;
[beforeMarker] Binary expression 16 % 5 evaluated

4 * 1 % 5;
[afterMarker] Binary expression 16 % 5 evaluated

4 * 1 % 5;
[beforeMarker] Binary expression 4 * 1 evaluated

4 % 5;
[afterMarker] Binary expression 4 * 1 evaluated

4 % 5;
[beforeMarker] Binary expression 4 % 5 evaluated

4;
[afterMarker] Binary expression 4 % 5 evaluated

4;
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 math_pow 1`] = `
"math_pow(2, 20) || NaN;
[noMarker] Start of evaluation

math_pow(2, 20) || NaN;
[beforeMarker] math_pow runs

1048576 || NaN;
[afterMarker] math_pow runs

1048576 || NaN;
[beforeMarker] OR operation evaluated, left of operator is false, continue evaluating right of operator

true;
[afterMarker] OR operation evaluated, left of operator is false, continue evaluating right of operator

true;
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 plus undefined 1`] = `
"math_sin(1) + undefined;
[noMarker] Start of evaluation

math_sin(1) + undefined;
[beforeMarker] math_sin runs

0.8414709848078965 + undefined;
[afterMarker] math_sin runs

0.8414709848078965 + undefined;
[noMarker] Evaluation complete
"
`;

exports[`SOURCE 0 undefined || 1 1`] = `
"undefined || 1;
[noMarker] Start of evaluation

undefined || 1;
[noMarker] Evaluation complete
"
`;

exports[`triple equals work on function 1`] = `
"function f() { return g();}function g() { return f();}f === f;g === g;f === g;
[noMarker] Start of evaluation

function f() { return g();}function g() { return f();}f === f;g === g;f === g;
[beforeMarker] Function f declared, parameter(s)  required

function g() { return (() => { return g(); })();}(() => { return g();}) === (() => { return g();});g === g;(() => { return g();}) === g;
[afterMarker] Function f declared, parameter(s)  required

function g() { return (() => { return g(); })();}(() => { return g();}) === (() => { return g();});g === g;(() => { return g();}) === g;
[beforeMarker] Function g declared, parameter(s)  required

(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return (() => { return g(); })(); })();});(() => { return (() => { return g(); })();}) === (() => { return (() => { return g(); })();});(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[afterMarker] Function g declared, parameter(s)  required

(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return (() => { return g(); })(); })();});(() => { return (() => { return g(); })();}) === (() => { return (() => { return g(); })();});(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[beforeMarker] (() => {
  return (() => {
    return (() => {
      return g();
    })();
  })();
}) === (() => {
  return (() => {
    return (() => {
      return g();
    })();
  })();
}) finished evaluating

(() => { return (() => { return g(); })();}) === (() => { return (() => { return g(); })();});(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[afterMarker] (() => {
  return (() => {
    return (() => {
      return g();
    })();
  })();
}) === (() => {
  return (() => {
    return (() => {
      return g();
    })();
  })();
}) finished evaluating

(() => { return (() => { return g(); })();}) === (() => { return (() => { return g(); })();});(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[beforeMarker] (() => {
  return (() => {
    return g();
  })();
}) === (() => {
  return (() => {
    return g();
  })();
}) finished evaluating

(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[afterMarker] (() => {
  return (() => {
    return g();
  })();
}) === (() => {
  return (() => {
    return g();
  })();
}) finished evaluating

(() => { return (() => { return (() => { return g(); })(); })();}) === (() => { return (() => { return g(); })();});
[noMarker] Evaluation complete
"
`;
